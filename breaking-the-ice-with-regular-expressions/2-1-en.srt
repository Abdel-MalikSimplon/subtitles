1
00:00:00,280 --> 00:00:02,800
[SINGING] You started with
a string you need validated.

2
00:00:02,800 --> 00:00:05,660
Used conditionals, and
things got complicated.

3
00:00:05,660 --> 00:00:06,540
There's a better way.

4
00:00:06,540 --> 00:00:08,998
We'll teach you the lessons,
and you'll be writing patterns

5
00:00:08,998 --> 00:00:10,130
with regular expressions.

6
00:00:10,130 --> 00:00:11,460
Operators add a zing.

7
00:00:11,460 --> 00:00:12,554
Modifiers are the thing

8
00:00:12,554 --> 00:00:14,720
to find yourself the matches
on your subject string.

9
00:00:14,720 --> 00:00:17,820
You'll be parsing files
if you follow our advice.

10
00:00:17,820 --> 00:00:23,000
Sooner than you know it, you'll
be breaking the ice, ice, ice.

11
00:00:23,000 --> 00:00:26,340
Welcome back to Breaking the
Ice With Regular Expressions.

12
00:00:26,340 --> 00:00:28,030
I hope you enjoyed
The String Story

13
00:00:28,030 --> 00:00:31,020
and getting your first
taste of writing patterns.

14
00:00:31,020 --> 00:00:36,690
Let's now continue our voyage
with validating crew emails.

15
00:00:36,690 --> 00:00:38,410
Now, up to this
point we've verified

16
00:00:38,410 --> 00:00:42,250
that each potential shipmate
has entered a correct name.

17
00:00:42,250 --> 00:00:44,860
Let's now verify that each
potential shipmate has

18
00:00:44,860 --> 00:00:47,630
entered a valid email address.

19
00:00:47,630 --> 00:00:50,800
To begin, let's analyze our
subject that is correctly

20
00:00:50,800 --> 00:00:54,940
formatted, and formulate the
requirements for our pattern.

21
00:00:54,940 --> 00:00:58,980
Our subject starts with a word,
is followed by an @ symbol,

22
00:00:58,980 --> 00:01:01,640
and then is followed
by another word.

23
00:01:01,640 --> 00:01:03,430
Now, for the remainder
of this course

24
00:01:03,430 --> 00:01:05,590
we're going to see a
pattern goals box down

25
00:01:05,590 --> 00:01:08,250
to the bottom left-hand
corner of the screen.

26
00:01:08,250 --> 00:01:10,901
This is to help us keep track
of the different patterns

27
00:01:10,901 --> 00:01:13,150
and different matches that
we're trying to accomplish.

28
00:01:16,660 --> 00:01:20,550
We will use the backslash
"w", the @ symbol, and then

29
00:01:20,550 --> 00:01:23,710
another backslash "w"
to begin our pattern.

30
00:01:23,710 --> 00:01:25,850
Now, if you remember,
the backslash "w"

31
00:01:25,850 --> 00:01:29,520
equals one word-like
character, so in this example

32
00:01:29,520 --> 00:01:33,240
we're going to get a match on
the "a", the @ symbol, and the "e"

33
00:01:33,240 --> 00:01:36,155
from sara@example.com.

34
00:01:36,155 --> 00:01:37,980
Now, for the rest of
this course you're

35
00:01:37,980 --> 00:01:40,170
going to see colored bars
underneath the pattern

36
00:01:40,170 --> 00:01:41,650
and the subject.

37
00:01:41,650 --> 00:01:44,220
This is to help us visualize
some of the matches that

38
00:01:44,220 --> 00:01:45,830
are going on.

39
00:01:45,830 --> 00:01:47,670
So how would we go
about matching the rest

40
00:01:47,670 --> 00:01:49,220
of the characters in our email?

41
00:01:52,740 --> 00:01:55,800
We will add the plus operator
after each backslash "w"

42
00:01:55,800 --> 00:01:59,080
to repeat the word character
one or more times until we no

43
00:01:59,080 --> 00:02:01,180
longer find a word character.

44
00:02:01,180 --> 00:02:04,640
This allows us to
match on "sara@example",

45
00:02:04,640 --> 00:02:07,760
but we're not matching on
the .com portion of our email

46
00:02:07,760 --> 00:02:08,820
address.

47
00:02:08,820 --> 00:02:10,699
Well, this is because
the dot is not

48
00:02:10,699 --> 00:02:12,750
considered part of
a word character,

49
00:02:12,750 --> 00:02:14,916
so we're going to have to
handle this separately.

50
00:02:17,520 --> 00:02:20,300
By adding a dot, and
then another backslash "w"

51
00:02:20,300 --> 00:02:21,950
with a plus
operator, we're going

52
00:02:21,950 --> 00:02:23,800
to match on "sara@example.com".

53
00:02:23,800 --> 00:02:24,960
Looking good.

54
00:02:28,940 --> 00:02:30,510
But hold on a second.

55
00:02:30,510 --> 00:02:32,940
It still works with an
email like sara@example!com.

56
00:02:35,676 --> 00:02:38,070
Well, why would an
exclamation mark

57
00:02:38,070 --> 00:02:40,030
match when we specified a dot?

58
00:02:42,740 --> 00:02:44,820
Much like other metacharacters we have seen,

59
00:02:44,820 --> 00:02:46,430
the dot is a special
character that

60
00:02:46,430 --> 00:02:48,730
will match any character
except the new line.

61
00:02:48,730 --> 00:02:50,860
It is known as a wildcard.

62
00:02:50,860 --> 00:02:52,785
In order to match
a literal dot, we

63
00:02:52,785 --> 00:02:55,570
will escape it by placing
a backslash before the dot.

64
00:02:58,280 --> 00:02:59,550
Back to our example.

65
00:02:59,550 --> 00:03:01,890
By putting a backslash
in front of our dot,

66
00:03:01,890 --> 00:03:04,950
we're now matching
"sara@example.com",

67
00:03:04,950 --> 00:03:07,279
but we're no longer going
to match on an invalid email

68
00:03:07,279 --> 00:03:08,570
address like sara@example!com.

69
00:03:14,330 --> 00:03:16,750
As it turns out, characters
with special meanings

70
00:03:16,750 --> 00:03:19,370
can be escaped to use their
literal meaning by placing

71
00:03:19,370 --> 00:03:21,030
a backslash in front.

72
00:03:21,030 --> 00:03:22,860
This includes the
dot, which matches

73
00:03:22,860 --> 00:03:24,860
any character except new line.

74
00:03:24,860 --> 00:03:28,420
A backslash dot will match
the literal dot character.

75
00:03:28,420 --> 00:03:30,640
The plus, which will match
the proceeding pattern

76
00:03:30,640 --> 00:03:33,590
one or more times, and
the backslash plus,

77
00:03:33,590 --> 00:03:35,937
which will match a
literal plus character.

78
00:03:35,937 --> 00:03:38,520
We then have the question mark,
which will make the proceeding

79
00:03:38,520 --> 00:03:41,560
pattern optional, and
the backslash question

80
00:03:41,560 --> 00:03:44,100
mark, which matches a literal
question mark character.

81
00:03:46,880 --> 00:03:49,056
Our pattern's
looking pretty good.

82
00:03:49,056 --> 00:03:51,430
Now we're going to need to
handle for different top-level

83
00:03:51,430 --> 00:03:52,270
domains.

84
00:03:52,270 --> 00:03:58,400
In our example, we're going to
do .com, .net, .org, and .edu.

85
00:03:58,400 --> 00:04:00,610
We can do this by
using an OR operator,

86
00:04:00,610 --> 00:04:03,280
and then adding net,
another OR operator

87
00:04:03,280 --> 00:04:07,420
and adding org, and another
OR operator and adding edu.

88
00:04:07,420 --> 00:04:09,330
And as well, we're
going to add the "i"

89
00:04:09,330 --> 00:04:11,850
modifier, because our
top-level domains can

90
00:04:11,850 --> 00:04:14,400
be lowercase or uppercase.

91
00:04:14,400 --> 00:04:16,720
But this pattern won't work.

92
00:04:16,720 --> 00:04:22,430
Our pattern is matching
"sara@example.com" or "net"

93
00:04:22,430 --> 00:04:27,985
by itself, or "org" by
itself, or "edu" by itself.

94
00:04:30,790 --> 00:04:32,900
Well, just like
math operations, we

95
00:04:32,900 --> 00:04:36,010
can use parentheses
to create groups.

96
00:04:36,010 --> 00:04:37,670
This will help the
regular expression

97
00:04:37,670 --> 00:04:42,360
evaluator understand which
order to evaluate your pattern.

98
00:04:42,360 --> 00:04:45,820
So now our expression
matches "sara@example.com"

99
00:04:45,820 --> 00:04:50,470
or "sara@example.net", and so on.

100
00:04:53,880 --> 00:04:57,920
Our pattern is almost complete,
but this invalid input

101
00:04:57,920 --> 00:05:00,840
will succeed when it should
not by placing a bunch of text

102
00:05:00,840 --> 00:05:03,580
after our top-level domain.

103
00:05:03,580 --> 00:05:04,980
We need to take
into account what

104
00:05:04,980 --> 00:05:08,885
is before and after our desired
pattern within our subject.

105
00:05:11,840 --> 00:05:14,750
Using anchors, we can ensure
there is nothing before

106
00:05:14,750 --> 00:05:17,000
or after our desired pattern.

107
00:05:17,000 --> 00:05:19,060
In this example
here, we will match

108
00:05:19,060 --> 00:05:22,350
"learn by doing" only
if "learn by doing"

109
00:05:22,350 --> 00:05:25,090
is by itself within the subject.

110
00:05:25,090 --> 00:05:28,520
We will put the caret directly
before "learn by doing",

111
00:05:28,520 --> 00:05:32,430
which literally means "start at
the beginning of the string".

112
00:05:32,430 --> 00:05:35,660
We will then put the dollar
sign after "learn by doing",

113
00:05:35,660 --> 00:05:39,220
which literally means "stop
at the end of the string".

114
00:05:39,220 --> 00:05:42,220
This now assures us that
there is no text before

115
00:05:42,220 --> 00:05:44,180
or after our desired pattern.

116
00:05:46,990 --> 00:05:49,160
Back to our original
example, we can

117
00:05:49,160 --> 00:05:51,690
use anchors to ensure
that our email address is

118
00:05:51,690 --> 00:05:54,950
by itself, with no text
before or after it,

119
00:05:54,950 --> 00:05:57,730
and our invalid email
address is no longer passing.

120
00:06:01,340 --> 00:06:03,860
It's now your turn to
try some more complex

121
00:06:03,860 --> 00:06:05,270
regular expressions.

122
00:06:05,270 --> 00:06:07,250
Off to the challenges.

