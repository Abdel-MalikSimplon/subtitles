1
00:00:00,180 --> 00:00:00,220
[SINGING]

2
00:00:00,220 --> 00:00:04,580
jQuery will help you build your
dotcom, find an element

3
00:00:04,580 --> 00:00:11,430
inside of the DOM, AJAX
traversal manipulation, event

4
00:00:11,430 --> 00:00:15,970
handling, and animation,
providing you with

5
00:00:15,970 --> 00:00:21,650
versatility, an API with
extensibility.

6
00:00:21,650 --> 00:00:25,130
jQuery is something
you can't ignore.

7
00:00:25,130 --> 00:00:25,600
Write less.

8
00:00:25,600 --> 00:00:26,850
Do more.

9
00:00:31,310 --> 00:00:33,900
I'm Greg Pollack, and you're
watching Try jQuery.

10
00:00:33,900 --> 00:00:37,250
This course should take about
three hours to get through.

11
00:00:37,250 --> 00:00:39,810
It's going to start with a bunch
of videos, and following

12
00:00:39,810 --> 00:00:42,580
each video, you're going to have
a Code Challenge in the

13
00:00:42,580 --> 00:00:44,640
browser, where you actually
have to prove that you

14
00:00:44,640 --> 00:00:46,910
understood what you
just learned.

15
00:00:46,910 --> 00:00:48,220
After you get each question
right, you're

16
00:00:48,220 --> 00:00:49,350
going to earn points.

17
00:00:49,350 --> 00:00:51,250
And then at the end of each
level, you're going to earn a

18
00:00:51,250 --> 00:00:54,550
badge, finally earning the
course badge, which will be

19
00:00:54,550 --> 00:00:56,115
displayed in your Code
School profile.

20
00:00:59,090 --> 00:01:01,440
In order to take this course,
you need to be familiar with

21
00:01:01,440 --> 00:01:05,820
HTML, which is how we create
content inside web pages, CSS

22
00:01:05,820 --> 00:01:09,730
which is how we style that
content, and maybe a little

23
00:01:09,730 --> 00:01:10,690
bit of JavaScript.

24
00:01:10,690 --> 00:01:11,930
But if you're not familiar with

25
00:01:11,930 --> 00:01:13,340
JavaScript yet, don't worry.

26
00:01:13,340 --> 00:01:17,620
We'll be going over it as we
go through the tutorial.

27
00:01:17,620 --> 00:01:19,580
Now before we start looking at
code, we need to make sure

28
00:01:19,580 --> 00:01:23,290
everybody knows what jQuery
is and what it can do.

29
00:01:23,290 --> 00:01:25,500
Here's a few examples
at Code School.

30
00:01:25,500 --> 00:01:27,890
When somebody clicks the login
button on Code School, the

31
00:01:27,890 --> 00:01:31,160
login form appears and
can disappear once

32
00:01:31,160 --> 00:01:32,560
they click that again.

33
00:01:32,560 --> 00:01:34,910
Over on the Code School payment
page, people can

34
00:01:34,910 --> 00:01:40,110
select between paying yearly and
monthly, and the price is

35
00:01:40,110 --> 00:01:42,060
updated accordingly.

36
00:01:42,060 --> 00:01:45,720
Also in this page, we can toggle
different CSS classes,

37
00:01:45,720 --> 00:01:49,790
based on which button somebody
presses, as you can see here.

38
00:01:52,590 --> 00:01:56,310
Five common ways you might use
jQuery include finding

39
00:01:56,310 --> 00:02:01,480
elements on an HTML document,
changing that HTML content,

40
00:02:01,480 --> 00:02:04,610
listening to what a user does
and reacting accordingly, like

41
00:02:04,610 --> 00:02:08,490
when they press a button,
animating content on the page,

42
00:02:08,490 --> 00:02:10,669
and talking over the network.

43
00:02:10,669 --> 00:02:12,890
So if you want to communicate
with a server, without having

44
00:02:12,890 --> 00:02:15,330
to refresh a whole browser
page, you can

45
00:02:15,330 --> 00:02:16,580
do that with jQuery.

46
00:02:18,760 --> 00:02:21,320
Here's some HTML from a web page
And you can see here it

47
00:02:21,320 --> 00:02:24,830
has a title, an h1,
and a paragraph.

48
00:02:24,830 --> 00:02:29,990
And our objective is to modify
the h1 element using jQuery.

49
00:02:29,990 --> 00:02:34,240
To do this we first need to find
this element, and then we

50
00:02:34,240 --> 00:02:35,850
need to change it.

51
00:02:35,850 --> 00:02:39,790
So how can we write some jQuery
to find that h1 inside

52
00:02:39,790 --> 00:02:41,380
of our HTML?

53
00:02:41,380 --> 00:02:44,100
Well in order to do that, we
need to understand a little

54
00:02:44,100 --> 00:02:45,950
bit better how our browser

55
00:02:45,950 --> 00:02:49,260
organizes the HTML it receives.

56
00:02:49,260 --> 00:02:51,420
It does this in something
called the

57
00:02:51,420 --> 00:02:54,050
Document Object Model.

58
00:02:54,050 --> 00:02:58,510
This is a tree like structure,
created by browsers, so we can

59
00:02:58,510 --> 00:03:02,320
quickly find HTML elements
using JavaScript.

60
00:03:02,320 --> 00:03:05,080
In this tutorial, we'll refer
to the Document Object Model

61
00:03:05,080 --> 00:03:06,860
as the DOM.

62
00:03:09,790 --> 00:03:13,490
When we go to a URL, and our
browser starts receiving HTML

63
00:03:13,490 --> 00:03:17,660
from that web page, it loads
it piece by piece into the

64
00:03:17,660 --> 00:03:20,140
DOM, like so.

65
00:03:20,140 --> 00:03:23,270
As it receives each element,
it starts building nodes

66
00:03:23,270 --> 00:03:24,790
inside of our DOM.

67
00:03:24,790 --> 00:03:28,880
So here, you can see it has an
HTML node, which is underneath

68
00:03:28,880 --> 00:03:30,710
the document node.

69
00:03:30,710 --> 00:03:34,960
You might say HTML is a child of
the document node, and the

70
00:03:34,960 --> 00:03:38,940
document is the parent
of the HTML node.

71
00:03:38,940 --> 00:03:43,010
Then we have a head node, then
underneath that a title node.

72
00:03:43,010 --> 00:03:45,140
And that title of jQuery
Adventures--

73
00:03:45,140 --> 00:03:47,430
we're going to call that a
text node, which lives

74
00:03:47,430 --> 00:03:48,990
underneath title.

75
00:03:48,990 --> 00:03:50,780
Then we have the body
node, which is a

76
00:03:50,780 --> 00:03:53,460
sibling to the head node.

77
00:03:53,460 --> 00:03:57,030
Underneath that is an h1 node,
with a text element of where

78
00:03:57,030 --> 00:03:58,030
do you want to go.

79
00:03:58,030 --> 00:04:00,280
And lastly, we have a paragraph
node, which also has

80
00:04:00,280 --> 00:04:01,720
a text node under it.

81
00:04:04,370 --> 00:04:07,310
In order to interact with the
DOM, all browsers use

82
00:04:07,310 --> 00:04:08,390
JavaScript.

83
00:04:08,390 --> 00:04:11,940
That's the standard language
that gives developers a way to

84
00:04:11,940 --> 00:04:13,530
interact with our DOM.

85
00:04:16,310 --> 00:04:17,470
So here we have a web server.

86
00:04:17,470 --> 00:04:18,649
It has a JavaScript file.

87
00:04:18,649 --> 00:04:21,959
It also has some HTML files
on it, as well.

88
00:04:21,959 --> 00:04:24,920
Over on the other side, we
have our web browser.

89
00:04:24,920 --> 00:04:28,380
The web browser might request a
web page by going to a URL.

90
00:04:28,380 --> 00:04:31,010
The web server is going to
send back the HTML you

91
00:04:31,010 --> 00:04:33,430
requested, along with any other
files needed to load

92
00:04:33,430 --> 00:04:36,150
that page, including in this
case, some JavaScript.

93
00:04:36,150 --> 00:04:37,610
The web browser is then
going to load that

94
00:04:37,610 --> 00:04:39,580
HTML into the DOM.

95
00:04:39,580 --> 00:04:41,760
And then once loaded, we can
execute the JavaScript that

96
00:04:41,760 --> 00:04:45,980
was sent over to interact
with the DOM.

97
00:04:45,980 --> 00:04:48,360
So you might be wondering, why
don't we use JavaScript to

98
00:04:48,360 --> 00:04:49,800
interact with every browser?

99
00:04:49,800 --> 00:04:51,980
Why do we even need jQuery?

100
00:04:51,980 --> 00:04:55,990
Well, the catch here is that
each browser has a slightly

101
00:04:55,990 --> 00:04:59,260
different DOM interface.

102
00:04:59,260 --> 00:05:00,770
This is where jQuery comes in.

103
00:05:00,770 --> 00:05:03,500
So you can write one piece of
code which can communicate

104
00:05:03,500 --> 00:05:06,590
with all modern web browsers.

105
00:05:06,590 --> 00:05:09,920
In order to access the DOM using
jQuery, we'll put some

106
00:05:09,920 --> 00:05:14,300
code inside of this jQuery
function you see here.

107
00:05:14,300 --> 00:05:17,060
To access the DOM using jQuery,
all we need to do is

108
00:05:17,060 --> 00:05:20,170
specify the document key
word you see here.

109
00:05:20,170 --> 00:05:23,710
But how can we search through
the DOM and find that h1

110
00:05:23,710 --> 00:05:26,900
element we were looking for?

111
00:05:26,900 --> 00:05:29,740
To figure this out, let's
jump back into our HTML.

112
00:05:29,740 --> 00:05:33,950
And we need to think a little
bit about how we would use CSS

113
00:05:33,950 --> 00:05:36,260
to decorate this web page.

114
00:05:36,260 --> 00:05:39,440
If we wanted to decorate the
h1, we might write a CSS

115
00:05:39,440 --> 00:05:41,700
selector, which looks
like this.

116
00:05:41,700 --> 00:05:44,820
In this case, it's increasing
the font size of the h1.

117
00:05:44,820 --> 00:05:48,135
To make the paragraph font color
blue, we would specify p

118
00:05:48,135 --> 00:05:49,385
{color: blue;}.

119
00:05:52,340 --> 00:05:55,280
We use these same CSS electors
to find elements

120
00:05:55,280 --> 00:05:56,930
from inside the DOM.

121
00:05:56,930 --> 00:06:00,030
So if we wanted to find the h1,
we could simply specify

122
00:06:00,030 --> 00:06:02,210
jQuery ("h1");.

123
00:06:02,210 --> 00:06:05,890
Notice that h1 is wrapped in
a string with two double

124
00:06:05,890 --> 00:06:07,770
quotation marks.

125
00:06:07,770 --> 00:06:09,970
To find the paragraph from the
DOM, we could simply write

126
00:06:09,970 --> 00:06:11,170
jQuery ("p");.

127
00:06:11,170 --> 00:06:13,210
There's a shorter way we
can write this code.

128
00:06:13,210 --> 00:06:16,100
Instead of specifying jQuery,
we can simply

129
00:06:16,100 --> 00:06:17,770
use the dollar sign.

130
00:06:17,770 --> 00:06:21,770
It's going to mean
the same thing.

131
00:06:21,770 --> 00:06:26,050
So we know how to find the
h1 using that $("h1");.

132
00:06:26,050 --> 00:06:28,365
But how do we modify
that element?

133
00:06:31,040 --> 00:06:34,850
So remember, this is our DOM
representation of this HTML.

134
00:06:34,850 --> 00:06:37,970
To find the h1, as we saw a
minute ago, we simply write

135
00:06:37,970 --> 00:06:42,960
$("h1");, and that returns
the h1 element.

136
00:06:42,960 --> 00:06:46,130
If we wanted to return the text
inside that h1, we would

137
00:06:46,130 --> 00:06:49,200
simply call the text method,
like you see here.

138
00:06:49,200 --> 00:06:51,390
It would return where
do you want to go.

139
00:06:55,080 --> 00:06:57,860
In order to modify the element's
text, we can simply

140
00:06:57,860 --> 00:07:00,320
send a string into
this text method.

141
00:07:00,320 --> 00:07:04,070
Here, when we send where to, you
can see that it replaces

142
00:07:04,070 --> 00:07:07,560
that text element in the
Dom with where to?

143
00:07:07,560 --> 00:07:09,960
And if we were watching this
web page in our browser, we

144
00:07:09,960 --> 00:07:12,720
would see the page
get updated.

145
00:07:12,720 --> 00:07:14,540
Now there's one thing you need
to be wary of when you're

146
00:07:14,540 --> 00:07:17,360
running jQuery that interacts
with the DOM.

147
00:07:17,360 --> 00:07:21,310
The HTML might be getting sent
over to your browser, and that

148
00:07:21,310 --> 00:07:23,480
JavaScript might
fire off before

149
00:07:23,480 --> 00:07:25,900
the DOM is done loading.

150
00:07:25,900 --> 00:07:28,690
In this case, the DOM hadn't
finished loading yet, and so

151
00:07:28,690 --> 00:07:30,030
when it went to change
the text in the

152
00:07:30,030 --> 00:07:32,330
h1, it didn't work.

153
00:07:32,330 --> 00:07:35,010
So we need to make sure the DOM
is finished loading before

154
00:07:35,010 --> 00:07:39,980
we try to interact with
any HTML on the page.

155
00:07:39,980 --> 00:07:42,180
It turns out that when the DOM
is finished loading, it

156
00:07:42,180 --> 00:07:43,750
triggers an event.

157
00:07:43,750 --> 00:07:46,460
It says, "I'm ready."
So we need to be

158
00:07:46,460 --> 00:07:48,020
listening for that signal.

159
00:07:48,020 --> 00:07:52,310
And we only want our jQuery
code to run once that DOM

160
00:07:52,310 --> 00:07:54,880
ready event has been
triggered.

161
00:07:54,880 --> 00:07:56,850
The code looks something
like this.

162
00:07:56,850 --> 00:08:00,500
We write jQuery(document).ready
and

163
00:08:00,500 --> 00:08:01,650
then we have a function.

164
00:08:01,650 --> 00:08:04,820
And anything inside of that
function is only going to get

165
00:08:04,820 --> 00:08:08,390
run once the document
is ready.

166
00:08:08,390 --> 00:08:11,100
So our completed code, while
we're fetching the h1 and then

167
00:08:11,100 --> 00:08:13,430
changing the text element,
is going to look

168
00:08:13,430 --> 00:08:14,890
something like this.

169
00:08:14,890 --> 00:08:17,020
We're waiting until the document
is ready, and then

170
00:08:17,020 --> 00:08:20,480
we're fetching the h1, and then
changing the text node.

171
00:08:23,020 --> 00:08:24,980
Before we get into the
challenges, let's take a quick

172
00:08:24,980 --> 00:08:27,140
tour of the challenge
interface.

173
00:08:27,140 --> 00:08:29,052
Over on the left side of the
screen is our Table of

174
00:08:29,052 --> 00:08:31,550
Contents, showing
us six levels.

175
00:08:31,550 --> 00:08:33,799
When we're in each level, we can
see the different sections

176
00:08:33,799 --> 00:08:35,539
of the level and
little buttons.

177
00:08:35,539 --> 00:08:38,000
The Play buttons represent a
video, and the Prompt buttons

178
00:08:38,000 --> 00:08:39,960
represent a code challenge.

179
00:08:39,960 --> 00:08:41,850
You're more than welcome to
jump around between levels

180
00:08:41,850 --> 00:08:43,720
sections and challenges.

181
00:08:43,720 --> 00:08:46,170
Down below, we have a Download
button to grab all the slides

182
00:08:46,170 --> 00:08:48,310
for the course, which can be
really useful if you want to

183
00:08:48,310 --> 00:08:50,590
put them on a second monitor
for reference.

184
00:08:50,590 --> 00:08:53,000
Also at the bottom here, we'll
see listed our total number of

185
00:08:53,000 --> 00:08:55,830
points and the progress bar to
see how much we've completed.

186
00:08:55,830 --> 00:08:58,310
The Table of Contents is useful
for navigation, but if

187
00:08:58,310 --> 00:09:00,350
you want to get yourself a
little more screen room, you

188
00:09:00,350 --> 00:09:02,320
might want to minimize it.

189
00:09:02,320 --> 00:09:04,230
On the right side of the page
you can see the challenge

190
00:09:04,230 --> 00:09:05,800
title and text.

191
00:09:05,800 --> 00:09:08,190
Sometimes a challenge will
link to external jQuery

192
00:09:08,190 --> 00:09:10,380
documentation, as you
can see here.

193
00:09:10,380 --> 00:09:13,060
We then see the rendered HTML
page we'll be interacting

194
00:09:13,060 --> 00:09:16,060
with, using jQuery, and
below that, the HTML

195
00:09:16,060 --> 00:09:17,700
source of the page.

196
00:09:17,700 --> 00:09:20,440
Notice this HTML has a lock
next to it, meaning that

197
00:09:20,440 --> 00:09:22,790
you're not going to be
able to edit it.

198
00:09:22,790 --> 00:09:24,240
At the bottom of the
page, you'll see

199
00:09:24,240 --> 00:09:25,910
our JavaScript console.

200
00:09:25,910 --> 00:09:27,560
This is where you'll want
to start coding.

201
00:09:27,560 --> 00:09:28,940
And the first few challenges,
you'll

202
00:09:28,940 --> 00:09:31,090
practice using selectors.

203
00:09:31,090 --> 00:09:35,030
Notice how when I type div, the
div HTML is highlighted in

204
00:09:35,030 --> 00:09:36,080
the source.

205
00:09:36,080 --> 00:09:38,880
Similarly, if I type p to select
the paragraph, I can

206
00:09:38,880 --> 00:09:40,220
visualize the selection.

207
00:09:40,220 --> 00:09:42,750
And if I scroll up a little,
we'll see the paragraph

208
00:09:42,750 --> 00:09:45,510
element in the rendered HTML
is highlighted, as well, to

209
00:09:45,510 --> 00:09:47,180
help us solve the challenge.

210
00:09:47,180 --> 00:09:49,230
If you need reference to the
slides, and you don't already

211
00:09:49,230 --> 00:09:51,090
have them downloaded, you
can view them here

212
00:09:51,090 --> 00:09:52,460
in the slide tab.

213
00:09:52,460 --> 00:09:54,580
And if you get stuck at any
point, you can always ask for

214
00:09:54,580 --> 00:09:56,300
a hint in the Hint tab.

215
00:09:56,300 --> 00:09:58,670
Hints are free, but if you want
to show the answer, it'll

216
00:09:58,670 --> 00:10:01,590
cost you 75 points
off your score.

217
00:10:01,590 --> 00:10:03,720
Next, I want to call your
attention to this little Split

218
00:10:03,720 --> 00:10:05,640
Screen button on the
right side, here.

219
00:10:05,640 --> 00:10:08,040
If your monitor is big enough,
this allows you to view both

220
00:10:08,040 --> 00:10:11,500
the source code and the slides
at the same time.

221
00:10:11,500 --> 00:10:13,480
Let's go ahead and solve this
challenge by typing in the

222
00:10:13,480 --> 00:10:16,620
right answer in the console and
hitting Enter or Return.

223
00:10:16,620 --> 00:10:19,000
Awesome, now we can continue
on to the next challenge by

224
00:10:19,000 --> 00:10:22,030
clicking the Continue button
or hitting Alt-Return or

225
00:10:22,030 --> 00:10:23,330
Option-Return.

226
00:10:23,330 --> 00:10:25,380
Here's an example of a challenge
later in the course

227
00:10:25,380 --> 00:10:27,930
which doesn't use the console,
and instead, we need to write

228
00:10:27,930 --> 00:10:30,170
a couple lines of jQuery
on the editor, which

229
00:10:30,170 --> 00:10:31,710
is no longer locked.

230
00:10:31,710 --> 00:10:33,960
To submit the code, we just hit
the Submit button on the

231
00:10:33,960 --> 00:10:35,040
bottom right.

232
00:10:35,040 --> 00:10:36,950
On these challenges, you'll
probably want to make sure you

233
00:10:36,950 --> 00:10:39,700
go split screen, so you can see
both the JavaScript and

234
00:10:39,700 --> 00:10:43,880
the HTML source at
the same time.

235
00:10:43,880 --> 00:10:45,890
Well it's time for you to get
your hands dirty in the

236
00:10:45,890 --> 00:10:46,830
challenges.

237
00:10:46,830 --> 00:10:48,080
And I'll see you in
the next video.