1
00:00:00,500 --> 00:00:03,302
[SINGING] Put down your
brains and your entrails.

2
00:00:03,302 --> 00:00:06,760
It's time to stop
and learn some Rails,

3
00:00:06,760 --> 00:00:09,230
‘cause we got
something new to grab -

4
00:00:09,230 --> 00:00:12,020
it's Rails for
Zombies by Envy Labs.

5
00:00:15,584 --> 00:00:17,000
You're watching
Rails for Zombies.

6
00:00:17,000 --> 00:00:18,500
This is Level Four
where we're going

7
00:00:18,500 --> 00:00:24,360
to be talking about Controllers,
the braaaains of the application.

8
00:00:24,360 --> 00:00:25,812
Makes you hungry, don't it?

9
00:00:25,812 --> 00:00:28,670
Your controllers
are typically where

10
00:00:28,670 --> 00:00:32,250
you use models to get
data out of the database

11
00:00:32,250 --> 00:00:35,290
and you use Views to
display the data that

12
00:00:35,290 --> 00:00:37,340
comes out of the models.

13
00:00:37,340 --> 00:00:39,220
It'll make more
sense in a minute.

14
00:00:39,220 --> 00:00:41,850
So we're going to use this
brain icon, because it's

15
00:00:41,850 --> 00:00:45,030
kind of the brains
of our application.

16
00:00:45,030 --> 00:00:47,020
Here we are back
with our browser,

17
00:00:47,020 --> 00:00:50,280
and we have our four
components of our application.

18
00:00:50,280 --> 00:00:53,507
We've talked about the models, we've talked about the views,

19
00:00:53,507 --> 00:00:55,840
and now we're going to talk about the controllers, which

20
00:00:55,840 --> 00:00:58,085
go about there.

21
00:00:58,085 --> 00:01:01,740
Back in our show view,
here's the code that we had.

22
00:01:01,740 --> 00:01:04,420
Now there's something in here
that smells like rotten brains,

23
00:01:04,420 --> 00:01:06,890
and it's basically that
line right there where

24
00:01:06,890 --> 00:01:09,460
we call the tweet model.

25
00:01:09,460 --> 00:01:12,110
That really shouldn't be
happening in our view.

26
00:01:12,110 --> 00:01:14,290
Because, as I said
a minute ago, it's

27
00:01:14,290 --> 00:01:18,220
our controller that should
be calling the models.

28
00:01:18,220 --> 00:01:20,060
When a request comes
into our application -

29
00:01:20,060 --> 00:01:23,880
let's call it "tweet/1" -
before getting to our View

30
00:01:23,880 --> 00:01:27,150
it's first going to
hit a controller.

31
00:01:27,150 --> 00:01:31,730
In this case, it's going to
look inside of the controllers

32
00:01:31,730 --> 00:01:34,320
directory, which
is created for us,

33
00:01:34,320 --> 00:01:36,130
for a file called
"tweets_controller.rb."

34
00:01:39,660 --> 00:01:45,080
Only then is then going to
render out the show view.

35
00:01:45,080 --> 00:01:47,370
There's no coincidence
here that our URL

36
00:01:47,370 --> 00:01:50,110
has the word tweets
in it, as does

37
00:01:50,110 --> 00:01:57,490
the name of our controller, as
does the folder for our views.

38
00:01:57,490 --> 00:01:59,180
We don't have to map
any of these things

39
00:01:59,180 --> 00:02:02,080
together if we use conventions.

40
00:02:02,080 --> 00:02:05,810
That's why sometimes people
say that Rails follows

41
00:02:05,810 --> 00:02:09,610
convention over configuration.

42
00:02:09,610 --> 00:02:12,250
If we can follow some
intelligent defaults

43
00:02:12,250 --> 00:02:17,660
or convention, then we
can avoid configuration.

44
00:02:17,660 --> 00:02:20,250
But what belongs inside
of our controller?

45
00:02:20,250 --> 00:02:22,069
Well, let's write it out.

46
00:02:22,069 --> 00:02:23,610
Inside of our
controller, we're going

47
00:02:23,610 --> 00:02:28,070
to find that it has a
class of TweetsController,

48
00:02:28,070 --> 00:02:30,570
uppercase Tweets,
uppercase Controller.

49
00:02:30,570 --> 00:02:35,010
And that extends from
ApplicationController.

50
00:02:35,010 --> 00:02:37,110
The next step to
define our controller

51
00:02:37,110 --> 00:02:40,710
is to define a show method.

52
00:02:40,710 --> 00:02:42,760
Sometimes we call
the methods inside

53
00:02:42,760 --> 00:02:45,210
of our controllers actions.

54
00:02:45,210 --> 00:02:48,250
We can use the two
terms interchangeably.

55
00:02:48,250 --> 00:02:51,660
Now there's no coincidence that
this method we just defined

56
00:02:51,660 --> 00:02:58,330
called "show" happens to be the
same name as our view show.

57
00:02:58,330 --> 00:03:00,260
One maps to the other.

58
00:03:00,260 --> 00:03:02,920
Inside of this show method
is where we typically

59
00:03:02,920 --> 00:03:06,930
call our models and get
data from the database.

60
00:03:06,930 --> 00:03:13,160
So we're going to move up our
tweet call into our Controller,

61
00:03:13,160 --> 00:03:15,120
like you see here.

62
00:03:15,120 --> 00:03:16,690
Now when a request
comes in, it's

63
00:03:16,690 --> 00:03:20,830
first going to go and
call that show method

64
00:03:20,830 --> 00:03:22,540
inside of our controller.

65
00:03:22,540 --> 00:03:23,780
It's going to run that code.

66
00:03:23,780 --> 00:03:27,490
And once it gets to the
end, it's then, by default,

67
00:03:27,490 --> 00:03:30,450
going to go look
for our show view

68
00:03:30,450 --> 00:03:33,600
and render that
out to a browser.

69
00:03:33,600 --> 00:03:36,700
You might be wondering, what
about the variable scope?

70
00:03:36,700 --> 00:03:39,790
How is it that our view has
access to that tweet variable?

71
00:03:39,790 --> 00:03:42,830
Well, that's actually
a good question.

72
00:03:42,830 --> 00:03:45,190
Because this code
as-is wouldn't work.

73
00:03:45,190 --> 00:03:50,450
We need to add an at symbol
in front of each of these.

74
00:03:50,450 --> 00:03:53,940
So when we add an at in front
of a variable inside Ruby,

75
00:03:53,940 --> 00:03:56,990
it turns it into an
instance variable.

76
00:03:56,990 --> 00:04:00,630
This is how we grant the
view access to variables.

77
00:04:00,630 --> 00:04:02,800
So because inside
of our controller

78
00:04:02,800 --> 00:04:05,810
our tweet has that
at symbol, we can now

79
00:04:05,810 --> 00:04:08,325
access that tweet
variable using that

80
00:04:08,325 --> 00:04:12,600
at symbol inside of our views.

81
00:04:12,600 --> 00:04:14,610
But what if we don't
like that default?

82
00:04:14,610 --> 00:04:17,019
What if we don't want it to
render out the show view?

83
00:04:17,019 --> 00:04:21,470
Instead, we wanted to
render out status.html.erb.

84
00:04:21,470 --> 00:04:26,240
Well, we can specify that
inside of our show method

85
00:04:26,240 --> 00:04:31,240
by simply writing
render action status.

86
00:04:31,240 --> 00:04:33,430
This will then render
out our status.html.erb.

87
00:04:36,090 --> 00:04:38,480
This code works
great as-is, but you

88
00:04:38,480 --> 00:04:40,980
can see that we're
only ever rendering

89
00:04:40,980 --> 00:04:43,920
the tweet with the ID of one.

90
00:04:43,920 --> 00:04:47,150
But what if we wanted to go
to any one of these other URLs

91
00:04:47,150 --> 00:04:51,250
and specify the ID of the
tweet that we want to see?

92
00:04:51,250 --> 00:04:53,810
How would we look that up?

93
00:04:53,810 --> 00:04:58,580
How would we use that
parameter out of the URL?

94
00:04:58,580 --> 00:05:01,820
Well, it turns out if we
write URLs like this, Rails

95
00:05:01,820 --> 00:05:06,690
will generate for us a new hash
called "params," which contains

96
00:05:06,690 --> 00:05:10,020
a hash of the value passed in.

97
00:05:10,020 --> 00:05:12,490
To access that value to
load the proper tweet,

98
00:05:12,490 --> 00:05:14,500
all we need to do
in our controller

99
00:05:14,500 --> 00:05:18,144
is specify params id.

100
00:05:18,144 --> 00:05:19,810
That's going to look
up the proper tweet

101
00:05:19,810 --> 00:05:21,160
and render it out to the page.

102
00:05:23,970 --> 00:05:26,560
Let's look at a few more
examples with parameters.

103
00:05:26,560 --> 00:05:28,610
If we had a URL
like you see here -

104
00:05:28,610 --> 00:05:32,530
and we're just using standard
URL query parameters -

105
00:05:32,530 --> 00:05:36,650
Rails would create a
parameter hash for us,

106
00:05:36,650 --> 00:05:40,160
which might look something
like this, which we could then

107
00:05:40,160 --> 00:05:45,000
use inside of our controller,
if we set it up properly,

108
00:05:45,000 --> 00:05:47,130
to create a new tweet.

109
00:05:47,130 --> 00:05:49,250
So you can see here,
we're creating a tweet,

110
00:05:49,250 --> 00:05:51,910
and we're grabbing the
status out of the parameter

111
00:05:51,910 --> 00:05:54,090
to create that tweet.

112
00:05:54,090 --> 00:05:57,430
However, often in
Rails our parameters

113
00:05:57,430 --> 00:05:59,220
might look something
like this where

114
00:05:59,220 --> 00:06:03,920
we have a hash within a hash.

115
00:06:03,920 --> 00:06:05,540
You see that?

116
00:06:05,540 --> 00:06:08,750
So how would we access a status
of this to create a tweet?

117
00:06:08,750 --> 00:06:14,520
Well, we could write
Tweet.create status params

118
00:06:14,520 --> 00:06:17,880
tweet status, like you see here.

119
00:06:17,880 --> 00:06:20,380
So we have to specify
two keys to get

120
00:06:20,380 --> 00:06:24,790
to the value we want inside
this hash within a hash.

121
00:06:24,790 --> 00:06:26,980
There's an alternate
syntax we can use here,

122
00:06:26,980 --> 00:06:31,610
because our tweet method
is expecting a hash.

123
00:06:31,610 --> 00:06:35,750
So we can just
specify params tweet.

124
00:06:35,750 --> 00:06:37,940
And what it's going
to send it to create

125
00:06:37,940 --> 00:06:42,550
is the hash which
contains status, "I'm dead."

126
00:06:42,550 --> 00:06:46,100
You see how those two
lines are equivalent?

127
00:06:46,100 --> 00:06:49,210
But I think the second one is
better because it's obviously

128
00:06:49,210 --> 00:06:53,406
writing less code and it's
not recreating a hash.

129
00:06:53,400 --> 00:06:55,540
That's pretty advanced.

130
00:06:56,000 --> 00:06:57,740
Now, before we move on,

131
00:06:57,740 --> 00:06:59,740
There's something a little
rotten about this code.

132
00:06:59,740 --> 00:07:03,530
Users might be able to set any attributes

133
00:07:03,550 --> 00:07:05,900
by sending in additional keys and values

134
00:07:05,900 --> 00:07:08,740
for this hash on the URL.

135
00:07:09,000 --> 00:07:10,740
Luckily in Rails 4,

136
00:07:10,800 --> 00:07:13,700
we're required to use strong parameters,

137
00:07:13,700 --> 00:07:16,000
which makes our code more secure.

138
00:07:16,000 --> 00:07:18,700
We'll also need to specify the parameter key

139
00:07:18,700 --> 00:07:20,600
that our action is expecting.

140
00:07:20,600 --> 00:07:22,740
In our case, we're going to require

141
00:07:22,740 --> 00:07:24,740
that the tweet key is sent in

142
00:07:24,740 --> 00:07:26,740
from our hash.

143
00:07:26,740 --> 00:07:28,740
We also need to specify the attributes

144
00:07:28,740 --> 00:07:32,240
we'll permit to be set from this hash.

145
00:07:32,740 --> 00:07:35,500
We'll simply call these two methods

146
00:07:35,500 --> 00:07:36,740
on our parameter hash

147
00:07:36,740 --> 00:07:39,200
and now our code is a lot more secure.

148
00:07:39,200 --> 00:07:41,250
If there were multiple things

149
00:07:41,250 --> 00:07:42,740
we needed to permit on this hash,

150
00:07:42,740 --> 00:07:45,200
we could use an array

151
00:07:45,200 --> 00:07:47,200
like you see here

152
00:07:47,200 --> 00:07:48,740
allowing us to set the status and location

153
00:07:48,740 --> 00:07:50,740
on the tweet.

154
00:07:50,740 --> 00:07:52,740
We only need to use strong parameters

155
00:07:52,740 --> 00:07:54,740
and require and permit

156
00:07:54,740 --> 00:07:56,740
when we're setting multiple attributes

157
00:07:56,740 --> 00:07:58,740
when we're creating or updating.

158
00:08:01,140 --> 00:08:02,830
One of the reasons
people use Rails

159
00:08:02,830 --> 00:08:04,630
is to create backend APIs.

160
00:08:04,630 --> 00:08:07,140
It's great for that if you're
building an iPhone app,

161
00:08:07,140 --> 00:08:09,980
an Android app, or just
need to provide a developer

162
00:08:09,980 --> 00:08:12,800
API to your web service.

163
00:08:12,800 --> 00:08:15,300
You might want to supply XML.

164
00:08:15,300 --> 00:08:18,820
You might also want
to supply JSON code.

165
00:08:18,820 --> 00:08:23,090
So let's show you how easy
it is to do that with Rails.

166
00:08:23,090 --> 00:08:27,100
If we want the JSON
representation of our tweet,

167
00:08:27,100 --> 00:08:29,040
we could send in the
URL tweets/1.json.

168
00:08:31,980 --> 00:08:37,760
Then inside of our show method
we need to add some code.

169
00:08:37,760 --> 00:08:40,170
We need to tell
our Rails app what

170
00:08:40,170 --> 00:08:43,500
formats this can respond to.

171
00:08:43,500 --> 00:08:45,400
So first, we're
going to say that it

172
00:08:45,400 --> 00:08:48,980
responds to the format of HTML.

173
00:08:48,980 --> 00:08:52,030
Now that hash sign there,
that's just a comment.

174
00:08:52,030 --> 00:08:54,200
That actually has no
effect on anything -

175
00:08:54,200 --> 00:08:55,790
it doesn't even
have to be there.

176
00:08:55,790 --> 00:08:58,360
But a lot of times
you'll see people

177
00:08:58,360 --> 00:09:00,470
will add a little
reminder that it's

178
00:09:00,470 --> 00:09:03,680
only because we write
format.html that it will try

179
00:09:03,680 --> 00:09:07,560
to render out
show.html.erb by default.

180
00:09:07,560 --> 00:09:09,230
Now here comes the JSON part.

181
00:09:09,230 --> 00:09:13,020
We need to tell our application
that this method responds

182
00:09:13,020 --> 00:09:15,060
to the JSON format.

183
00:09:15,060 --> 00:09:16,790
And when it does, we
want to render out

184
00:09:16,790 --> 00:09:21,670
the JSON representation
of this particular tweet.

185
00:09:21,670 --> 00:09:23,340
And that's all there is to it.

186
00:09:23,340 --> 00:09:25,620
The request goes through,
and it renders out

187
00:09:25,620 --> 00:09:29,430
the JSON representation
of this tweet.

188
00:09:29,430 --> 00:09:33,260
Then if we want this
to respond to XML,

189
00:09:33,260 --> 00:09:37,410
our request might
have 1.xml in it,

190
00:09:37,410 --> 00:09:39,110
and then inside of
our method we need

191
00:09:39,110 --> 00:09:45,760
to write format.xml, render
the XML format of this tweet.

192
00:09:45,760 --> 00:09:52,210
And then that renders back out the proper XML for this tweet.

193
00:09:52,210 --> 00:09:53,870
In a typical Rails
application, you're

194
00:09:53,870 --> 00:09:55,770
going to see a lot of
the same Controller

195
00:09:55,770 --> 00:09:58,260
actions inside the Controller.

196
00:09:58,260 --> 00:10:00,030
Let's go over some of these.

197
00:10:00,030 --> 00:10:02,060
First you have the
index action, which

198
00:10:02,060 --> 00:10:04,560
is going to list all the
tweets, the show action

199
00:10:04,560 --> 00:10:07,650
to show a single tweet, the
new action to show a new tweet

200
00:10:07,650 --> 00:10:11,660
form, the edit action to
show an edit tweet form,

201
00:10:11,660 --> 00:10:14,450
the create action
to create a tweet,

202
00:10:14,450 --> 00:10:16,240
the update action
to update a tweet,

203
00:10:16,240 --> 00:10:20,490
and, finally, the destroy
action to delete a tweet.

204
00:10:20,490 --> 00:10:22,920
As you might imagine,
most of these actions

205
00:10:22,920 --> 00:10:26,140
are going to have views
associated with them that we'll

206
00:10:26,140 --> 00:10:27,630
need to write.

207
00:10:27,630 --> 00:10:29,010
We already wrote
some of the URLs

208
00:10:29,010 --> 00:10:30,590
which will call these actions.

209
00:10:30,590 --> 00:10:32,630
For example, when we
list out the tweets,

210
00:10:32,630 --> 00:10:34,080
remember that edit link?

211
00:10:34,080 --> 00:10:36,080
When we click on
that link, it's going

212
00:10:36,080 --> 00:10:38,310
to go into our
tweets controller,

213
00:10:38,310 --> 00:10:40,030
it's going to call
the edit action.

214
00:10:40,030 --> 00:10:42,710
So inside of that
method, we need

215
00:10:42,710 --> 00:10:45,860
to first retrieve the
tweet that we want to edit,

216
00:10:45,860 --> 00:10:47,780
so we're going to go
ahead and do that like we

217
00:10:47,780 --> 00:10:51,500
did a moment ago,
getting the parameter ID.

218
00:10:51,500 --> 00:10:54,780
And then it's going to go and
render the edit action, which

219
00:10:54,780 --> 00:10:58,660
might look something like
this where we have a form

220
00:10:58,660 --> 00:11:01,210
and we can click that
update tweet button.

221
00:11:01,210 --> 00:11:05,520
But we're not going to
define that in this course.

222
00:11:05,520 --> 00:11:07,320
If we go to slash tweets
in our application

223
00:11:07,320 --> 00:11:10,230
and we get our
listing tweets form,

224
00:11:10,230 --> 00:11:15,890
right now we can click Edit and
Destroy on any of these tweets.

225
00:11:15,890 --> 00:11:18,590
But obviously we don't
want to allow anyone

226
00:11:18,590 --> 00:11:21,490
to delete or edit
anyone else's tweets.

227
00:11:21,490 --> 00:11:24,800
We need to add some sort
of simple authentication

228
00:11:24,800 --> 00:11:28,210
so that when they click on one
that doesn't belong to them

229
00:11:28,210 --> 00:11:32,510
it shows on the screen, "Sorry,
you can't edit that tweet."

230
00:11:32,510 --> 00:11:34,620
How might we do that?

231
00:11:34,620 --> 00:11:36,490
To implement this
authorization, we

232
00:11:36,490 --> 00:11:39,270
need to add some code
to our edit action.

233
00:11:39,270 --> 00:11:41,320
Inside here, we're
going to check

234
00:11:41,320 --> 00:11:45,700
to see if the user's current
session zombie_id is not

235
00:11:45,700 --> 00:11:49,730
equal to the current
tweet's zombie_id.

236
00:11:49,730 --> 00:11:51,950
What is session,
you might be asking?

237
00:11:51,950 --> 00:11:55,130
Well, session works
like a per-user hash.

238
00:11:55,130 --> 00:11:57,880
Every user gets their
own session hash

239
00:11:57,880 --> 00:11:59,420
that we can store things in.

240
00:11:59,420 --> 00:12:02,540
And that's what we usually
do when somebody logs in.

241
00:12:02,540 --> 00:12:04,320
We set a variable
on session that

242
00:12:04,320 --> 00:12:07,240
maybe has their zombie_id in it.

243
00:12:07,240 --> 00:12:10,850
So we're checking to see
if the current user is not

244
00:12:10,850 --> 00:12:13,670
the person who
posted this tweet.

245
00:12:13,670 --> 00:12:17,530
And if they're not, we
need to send a message.

246
00:12:17,530 --> 00:12:21,470
We do that by setting
a flash notice.

247
00:12:21,470 --> 00:12:23,940
And we say, "Sorry, you
can't edit this tweet."

248
00:12:23,940 --> 00:12:25,710
What is flash?

249
00:12:25,710 --> 00:12:28,410
Well, flash is another
one of these helper hashes

250
00:12:28,410 --> 00:12:33,450
that we can use in Rails to
send messages back to the user.

251
00:12:33,450 --> 00:12:36,730
Next, we need to redirect
the user out of this action,

252
00:12:36,730 --> 00:12:39,430
because we don't want
to render the Edit page.

253
00:12:39,430 --> 00:12:41,290
We don't want to
show them that form.

254
00:12:41,290 --> 00:12:43,120
They're not allowed to see it.

255
00:12:43,120 --> 00:12:47,690
So we're going to redirect
them back to the tweets path,

256
00:12:47,690 --> 00:12:50,580
you know that whole
tweets listing page.

257
00:12:50,580 --> 00:12:54,170
redirect_to allows you
to redirect the browser

258
00:12:54,170 --> 00:12:55,090
to a different action.

259
00:12:57,810 --> 00:13:00,640
There's an alternate shorter
syntax for these last two lines

260
00:13:00,640 --> 00:13:01,530
of code.

261
00:13:01,530 --> 00:13:04,810
We can actually write
redirect_to tweets_path

262
00:13:04,810 --> 00:13:06,730
and send them the notice
as a second argument.

263
00:13:10,650 --> 00:13:12,530
Our next step before we
jump into the browser

264
00:13:12,530 --> 00:13:14,460
is we need to
specify in our layout

265
00:13:14,460 --> 00:13:16,760
where we want this
notice to show up.

266
00:13:16,760 --> 00:13:18,810
It doesn't just
show up by default.

267
00:13:18,810 --> 00:13:23,490
So we're going to specify
here if a flash notice exists,

268
00:13:23,490 --> 00:13:27,120
if there's a message waiting
for the user in other words,

269
00:13:27,120 --> 00:13:31,140
then go ahead and print it
out to the screen like so.

270
00:13:35,620 --> 00:13:38,560
Now if we go hit Edit
and our session zombie_id

271
00:13:38,560 --> 00:13:41,850
doesn't match the zombie_id
of the current tweet,

272
00:13:41,850 --> 00:13:45,070
well, it's going to redirect
us back to this listing page

273
00:13:45,070 --> 00:13:47,240
and give us this flash notice.

274
00:13:47,240 --> 00:13:47,740
Sweet.

275
00:13:47,740 --> 00:13:50,460
We did it.

276
00:13:50,460 --> 00:13:52,380
Now if we jump back into
our tweets controller

277
00:13:52,380 --> 00:13:54,100
and we define the
rest of these actions,

278
00:13:54,100 --> 00:13:57,740
we would quickly find
that some of these methods

279
00:13:57,740 --> 00:14:00,450
have a lot of the same code.

280
00:14:00,450 --> 00:14:02,920
Both Edit, Update,
and Destroy need

281
00:14:02,920 --> 00:14:06,460
to look up the current
ID of the tweet

282
00:14:06,460 --> 00:14:09,010
and need to check authorization.

283
00:14:09,010 --> 00:14:11,590
And we don't want to have to
write that code over and over

284
00:14:11,590 --> 00:14:12,090
again.

285
00:14:12,090 --> 00:14:13,840
Remember, Rails is D.R.Y.:

286
00:14:13,840 --> 00:14:15,570
Don't repeat yourself.

287
00:14:15,570 --> 00:14:19,870
So how might we be able to
get rid of that repetition?

288
00:14:19,870 --> 00:14:21,970
If we took a look
inside these actions,

289
00:14:21,970 --> 00:14:24,830
we would see that the first
thing that all of them do

290
00:14:24,830 --> 00:14:27,510
is fetch the current tweet.

291
00:14:27,510 --> 00:14:28,380
Hmm.

292
00:14:28,380 --> 00:14:30,150
So that's duplication
right there.

293
00:14:30,150 --> 00:14:33,150
Let's move that
up into a method.

294
00:14:33,150 --> 00:14:35,950
We're going to
call it get_tweet.

295
00:14:35,950 --> 00:14:38,460
And now we're going to
write some code that

296
00:14:38,460 --> 00:14:43,410
says before every
action call get_tweet.

297
00:14:43,410 --> 00:14:46,960
If we left it like this, this
means before every action

298
00:14:46,960 --> 00:14:49,730
in here it would call
this get_tweet method.

299
00:14:49,730 --> 00:14:53,740
But we don't want it to
happen before every method.

300
00:14:53,740 --> 00:14:57,020
Instead, we only
want it to happen

301
00:14:57,020 --> 00:15:00,700
with Edit, Update, and Destroy.

302
00:15:00,700 --> 00:15:03,190
So we use that code right there.

303
00:15:05,840 --> 00:15:08,220
The other bit of code we
would see over and over again

304
00:15:08,220 --> 00:15:09,620
is the authorization code.

305
00:15:09,620 --> 00:15:11,770
Remember, it looks
something like this?

306
00:15:11,770 --> 00:15:15,820
Let's go ahead and wrap that
in a method called check_auth.

307
00:15:15,820 --> 00:15:18,480
And now we'll have
another before action.

308
00:15:18,480 --> 00:15:22,190
We'll say before
action call check_auth,

309
00:15:22,190 --> 00:15:25,660
again only for Edit,
Update, and Destroy.

310
00:15:29,670 --> 00:15:33,230
And now we've dried up our code,
eliminated that duplication,

311
00:15:33,230 --> 00:15:35,160
and now when we go
into our browser,

312
00:15:35,160 --> 00:15:38,180
when we click Edit on anything
we're not supposed to edit,

313
00:15:38,180 --> 00:15:42,890
we get back, "Sorry, you
can't edit that tweet."

314
00:15:42,890 --> 00:15:44,770
That was a lot of information.

315
00:15:44,770 --> 00:15:47,060
But don't worry, you'll get it.

316
00:15:47,060 --> 00:15:49,940
Go exercise your brain
in the next challenges.

317
00:15:49,940 --> 00:15:52,100
It'll make it more delicious.

