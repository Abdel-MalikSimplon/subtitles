1
00:00:00,500 --> 00:00:03,302
[SINGING] Put down your
brains and your entrails.

2
00:00:03,302 --> 00:00:06,760
It's time to stop
and learn some Rails,

3
00:00:06,760 --> 00:00:09,230
â€˜cause we got
something new to grab -

4
00:00:09,230 --> 00:00:12,020
it's Rails for
Zombies by Envy Labs.

5
00:00:15,584 --> 00:00:17,000
You're watching
Rails for Zombies.

6
00:00:17,000 --> 00:00:18,500
This is Level Four
where we're going

7
00:00:18,500 --> 00:00:24,360
to be talking about Controllers,
the braaaains of the application.

8
00:00:24,360 --> 00:00:25,812
Makes you hungry, don't it?

9
00:00:25,812 --> 00:00:28,670
Your controllers
are typically where

10
00:00:28,670 --> 00:00:32,250
you use models to get
data out of the database

11
00:00:32,250 --> 00:00:35,290
and you use Views to
display the data that

12
00:00:35,290 --> 00:00:37,340
comes out of the models.

13
00:00:37,340 --> 00:00:39,220
It'll make more
sense in a minute.

14
00:00:39,220 --> 00:00:41,850
So we're going to use this
brain icon, because it's

15
00:00:41,850 --> 00:00:45,030
kind of the brains
of our application.

16
00:00:45,030 --> 00:00:47,020
Here we are back
with our browser,

17
00:00:47,020 --> 00:00:50,280
and we have our four
components of our application.

18
00:00:50,280 --> 00:00:53,507
We've talked about the models, we've talked about the views,

19
00:00:53,507 --> 00:00:55,840
and now we're going to talk about the controllers, which

20
00:00:55,840 --> 00:00:58,085
go about there.

21
00:00:58,085 --> 00:01:01,740
Back in our show view,
here's the code that we had.

22
00:01:01,740 --> 00:01:04,420
Now there's something in here
that smells like rotten brains,

23
00:01:04,420 --> 00:01:06,890
and it's basically that
line right there where

24
00:01:06,890 --> 00:01:09,460
we call the tweet model.

25
00:01:09,460 --> 00:01:12,110
That really shouldn't be
happening in our view.

26
00:01:12,110 --> 00:01:14,290
Because, as I said
a minute ago, it's

27
00:01:14,290 --> 00:01:18,220
our controller that should
be calling the models.

28
00:01:18,220 --> 00:01:20,060
When a request comes
into our application -

29
00:01:20,060 --> 00:01:23,880
let's call it "tweet/1" -
before getting to our View

30
00:01:23,880 --> 00:01:27,150
it's first going to
hit a controller.

31
00:01:27,150 --> 00:01:31,730
In this case, it's going to
look inside of the controllers

32
00:01:31,730 --> 00:01:34,320
directory, which
is created for us,

33
00:01:34,320 --> 00:01:36,130
for a file called
"tweets_controller.rb."

34
00:01:39,660 --> 00:01:45,080
Only then is then going to
render out the show view.

35
00:01:45,080 --> 00:01:47,370
There's no coincidence
here that our URL

36
00:01:47,370 --> 00:01:50,110
has the word tweets
in it, as does

37
00:01:50,110 --> 00:01:57,490
the name of our controller, as
does the folder for our views.

38
00:01:57,490 --> 00:01:59,180
We don't have to map
any of these things

39
00:01:59,180 --> 00:02:02,080
together if we use conventions.

40
00:02:02,080 --> 00:02:05,810
That's why sometimes people
say that Rails follows

41
00:02:05,810 --> 00:02:09,610
convention over configuration.

42
00:02:09,610 --> 00:02:12,250
If we can follow some
intelligent defaults

43
00:02:12,250 --> 00:02:17,660
or convention, then we
can avoid configuration.

44
00:02:17,660 --> 00:02:20,250
But what belongs inside
of our controller?

45
00:02:20,250 --> 00:02:22,069
Well, let's write it out.

46
00:02:22,069 --> 00:02:23,610
Inside of our
controller, we're going

47
00:02:23,610 --> 00:02:28,070
to find that it has a
class of TweetsController,

48
00:02:28,070 --> 00:02:30,570
uppercase Tweets,
uppercase Controller.

49
00:02:30,570 --> 00:02:35,010
And that extends from
ApplicationController.

50
00:02:35,010 --> 00:02:37,110
The next step to
define our controller

51
00:02:37,110 --> 00:02:40,710
is to define a show method.

52
00:02:40,710 --> 00:02:42,760
Sometimes we call
the methods inside

53
00:02:42,760 --> 00:02:45,210
of our controllers actions.

54
00:02:45,210 --> 00:02:48,250
We can use the two
terms interchangeably.

55
00:02:48,250 --> 00:02:51,660
Now there's no coincidence that
this method we just defined

56
00:02:51,660 --> 00:02:58,330
called "show" happens to be the
same name as our view show.

57
00:02:58,330 --> 00:03:00,260
One maps to the other.

58
00:03:00,260 --> 00:03:02,920
Inside of this show method
is where we typically

59
00:03:02,920 --> 00:03:06,930
call our models and get
data from the database.

60
00:03:06,930 --> 00:03:13,160
So we're going to move up our
tweet call into our Controller,

61
00:03:13,160 --> 00:03:15,120
like you see here.

62
00:03:15,120 --> 00:03:16,690
Now when a request
comes in, it's

63
00:03:16,690 --> 00:03:20,830
first going to go and
call that show method

64
00:03:20,830 --> 00:03:22,540
inside of our controller.

65
00:03:22,540 --> 00:03:23,780
It's going to run that code.

66
00:03:23,780 --> 00:03:27,490
And once it gets to the
end, it's then, by default,

67
00:03:27,490 --> 00:03:30,450
going to go look
for our show view

68
00:03:30,450 --> 00:03:33,600
and render that
out to a browser.

69
00:03:33,600 --> 00:03:36,700
You might be wondering, what
about the variable scope?

70
00:03:36,700 --> 00:03:39,790
How is it that our view has
access to that tweet variable?

71
00:03:39,790 --> 00:03:42,830
Well, that's actually
a good question.

72
00:03:42,830 --> 00:03:45,190
Because this code
as-is wouldn't work.

73
00:03:45,190 --> 00:03:50,450
We need to add an at symbol
in front of each of these.

74
00:03:50,450 --> 00:03:53,940
So when we add an at in front
of a variable inside Ruby,

75
00:03:53,940 --> 00:03:56,990
it turns it into an
instance variable.

76
00:03:56,990 --> 00:04:00,630
This is how we grant the
view access to variables.

77
00:04:00,630 --> 00:04:02,800
So because inside
of our controller

78
00:04:02,800 --> 00:04:05,810
our tweet has that
at symbol, we can now

79
00:04:05,810 --> 00:04:08,325
access that tweet
variable using that

80
00:04:08,325 --> 00:04:12,600
at symbol inside of our views.

81
00:04:12,600 --> 00:04:14,610
But what if we don't
like that default?

82
00:04:14,610 --> 00:04:17,019
What if we don't want it to
render out the show view?

83
00:04:17,019 --> 00:04:21,470
Instead, we wanted to
render out status.html.erb.

84
00:04:21,470 --> 00:04:26,240
Well, we can specify that
inside of our show method

85
00:04:26,240 --> 00:04:31,240
by simply writing
render action status.

86
00:04:31,240 --> 00:04:33,430
This will then render
out our status.html.erb.

87
00:04:36,090 --> 00:04:38,480
This code works
great as-is, but you

88
00:04:38,480 --> 00:04:40,980
can see that we're
only ever rendering

89
00:04:40,980 --> 00:04:43,920
the tweet with the ID of one.

90
00:04:43,920 --> 00:04:47,150
But what if we wanted to go
to any one of these other URLs

91
00:04:47,150 --> 00:04:51,250
and specify the ID of the
tweet that we want to see?

92
00:04:51,250 --> 00:04:53,810
How would we look that up?

93
00:04:53,810 --> 00:04:58,580
How would we use that
parameter out of the URL?

94
00:04:58,580 --> 00:05:01,820
Well, it turns out if we
write URLs like this, Rails

95
00:05:01,820 --> 00:05:06,690
will generate for us a new hash
called "params," which contains

96
00:05:06,690 --> 00:05:10,020
a hash of the value passed in.

97
00:05:10,020 --> 00:05:12,490
To access that value to
load the proper tweet,

98
00:05:12,490 --> 00:05:14,500
all we need to do
in our controller

99
00:05:14,500 --> 00:05:18,144
is specify params id.

100
00:05:18,144 --> 00:05:19,810
That's going to look
up the proper tweet

101
00:05:19,810 --> 00:05:21,160
and render it out to the page.

102
00:05:23,970 --> 00:05:26,560
Let's look at a few more
examples with parameters.

103
00:05:26,560 --> 00:05:28,610
If we had a URL
like you see here -

104
00:05:28,610 --> 00:05:32,530
and we're just using standard
URL query parameters -

105
00:05:32,530 --> 00:05:36,650
Rails would create a
parameter hash for us,

106
00:05:36,650 --> 00:05:40,160
which might look something
like this, which we could then

107
00:05:40,160 --> 00:05:45,000
use inside of our controller,
if we set it up properly,

108
00:05:45,000 --> 00:05:47,130
to create a new tweet.

109
00:05:47,130 --> 00:05:49,250
So you can see here,
we're creating a tweet,

110
00:05:49,250 --> 00:05:51,910
and we're grabbing the
status out of the parameter

111
00:05:51,910 --> 00:05:54,090
to create that tweet.

112
00:05:54,090 --> 00:05:57,430
However, often in
Rails our parameters

113
00:05:57,430 --> 00:05:59,220
might look something
like this where

114
00:05:59,220 --> 00:06:03,920
we have a hash within a hash.

115
00:06:03,920 --> 00:06:05,540
You see that?

116
00:06:05,540 --> 00:06:08,750
So how would we access a status
of this to create a tweet?

117
00:06:08,750 --> 00:06:14,520
Well, we could write
Tweet.create status params

118
00:06:14,520 --> 00:06:17,880
tweet status, like you see here.

119
00:06:17,880 --> 00:06:20,380
So we have to specify
two keys to get

120
00:06:20,380 --> 00:06:24,790
to the value we want inside
this hash within a hash.

121
00:06:24,790 --> 00:06:26,980
There's an alternate
syntax we can use here,

122
00:06:26,980 --> 00:06:31,610
because our tweet method
is expecting a hash.

123
00:06:31,610 --> 00:06:35,750
So we can just
specify params tweet.

124
00:06:35,750 --> 00:06:37,940
And what it's going
to send it to create

125
00:06:37,940 --> 00:06:42,550
is the hash which
contains status, "I'm dead."

126
00:06:42,550 --> 00:06:46,100
You see how those two
lines are equivalent?

127
00:06:46,100 --> 00:06:49,210
But I think the second one is
better because it's obviously

128
00:06:49,210 --> 00:06:53,406
writing less code and it's
not recreating a hash.

129
00:06:53,406 --> 00:06:56,140
That's pretty advanced.

130
00:06:56,140 --> 00:06:57,830
One of the reasons
people use Rails

131
00:06:57,830 --> 00:06:59,630
is to create backend APIs.

132
00:06:59,630 --> 00:07:02,140
It's great for that if you're
building an iPhone app,

133
00:07:02,140 --> 00:07:04,980
an Android app, or just
need to provide a developer

134
00:07:04,980 --> 00:07:07,800
API to your web service.

135
00:07:07,800 --> 00:07:10,300
You might want to supply XML.

136
00:07:10,300 --> 00:07:13,820
You might also want
to supply JSON code.

137
00:07:13,820 --> 00:07:18,090
So let's show you how easy
it is to do that with Rails.

138
00:07:18,090 --> 00:07:22,100
If we want the JSON
representation of our tweet,

139
00:07:22,100 --> 00:07:24,040
we could send in the
URL tweets/1.json.

140
00:07:26,980 --> 00:07:32,760
Then inside of our show method
we need to add some code.

141
00:07:32,760 --> 00:07:35,170
We need to tell
our Rails app what

142
00:07:35,170 --> 00:07:38,500
formats this can respond to.

143
00:07:38,500 --> 00:07:40,400
So first, we're
going to say that it

144
00:07:40,400 --> 00:07:43,980
responds to the format of HTML.

145
00:07:43,980 --> 00:07:47,030
Now that hash sign there,
that's just a comment.

146
00:07:47,030 --> 00:07:49,200
That actually has no
effect on anything -

147
00:07:49,200 --> 00:07:50,790
it doesn't even
have to be there.

148
00:07:50,790 --> 00:07:53,360
But a lot of times
you'll see people

149
00:07:53,360 --> 00:07:55,470
will add a little
reminder that it's

150
00:07:55,470 --> 00:07:58,680
only because we write
format.html that it will try

151
00:07:58,680 --> 00:08:02,560
to render out
show.html.erb by default.

152
00:08:02,560 --> 00:08:04,230
Now here comes the JSON part.

153
00:08:04,230 --> 00:08:08,020
We need to tell our application
that this method responds

154
00:08:08,020 --> 00:08:10,060
to the JSON format.

155
00:08:10,060 --> 00:08:11,790
And when it does, we
want to render out

156
00:08:11,790 --> 00:08:16,670
the JSON representation
of this particular tweet.

157
00:08:16,670 --> 00:08:18,340
And that's all there is to it.

158
00:08:18,340 --> 00:08:20,620
The request goes through,
and it renders out

159
00:08:20,620 --> 00:08:24,430
the JSON representation
of this tweet.

160
00:08:24,430 --> 00:08:28,260
Then if we want this
to respond to XML,

161
00:08:28,260 --> 00:08:32,419
our request might
have 1.xml in it,

162
00:08:32,419 --> 00:08:34,110
and then inside of
our method we need

163
00:08:34,110 --> 00:08:40,760
to write format.xml, render
the XML format of this tweet.

164
00:08:40,760 --> 00:08:47,210
And then that renders back out the proper XML for this tweet.

165
00:08:47,210 --> 00:08:48,870
In a typical Rails
application, you're

166
00:08:48,870 --> 00:08:50,770
going to see a lot of
the same Controller

167
00:08:50,770 --> 00:08:53,260
actions inside the Controller.

168
00:08:53,260 --> 00:08:55,030
Let's go over some of these.

169
00:08:55,030 --> 00:08:57,060
First you have the
index action, which

170
00:08:57,060 --> 00:08:59,560
is going to list all the
tweets, the show action

171
00:08:59,560 --> 00:09:02,650
to show a single tweet, the
new action to show a new tweet

172
00:09:02,650 --> 00:09:06,660
form, the edit action to
show an edit tweet form,

173
00:09:06,660 --> 00:09:09,450
the create action
to create a tweet,

174
00:09:09,450 --> 00:09:11,240
the update action
to update a tweet,

175
00:09:11,240 --> 00:09:15,490
and, finally, the destroy
action to delete a tweet.

176
00:09:15,490 --> 00:09:17,920
As you might imagine,
most of these actions

177
00:09:17,920 --> 00:09:21,140
are going to have views
associated with them that we'll

178
00:09:21,140 --> 00:09:22,636
need to write.

179
00:09:22,636 --> 00:09:24,010
We already wrote
some of the URLs

180
00:09:24,010 --> 00:09:25,590
which will call these actions.

181
00:09:25,590 --> 00:09:27,630
For example, when we
list out the tweets,

182
00:09:27,630 --> 00:09:29,085
remember that edit link?

183
00:09:29,085 --> 00:09:31,080
When we click on
that link, it's going

184
00:09:31,080 --> 00:09:33,310
to go into our
tweets controller,

185
00:09:33,310 --> 00:09:35,030
it's going to call
the edit action.

186
00:09:35,030 --> 00:09:37,710
So inside of that
method, we need

187
00:09:37,710 --> 00:09:40,864
to first retrieve the
tweet that we want to edit,

188
00:09:40,864 --> 00:09:42,780
so we're going to go
ahead and do that like we

189
00:09:42,780 --> 00:09:46,500
did a moment ago,
getting the parameter ID.

190
00:09:46,500 --> 00:09:49,780
And then it's going to go and
render the edit action, which

191
00:09:49,780 --> 00:09:53,660
might look something like
this where we have a form

192
00:09:53,660 --> 00:09:56,210
and we can click that
update tweet button.

193
00:09:56,210 --> 00:10:00,529
But we're not going to
define that in this course.

194
00:10:00,529 --> 00:10:02,320
If we go to slash tweets
in our application

195
00:10:02,320 --> 00:10:05,230
and we get our
listing tweets form,

196
00:10:05,230 --> 00:10:10,890
right now we can click Edit and
Destroy on any of these tweets.

197
00:10:10,890 --> 00:10:13,590
But obviously we don't
want to allow anyone

198
00:10:13,590 --> 00:10:16,490
to delete or edit
anyone else's tweets.

199
00:10:16,490 --> 00:10:19,800
We need to add some sort
of simple authentication

200
00:10:19,800 --> 00:10:23,210
so that when they click on one
that doesn't belong to them

201
00:10:23,210 --> 00:10:27,510
it shows on the screen, "Sorry,
you can't edit that tweet."

202
00:10:27,510 --> 00:10:29,620
How might we do that?

203
00:10:29,620 --> 00:10:31,490
To implement this
authorization, we

204
00:10:31,490 --> 00:10:34,270
need to add some code
to our edit action.

205
00:10:34,270 --> 00:10:36,320
Inside here, we're
going to check

206
00:10:36,320 --> 00:10:40,700
to see if the user's current
session zombie_id is not

207
00:10:40,700 --> 00:10:44,730
equal to the current
tweet's zombie_id.

208
00:10:44,730 --> 00:10:46,950
What is session,
you might be asking?

209
00:10:46,950 --> 00:10:50,130
Well, session works
like a per-user hash.

210
00:10:50,130 --> 00:10:52,880
Every user gets their
own session hash

211
00:10:52,880 --> 00:10:54,420
that we can store things in.

212
00:10:54,420 --> 00:10:57,540
And that's what we usually
do when somebody logs in.

213
00:10:57,540 --> 00:10:59,320
We set a variable
on session that

214
00:10:59,320 --> 00:11:02,240
maybe has their zombie_id in it.

215
00:11:02,240 --> 00:11:05,850
So we're checking to see
if the current user is not

216
00:11:05,850 --> 00:11:08,670
the person who
posted this tweet.

217
00:11:08,670 --> 00:11:12,530
And if they're not, we
need to send a message.

218
00:11:12,530 --> 00:11:16,470
We do that by setting
a flash notice.

219
00:11:16,470 --> 00:11:18,940
And we say, "Sorry, you
can't edit this tweet."

220
00:11:18,940 --> 00:11:20,710
What is flash?

221
00:11:20,710 --> 00:11:23,410
Well, flash is another
one of these helper hashes

222
00:11:23,410 --> 00:11:28,450
that we can use in Rails to
send messages back to the user.

223
00:11:28,450 --> 00:11:31,730
Next, we need to redirect
the user out of this action,

224
00:11:31,730 --> 00:11:34,430
because we don't want
to render the Edit page.

225
00:11:34,430 --> 00:11:36,290
We don't want to
show them that form.

226
00:11:36,290 --> 00:11:38,120
They're not allowed to see it.

227
00:11:38,120 --> 00:11:42,690
So we're going to redirect
them back to the tweets path,

228
00:11:42,690 --> 00:11:45,580
you know that whole
tweets listing page.

229
00:11:45,580 --> 00:11:49,174
redirect_to allows you
to redirect the browser

230
00:11:49,174 --> 00:11:50,090
to a different action.

231
00:11:52,810 --> 00:11:55,640
There's an alternate shorter
syntax for these last two lines

232
00:11:55,640 --> 00:11:56,530
of code.

233
00:11:56,530 --> 00:11:59,819
We can actually write
redirect_to tweets_path

234
00:11:59,819 --> 00:12:01,735
and send them the notice
as a second argument.

235
00:12:05,656 --> 00:12:07,530
Our next step before we
jump into the browser

236
00:12:07,530 --> 00:12:09,460
is we need to
specify in our layout

237
00:12:09,460 --> 00:12:11,760
where we want this
notice to show up.

238
00:12:11,760 --> 00:12:13,810
It doesn't just
show up by default.

239
00:12:13,810 --> 00:12:18,490
So we're going to specify
here if a flash notice exists,

240
00:12:18,490 --> 00:12:22,120
if there's a message waiting
for the user in other words,

241
00:12:22,120 --> 00:12:26,140
then go ahead and print it
out to the screen like so.

242
00:12:30,620 --> 00:12:33,560
Now if we go hit Edit
and our session zombie_id

243
00:12:33,560 --> 00:12:36,850
doesn't match the zombie_id
of the current tweet,

244
00:12:36,850 --> 00:12:40,070
well, it's going to redirect
us back to this listing page

245
00:12:40,070 --> 00:12:42,241
and give us this flash notice.

246
00:12:42,241 --> 00:12:42,740
Sweet.

247
00:12:42,740 --> 00:12:45,464
We did it.

248
00:12:45,464 --> 00:12:47,380
Now if we jump back into
our tweets controller

249
00:12:47,380 --> 00:12:49,100
and we define the
rest of these actions,

250
00:12:49,100 --> 00:12:52,740
we would quickly find
that some of these methods

251
00:12:52,740 --> 00:12:55,450
have a lot of the same code.

252
00:12:55,450 --> 00:12:57,920
Both Edit, Update,
and Destroy need

253
00:12:57,920 --> 00:13:01,460
to look up the current
ID of the tweet

254
00:13:01,460 --> 00:13:04,010
and need to check authorization.

255
00:13:04,010 --> 00:13:06,590
And we don't want to have to
write that code over and over

256
00:13:06,590 --> 00:13:07,090
again.

257
00:13:07,090 --> 00:13:08,840
Remember, Rails is D.R.Y.:

258
00:13:08,840 --> 00:13:10,570
Don't repeat yourself.

259
00:13:10,570 --> 00:13:14,871
So how might we be able to
get rid of that repetition?

260
00:13:14,871 --> 00:13:16,970
If we took a look
inside these actions,

261
00:13:16,970 --> 00:13:19,830
we would see that the first
thing that all of them do

262
00:13:19,830 --> 00:13:22,513
is fetch the current tweet.

263
00:13:22,513 --> 00:13:23,380
Hmm.

264
00:13:23,380 --> 00:13:25,150
So that's duplication
right there.

265
00:13:25,150 --> 00:13:28,150
Let's move that
up into a method.

266
00:13:28,150 --> 00:13:30,950
We're going to
call it get_tweet.

267
00:13:30,950 --> 00:13:33,460
And now we're going to
write some code that

268
00:13:33,460 --> 00:13:38,410
says before every
action call get_tweet.

269
00:13:38,410 --> 00:13:41,960
If we left it like this, this
means before every action

270
00:13:41,960 --> 00:13:44,730
in here it would call
this get_tweet method.

271
00:13:44,730 --> 00:13:48,740
But we don't want it to
happen before every method.

272
00:13:48,740 --> 00:13:52,020
Instead, we only
want it to happen

273
00:13:52,020 --> 00:13:55,700
with Edit, Update, and Destroy.

274
00:13:55,700 --> 00:13:58,190
So we use that code right there.

275
00:14:00,840 --> 00:14:03,220
The other bit of code we
would see over and over again

276
00:14:03,220 --> 00:14:04,620
is the authorization code.

277
00:14:04,620 --> 00:14:06,770
Remember, it looks
something like this?

278
00:14:06,770 --> 00:14:10,820
Let's go ahead and wrap that
in a method called check_auth.

279
00:14:10,820 --> 00:14:13,480
And now we'll have
another before action.

280
00:14:13,480 --> 00:14:17,190
We'll say before
action call check_auth,

281
00:14:17,190 --> 00:14:20,665
again only for Edit,
Update, and Destroy.

282
00:14:24,670 --> 00:14:28,230
And now we've dried up our code,
eliminated that duplication,

283
00:14:28,230 --> 00:14:30,165
and now when we go
into our browser,

284
00:14:30,165 --> 00:14:33,180
when we click Edit on anything
we're not supposed to edit,

285
00:14:33,180 --> 00:14:37,890
we get back, "Sorry, you
can't edit that tweet."

286
00:14:37,890 --> 00:14:39,770
That was a lot of information.

287
00:14:39,770 --> 00:14:42,060
But don't worry, you'll get it.

288
00:14:42,060 --> 00:14:44,940
Go exercise your brain
in the next challenges.

289
00:14:44,940 --> 00:14:47,100
It'll make it more delicious.

