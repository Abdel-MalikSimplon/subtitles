1
00:00:00,000 --> 00:00:02,816
[SINGING] Put down your
brains and your entrails.

2
00:00:02,816 --> 00:00:05,774
It's time to stop
and learn some Rails,

3
00:00:05,774 --> 00:00:09,718
â€˜cause we've got something
new to grab - Rails

4
00:00:09,718 --> 00:00:11,080
for Zombies by Envy Labs.

5
00:00:15,154 --> 00:00:16,570
You're watching
Rails for Zombies,

6
00:00:16,570 --> 00:00:18,160
and this is Level
Two, where we're

7
00:00:18,160 --> 00:00:20,330
going to be talking
about models,

8
00:00:20,330 --> 00:00:23,020
the lifeblood of
your application.

9
00:00:23,020 --> 00:00:24,760
You've already been
working with models,

10
00:00:24,760 --> 00:00:26,520
but you don't even know it yet.

11
00:00:26,520 --> 00:00:30,420
See, models are how we
communicate with our data store

12
00:00:30,420 --> 00:00:35,840
in Rails, the lifeblood
of our application.

13
00:00:35,840 --> 00:00:37,500
Here's a customer's
browser, and it's

14
00:00:37,500 --> 00:00:39,410
about to hit our
Rails application.

15
00:00:39,410 --> 00:00:43,080
When it does, it's going to
encounter four components,

16
00:00:43,080 --> 00:00:44,779
as you see here.

17
00:00:44,779 --> 00:00:46,820
We're going to be learning
about those components

18
00:00:46,820 --> 00:00:49,430
in the next four
levels, starting

19
00:00:49,430 --> 00:00:54,340
with models, which
are about there.

20
00:00:54,340 --> 00:00:57,760
In the previous level, when
we called tweet find(3),

21
00:00:57,760 --> 00:01:02,090
and it went to the database
to find the tweets table,

22
00:01:02,090 --> 00:01:04,440
well, it was actually
able to do this

23
00:01:04,440 --> 00:01:10,450
only because there was a
model that was called tweet.

24
00:01:10,450 --> 00:01:15,120
This is a file that resides
in the App Models directory.

25
00:01:15,120 --> 00:01:19,870
Notice, it's singular,
lowercase tweet.rb.

26
00:01:19,870 --> 00:01:21,510
Inside this file,
this is what we

27
00:01:21,510 --> 00:01:27,380
find - class, tweet, inherits
from active record base.

28
00:01:27,380 --> 00:01:30,250
When we write capital
Tweet anywhere in our Rails

29
00:01:30,250 --> 00:01:35,710
application, it means we're
referencing this Tweet model.

30
00:01:35,710 --> 00:01:38,880
Since this Tweet model inherits
from active record base,

31
00:01:38,880 --> 00:01:43,030
this is what maps this
class to the table, which

32
00:01:43,030 --> 00:01:46,320
has the lowercase
plural name tweets.

33
00:01:50,370 --> 00:01:54,910
So when we call find(3)
 on our Tweet class -

34
00:01:54,910 --> 00:01:57,640
and the type of the class
that it is is a model - 

35
00:01:57,640 --> 00:02:01,500
it goes looking inside
of our tweets table.

36
00:02:01,500 --> 00:02:03,060
What gets returned
is an instance

37
00:02:03,060 --> 00:02:06,190
of this class, which
has the values for tweet

38
00:02:06,190 --> 00:02:07,810
with the ID of three.

39
00:02:07,810 --> 00:02:12,210
This is what gets set
in our t variable.

40
00:02:12,210 --> 00:02:14,210
What would happen if
we created a new tweet

41
00:02:14,210 --> 00:02:16,990
and immediately saved it
without setting any values?

42
00:02:16,990 --> 00:02:20,150
Well, it turns out, it would
still create a new tweet

43
00:02:20,150 --> 00:02:22,290
with a blank status and
a blank zombie, which

44
00:02:22,290 --> 00:02:23,670
is not what we want.

45
00:02:23,670 --> 00:02:25,980
We don't want that
in our database.

46
00:02:25,980 --> 00:02:29,160
So how would we fix this?

47
00:02:29,160 --> 00:02:31,740
First of all, if we
wanted to make sure status

48
00:02:31,740 --> 00:02:35,640
was never blank, we could
go back into our model class

49
00:02:35,640 --> 00:02:40,290
and specify "validates
presence of status."

50
00:02:40,290 --> 00:02:42,320
That means our model
is going to validate

51
00:02:42,320 --> 00:02:44,580
that we do have a status.

52
00:02:44,580 --> 00:02:48,440
And if it doesn't, it's not
going to allow us to save it.

53
00:02:48,440 --> 00:02:51,780
So if we go to the command line
and we create a new tweet now

54
00:02:51,780 --> 00:02:56,460
and call t.save, it's
going to return false.

55
00:02:56,460 --> 00:02:58,090
If we didn't have
this validation,

56
00:02:58,090 --> 00:03:00,710
it would return true,
meaning it was successfully

57
00:03:00,710 --> 00:03:02,746
saved to the database.

58
00:03:02,746 --> 00:03:08,050
To figure out what went wrong,
we can run t.errors.messages,

59
00:03:08,050 --> 00:03:11,440
and it's going to return
a hash with values

60
00:03:11,440 --> 00:03:13,610
that show us what went wrong.

61
00:03:13,610 --> 00:03:15,850
To print out just
this error message,

62
00:03:15,850 --> 00:03:19,110
we could access the
string inside of this hash

63
00:03:19,110 --> 00:03:23,870
by writing t.errors
status and specifying

64
00:03:23,870 --> 00:03:26,370
we want the error in
the zero position,

65
00:03:26,370 --> 00:03:27,709
because it is an array.

66
00:03:27,709 --> 00:03:28,500
See those brackets?

67
00:03:31,780 --> 00:03:34,680
Rails comes with a bunch of
model validations right out

68
00:03:34,680 --> 00:03:35,630
of the box.

69
00:03:35,630 --> 00:03:37,420
Besides "validates
presence of," we

70
00:03:37,420 --> 00:03:40,380
have "validates numericality
of," to make sure something

71
00:03:40,380 --> 00:03:41,720
is a number.

72
00:03:41,720 --> 00:03:43,880
We can say "validates
uniqueness of,"

73
00:03:43,880 --> 00:03:46,050
to make sure
something is unique.

74
00:03:46,050 --> 00:03:47,730
We have "validates
confirmation of,"

75
00:03:47,730 --> 00:03:50,540
if we have two fields,
like a password, that

76
00:03:50,540 --> 00:03:52,480
need to be equal.

77
00:03:52,480 --> 00:03:54,540
We have "validates
acceptance of,"

78
00:03:54,540 --> 00:03:57,870
if there's, say, a check
box they need to check,

79
00:03:57,870 --> 00:04:00,070
like they read the
terms of service.

80
00:04:00,070 --> 00:04:02,330
There's "validates
length of," to make sure

81
00:04:02,330 --> 00:04:05,080
that something they entered
is longer than maybe three

82
00:04:05,080 --> 00:04:06,420
characters.

83
00:04:06,420 --> 00:04:08,140
There's "validates
format of," if we

84
00:04:08,140 --> 00:04:11,220
want to specify a regular
expression - for example, if we

85
00:04:11,220 --> 00:04:13,440
want to make sure
their email is valid.

86
00:04:13,440 --> 00:04:15,100
There's "validates
inclusion of,"

87
00:04:15,100 --> 00:04:17,640
if we want to make sure
that a field like age

88
00:04:17,640 --> 00:04:20,010
is in between two values.

89
00:04:20,010 --> 00:04:22,750
And lastly, "validates exclusion
of," if we want to make sure

90
00:04:22,750 --> 00:04:26,170
a value is not included
in what the user entered.

91
00:04:28,960 --> 00:04:32,260
Validations have another
easier syntax to use.

92
00:04:32,260 --> 00:04:35,040
We can write validates
and then specify

93
00:04:35,040 --> 00:04:38,080
the attribute we want to
set some validations on

94
00:04:38,080 --> 00:04:39,870
and then specify what
we want to validate

95
00:04:39,870 --> 00:04:42,027
about it - for
example, presence true.

96
00:04:42,027 --> 00:04:44,110
Then if we wanted to, we
could write another line,

97
00:04:44,110 --> 00:04:46,960
validates status length three.

98
00:04:46,960 --> 00:04:49,560
But as you might
imagine, there's

99
00:04:49,560 --> 00:04:50,880
a better way to write this.

100
00:04:50,880 --> 00:04:53,820
We could combine these
two to simply write,

101
00:04:53,820 --> 00:05:00,434
validate status, presence true,
length three - all in one line.

102
00:05:00,434 --> 00:05:01,600
Now I said, all in one line.

103
00:05:01,600 --> 00:05:04,270
But you might be saying,
hey, that's three lines.

104
00:05:04,270 --> 00:05:06,760
Well that's because
Ruby knows statements

105
00:05:06,760 --> 00:05:09,630
like this that end with
a comma at the end,

106
00:05:09,630 --> 00:05:13,189
it's going to look at this and
run it all as a single line.

107
00:05:13,189 --> 00:05:15,230
There's going to be other
places in this tutorial

108
00:05:15,230 --> 00:05:17,510
where you're going to see
things on multiple lines,

109
00:05:17,510 --> 00:05:21,370
but Ruby's going to interpret
it as a single line.

110
00:05:21,370 --> 00:05:23,174
Just as you saw on
the previous slide,

111
00:05:23,174 --> 00:05:24,840
there's a bunch of
different validations

112
00:05:24,840 --> 00:05:26,464
that we could use
with this new syntax.

113
00:05:33,460 --> 00:05:35,210
Most people who are
programming Rails apps

114
00:05:35,210 --> 00:05:38,550
are using some form of
relational database,

115
00:05:38,550 --> 00:05:40,960
meaning that you've got
multiple database tables

116
00:05:40,960 --> 00:05:43,150
and they have relationships
with each other.

117
00:05:43,150 --> 00:05:45,640
So let's figure out how to
find a relationship using

118
00:05:45,640 --> 00:05:47,740
Ruby on Rails.

119
00:05:47,740 --> 00:05:49,810
Currently, in our
tweets table, we're

120
00:05:49,810 --> 00:05:53,730
storing the name of a zombie
that did each of the tweets.

121
00:05:53,730 --> 00:05:57,360
But we want to add some
additional attributes

122
00:05:57,360 --> 00:06:00,970
to the zombies, like what
graveyard they're from,

123
00:06:00,970 --> 00:06:04,200
in which case it might be
nice and eliminate duplication

124
00:06:04,200 --> 00:06:08,590
if we had a zombies table.

125
00:06:08,590 --> 00:06:13,110
So let's change our tweets table
to have a zombie ID column,

126
00:06:13,110 --> 00:06:16,970
referring to which zombie
that tweet belongs to.

127
00:06:16,970 --> 00:06:18,840
You'll notice here
that tweet one and four

128
00:06:18,840 --> 00:06:21,760
belong to the same zombie ID.

129
00:06:21,760 --> 00:06:23,600
Now here comes
our zombies table.

130
00:06:23,600 --> 00:06:27,200
We're now specifying the
zombie name and the graveyard

131
00:06:27,200 --> 00:06:28,460
it belongs to.

132
00:06:28,460 --> 00:06:31,650
And you'll notice that
the ID on this table

133
00:06:31,650 --> 00:06:36,686
refers to the zombie ID
up in the tweets table.

134
00:06:36,686 --> 00:06:38,310
The only thing that's
left for us to do

135
00:06:38,310 --> 00:06:42,050
is to figure out some way to
tell our Rails application

136
00:06:42,050 --> 00:06:44,850
that this relationship exists.

137
00:06:44,850 --> 00:06:49,320
We need to map these
two models together.

138
00:06:49,320 --> 00:06:51,820
In our case, we want to
specify the relationship

139
00:06:51,820 --> 00:06:54,270
in both directions.

140
00:06:54,270 --> 00:06:57,527
So we need to tell our Rails
application what relationship

141
00:06:57,527 --> 00:06:59,485
a zombie has with a tweet
and what relationship

142
00:06:59,485 --> 00:07:02,020
a tweet has with the zombie.

143
00:07:02,020 --> 00:07:04,190
So first, as you can
see with the table here,

144
00:07:04,190 --> 00:07:10,990
how do we express that a
zombie has many tweets?

145
00:07:10,990 --> 00:07:13,670
To do that, we go into the
Zombie model, which we probably

146
00:07:13,670 --> 00:07:16,900
created ourselves when we
created our Zombie table,

147
00:07:16,900 --> 00:07:19,420
and specify, "has many tweets."

148
00:07:19,420 --> 00:07:23,710
Notice that tweets here
is lowercase and plural.

149
00:07:23,710 --> 00:07:27,280
That's all there is to it.

150
00:07:27,280 --> 00:07:30,890
Now let's switch the tables
around and figure out

151
00:07:30,890 --> 00:07:33,160
the other side of
the relationship.

152
00:07:33,160 --> 00:07:36,650
So if we had to articulate
this relationship,

153
00:07:36,650 --> 00:07:43,880
we might say that a tweet
belongs to a zombie.

154
00:07:43,880 --> 00:07:47,690
So now in our model, we need
to express this relationship.

155
00:07:47,690 --> 00:07:54,000
All we have to do is
write, "belongs to zombie."

156
00:07:54,000 --> 00:07:55,510
And that's all there is to it.

157
00:07:55,510 --> 00:07:58,830
But notice here,
this is singular,

158
00:07:58,830 --> 00:08:02,060
because a tweet can only
belong to one zombie.

159
00:08:04,919 --> 00:08:06,460
Now let's go ahead
and run some code.

160
00:08:06,460 --> 00:08:09,810
First, I'm going to fetch
the zombie with ID of 1

161
00:08:09,810 --> 00:08:11,920
and set that equal to Ash.

162
00:08:11,920 --> 00:08:14,300
You'll notice here,
what gets returned,

163
00:08:14,300 --> 00:08:19,420
that's actually the
instance of our zombie class

164
00:08:19,420 --> 00:08:23,510
with the values of zombie Ash.

165
00:08:23,510 --> 00:08:26,410
Now, let's create a
tweet for zombie Ash.

166
00:08:26,410 --> 00:08:29,790
We're going to create
a tweet with status,

167
00:08:29,790 --> 00:08:32,240
"Your eyelids taste like bacon."

168
00:08:32,240 --> 00:08:35,669
And the second parameter,
here in our hash,

169
00:08:35,669 --> 00:08:38,750
is going to be zombie Ash.

170
00:08:38,750 --> 00:08:42,530
So we're actually sending
in the zombie object.

171
00:08:42,530 --> 00:08:46,190
And Rails is going to take
care of all the mapping for us.

172
00:08:46,190 --> 00:08:49,600
You'll notice here, what gets
returned is our new tweet that

173
00:08:49,600 --> 00:08:54,280
has an ID of five - it created the
ID for us - the proper status,

174
00:08:54,280 --> 00:08:59,400
and it has zombie ID one,
which, of course, is Ash's ID.

175
00:08:59,400 --> 00:09:02,540
Now if we call
ash.tweets.count, it's

176
00:09:02,540 --> 00:09:06,250
going to return that Ash
has three tweets now.

177
00:09:06,250 --> 00:09:09,150
And now if we call
ash.tweets, which

178
00:09:09,150 --> 00:09:11,800
is using the has
many association,

179
00:09:11,800 --> 00:09:17,670
it's going to return an array
with three instances of tweets,

180
00:09:17,670 --> 00:09:20,800
which belong to Ash.

181
00:09:20,800 --> 00:09:22,700
Now if we look back
in our database,

182
00:09:22,700 --> 00:09:25,480
we would see that it
created a new row for us

183
00:09:25,480 --> 00:09:29,540
for Ash's new tweet.

184
00:09:29,540 --> 00:09:32,290
One more thing - now, if
we fetch this new tweet out

185
00:09:32,290 --> 00:09:36,350
of the database, we
could call t.zombie.

186
00:09:36,350 --> 00:09:39,590
What this would
return is an instance

187
00:09:39,590 --> 00:09:42,890
of a zombie, an instance of Ash.

188
00:09:42,890 --> 00:09:46,180
We could even call
t.zombie.name,

189
00:09:46,180 --> 00:09:49,170
which will give us back the
zombie's name - in this case,

190
00:09:49,170 --> 00:09:51,400
Ash.

191
00:09:51,400 --> 00:09:53,710
Now it's time for
you to practice

192
00:09:53,710 --> 00:09:55,510
creating some
models of your own,

193
00:09:55,510 --> 00:09:57,980
and I'll see you in Level Three.

