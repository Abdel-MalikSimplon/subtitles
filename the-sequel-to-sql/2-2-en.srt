1
00:00:02,020 --> 00:00:02,730
Welcome back.

2
00:00:02,730 --> 00:00:04,480
In this section, we're
going to be talking

3
00:00:04,480 --> 00:00:07,310
about value constraints.

4
00:00:07,310 --> 00:00:10,810
So here, you see we have a
Promotions table and a Movies

5
00:00:10,810 --> 00:00:11,570
table.

6
00:00:11,570 --> 00:00:15,110
And we need to associate
specific promotions

7
00:00:15,110 --> 00:00:17,190
with our movies.

8
00:00:17,190 --> 00:00:18,920
How might we do that?

9
00:00:18,920 --> 00:00:22,970
Well, we could put a title
column inside our Promotions

10
00:00:22,970 --> 00:00:26,000
table and reference
the movie that way,

11
00:00:26,000 --> 00:00:30,646
but that would be duplicating
data — feels dirty.

12
00:00:30,646 --> 00:00:32,020
But a better way
to do this would

13
00:00:32,020 --> 00:00:36,560
be to reference the movie's
primary key — that id column —

14
00:00:36,560 --> 00:00:39,540
from the Promotions table.

15
00:00:39,540 --> 00:00:43,430
So, here you can see we've
created a movie_id column.

16
00:00:43,430 --> 00:00:47,580
And that references the ID
column in the Movies table.

17
00:00:47,580 --> 00:00:49,470
When creating these
types of references,

18
00:00:49,470 --> 00:00:51,230
there's a common
naming convention.

19
00:00:51,230 --> 00:00:54,740
We singularize the table we're
referencing — in this case,

20
00:00:54,740 --> 00:00:57,700
"movie" — and then we use
an underscore followed

21
00:00:57,700 --> 00:01:00,215
by the column name —
in this case, "id."

22
00:01:04,519 --> 00:01:08,380
There's a name for this type of
column, and it's a foreign key.

23
00:01:08,380 --> 00:01:10,390
A foreign key is a
column in one table

24
00:01:10,390 --> 00:01:14,450
that references the primary
key column in another table.

25
00:01:14,450 --> 00:01:17,390
So in this case, the movie_id
column is a foreign key

26
00:01:17,390 --> 00:01:21,910
referencing the primary key
column — in this case, "id" —

27
00:01:21,910 --> 00:01:22,920
of the Movies table.

28
00:01:26,150 --> 00:01:28,060
Using these new
tables, how do you

29
00:01:28,060 --> 00:01:30,910
think I would find promotions
for the movie Gone

30
00:01:30,910 --> 00:01:32,550
With the Wind?

31
00:01:32,550 --> 00:01:34,850
Well, I would have
to do two queries.

32
00:01:34,850 --> 00:01:36,720
First, if I didn't
know it already,

33
00:01:36,720 --> 00:01:41,390
I would have to find the id for
the movie Gone With the Wind

34
00:01:41,390 --> 00:01:42,420
like so.

35
00:01:42,420 --> 00:01:44,780
That would return the value 2.

36
00:01:44,780 --> 00:01:48,000
I can then use that value in a
second query on the Promotions

37
00:01:48,000 --> 00:01:50,830
table to get the name
and the category.

38
00:01:50,830 --> 00:01:55,130
And I would need to specify the
foreign key movie_id equals 2.

39
00:01:59,500 --> 00:02:02,880
What would happen if we
inserted a new promotion

40
00:02:02,880 --> 00:02:08,550
and specified an invalid
movie_id — in this case, 999?

41
00:02:08,550 --> 00:02:09,630
It would work.

42
00:02:09,630 --> 00:02:12,430
It would actually
insert this row.

43
00:02:12,430 --> 00:02:14,575
But, of course, if we
looked in our Movies table,

44
00:02:14,575 --> 00:02:20,750
we wouldn't see any
movie with the id of 999.

45
00:02:20,750 --> 00:02:23,940
The solution to this problem
is a foreign key constraint.

46
00:02:23,940 --> 00:02:25,440
But before we get
into that, we need

47
00:02:25,440 --> 00:02:28,660
to take a look at our
create table statements.

48
00:02:28,660 --> 00:02:31,350
Here, you see we have
create table movies.

49
00:02:31,350 --> 00:02:34,287
We have id as the primary key.

50
00:02:34,287 --> 00:02:35,870
We haven't seen that
before until now,

51
00:02:35,870 --> 00:02:38,140
but id is the primary key.

52
00:02:38,140 --> 00:02:41,190
Then down in our create
table Promotions statement,

53
00:02:41,190 --> 00:02:45,990
you can see we now have a
foreign key called movie_id.

54
00:02:45,990 --> 00:02:49,010
And let's add the
new constraint.

55
00:02:49,010 --> 00:02:53,790
All we have to do is say,
movie_id, int, references,

56
00:02:53,790 --> 00:02:55,950
movies, ID.

57
00:02:55,950 --> 00:03:00,054
That creates our
foreign key constraint.

58
00:03:00,054 --> 00:03:01,970
It's important to note
here that if you create

59
00:03:01,970 --> 00:03:03,840
a foreign key
constraint like this,

60
00:03:03,840 --> 00:03:06,340
it needs to be referencing
a table that has already

61
00:03:06,340 --> 00:03:07,660
been created.

62
00:03:07,660 --> 00:03:09,140
So in this case,
the Movies table

63
00:03:09,140 --> 00:03:10,790
had to have been created first.

64
00:03:13,566 --> 00:03:15,190
Now, if we go back
to our tables and we

65
00:03:15,190 --> 00:03:18,450
try to insert a promotion
referencing a movie that

66
00:03:18,450 --> 00:03:22,450
does not exist — one
with an id of 999 —

67
00:03:22,450 --> 00:03:26,380
we properly get back an error
saying that our insert violates

68
00:03:26,380 --> 00:03:27,725
our foreign key constraint.

69
00:03:30,890 --> 00:03:34,510
There's a slightly shorter
way to define a foreign key.

70
00:03:34,510 --> 00:03:38,870
And that is, we don't have
to specify the column.

71
00:03:38,870 --> 00:03:41,030
So here, by default,
it's going to use the ID

72
00:03:41,030 --> 00:03:42,510
column as the foreign key.

73
00:03:45,950 --> 00:03:48,170
We can also create a
foreign key constraint

74
00:03:48,170 --> 00:03:54,460
by using the table constraint
syntax, like you see here.

75
00:03:54,460 --> 00:03:55,940
Another problem
that you often run

76
00:03:55,940 --> 00:03:58,500
into with relational
database tables

77
00:03:58,500 --> 00:04:01,280
is you have orphan records.

78
00:04:01,280 --> 00:04:02,790
Let me show you what that means.

79
00:04:02,790 --> 00:04:05,770
Here we have our Movies
table, and Promotions table,

80
00:04:05,770 --> 00:04:08,700
and a movie with an ID
of 6, and a promotion

81
00:04:08,700 --> 00:04:11,900
associated with that movie.

82
00:04:11,900 --> 00:04:16,829
What happens when that movie
of id of 6 gets deleted?

83
00:04:16,829 --> 00:04:20,250
Well, that promotion
still sticks around.

84
00:04:20,250 --> 00:04:23,720
Yet, it has no movie
it's associated with.

85
00:04:23,720 --> 00:04:27,470
It's called an orphan
record, and it's bad data.

86
00:04:31,350 --> 00:04:32,920
The solution to
orphan records is

87
00:04:32,920 --> 00:04:36,060
using a foreign key
constraint, which we've already

88
00:04:36,060 --> 00:04:38,470
added to our Promotions table.

89
00:04:38,470 --> 00:04:41,810
So if we go to
delete a movie that

90
00:04:41,810 --> 00:04:44,250
has a promotion
associated with it,

91
00:04:44,250 --> 00:04:46,290
our database isn't
going to let us.

92
00:04:46,290 --> 00:04:50,610
It's going to give us back an
error, which looks like this.

93
00:04:50,610 --> 00:04:53,820
Notice this error message
at the bottom even tells us,

94
00:04:53,820 --> 00:04:56,230
"Key id equals 6 is
still referenced

95
00:04:56,230 --> 00:04:59,060
from the table 'promotions'."

96
00:04:59,060 --> 00:05:00,590
So if we want to
delete this movie,

97
00:05:00,590 --> 00:05:02,870
we first need to
delete the promotion

98
00:05:02,870 --> 00:05:05,270
with the movie id equals 6.

99
00:05:05,270 --> 00:05:09,220
And then we can delete the movie,
and the database will let us.

100
00:05:12,140 --> 00:05:14,290
Another way we might end
up with orphan records

101
00:05:14,290 --> 00:05:18,400
in our database is if we
drop a table and other tables

102
00:05:18,400 --> 00:05:21,380
are referencing
items in that table.

103
00:05:21,380 --> 00:05:23,510
So if we try to drop
the table Movies,

104
00:05:23,510 --> 00:05:27,090
it would error out,
telling us the constraint

105
00:05:27,090 --> 00:05:31,530
in our Promotions table
depends on the table Movies.

106
00:05:31,530 --> 00:05:35,060
So we first have to drop
the Promotions table,

107
00:05:35,060 --> 00:05:37,670
and then we can drop
the Movies table.

108
00:05:41,300 --> 00:05:44,490
I want to teach you
one last constraint.

109
00:05:44,490 --> 00:05:46,260
Here we are in our
Movies table, and we

110
00:05:46,260 --> 00:05:48,670
have that duration column back.

111
00:05:48,670 --> 00:05:52,980
And we can put any number into
that duration column, even

112
00:05:52,980 --> 00:05:54,960
negative numbers.

113
00:05:54,960 --> 00:05:56,620
But that doesn't make any sense.

114
00:05:56,620 --> 00:06:03,410
The Wolfman Lives is not
negative 10 minutes long.

115
00:06:03,410 --> 00:06:07,050
The check constraint allows
us to validate the value that

116
00:06:07,050 --> 00:06:09,070
can be placed in the column.

117
00:06:09,070 --> 00:06:12,680
So in this case,
we can say, check —

118
00:06:12,680 --> 00:06:17,060
that's the check constraint —
duration greater than zero.

119
00:06:17,060 --> 00:06:20,150
And then if we go to
insert a movie that

120
00:06:20,150 --> 00:06:22,610
has a duration that's
negative, we'll

121
00:06:22,610 --> 00:06:25,531
get back this error saying
that we violated the check

122
00:06:25,531 --> 00:06:26,030
constraint.

123
00:06:30,892 --> 00:06:32,600
Time for you to jump
into the challenges,

124
00:06:32,600 --> 00:06:35,760
because you only truncate once.

125
00:06:35,760 --> 00:06:39,610
And I'll see you
in the next level.

126
00:06:39,610 --> 00:06:42,392
Enjoying your constraints —

127
00:06:42,392 --> 00:06:43,600
Where are you going with this?

128
00:06:43,600 --> 00:06:45,400
I don't know.

