1
00:00:02,029 --> 00:00:02,830
Welcome back.

2
00:00:02,830 --> 00:00:04,621
In this section, we're
going to look deeper

3
00:00:04,621 --> 00:00:06,170
at aggregate functions
and figure out

4
00:00:06,170 --> 00:00:10,730
how to filter data to provide
more accurate results.

5
00:00:10,730 --> 00:00:12,780
Here we are back in
our Movies table.

6
00:00:12,780 --> 00:00:17,840
Notice we've added a genre
column with romance and horror.

7
00:00:17,840 --> 00:00:21,510
What if we wanted to find
the cost of all these movies

8
00:00:21,510 --> 00:00:24,080
but grouped by genre?

9
00:00:24,080 --> 00:00:27,130
So, the cost of all romance
movies, and the cost

10
00:00:27,130 --> 00:00:28,780
of all horror movies?

11
00:00:28,780 --> 00:00:31,050
If we use the sum
aggregate function

12
00:00:31,050 --> 00:00:33,530
like we did before and
just summed up the cost,

13
00:00:33,530 --> 00:00:35,800
it would be the cost
of all the movies.

14
00:00:35,800 --> 00:00:37,180
But we don't want that.

15
00:00:37,180 --> 00:00:40,820
How would we get just the cost
of romance and horror grouped

16
00:00:40,820 --> 00:00:43,360
together?

17
00:00:43,360 --> 00:00:46,600
We do this using
the group by clause.

18
00:00:46,600 --> 00:00:49,120
So down in our select
statement, first, we

19
00:00:49,120 --> 00:00:53,930
specify the genre, because we
want that to be listed next

20
00:00:53,930 --> 00:00:55,820
to the cost.

21
00:00:55,820 --> 00:00:59,800
And then we say group by genre.

22
00:00:59,800 --> 00:01:01,620
As you can see,
what this returns

23
00:01:01,620 --> 00:01:06,470
is a list of all the genres and
a sum total of the cost of each

24
00:01:06,470 --> 00:01:06,970
of them.

25
00:01:10,120 --> 00:01:13,100
The recipe for using
genre looks something

26
00:01:13,100 --> 00:01:15,810
like this, where we
have to specify a column

27
00:01:15,810 --> 00:01:18,900
name, an aggregate function,
and then at the bottom,

28
00:01:18,900 --> 00:01:20,770
specify what to group it by.

29
00:01:23,930 --> 00:01:27,230
We've gone ahead and built out
a larger Movies table with more

30
00:01:27,230 --> 00:01:29,380
movies and more genres.

31
00:01:29,380 --> 00:01:32,600
Notice we now have a
comedy genre in there.

32
00:01:32,600 --> 00:01:35,090
If we run our same
select statement,

33
00:01:35,090 --> 00:01:37,350
you can see we get
back the genres

34
00:01:37,350 --> 00:01:41,320
and the total cost of all
the movies in those genres.

35
00:01:41,320 --> 00:01:43,760
But what if we
only wanted genres

36
00:01:43,760 --> 00:01:47,830
that appear more than once
to be a part of our result?

37
00:01:47,830 --> 00:01:50,410
In this case, we only
have one comedy film.

38
00:01:50,410 --> 00:01:52,600
So, how could we filter
that out of the results,

39
00:01:52,600 --> 00:01:57,900
to only have groups that
have two genres in them?

40
00:01:57,900 --> 00:02:00,940
We can do this using
the having clause.

41
00:02:00,940 --> 00:02:03,450
In this case, right under
our group by statement,

42
00:02:03,450 --> 00:02:08,449
we can say having count
star greater than one,

43
00:02:08,449 --> 00:02:11,230
which means only
list groups that

44
00:02:11,230 --> 00:02:14,420
have more than one row
associated with them.

45
00:02:14,420 --> 00:02:17,090
In this case, comedy
only has one row,

46
00:02:17,090 --> 00:02:22,190
so it doesn't get
listed in our result.

47
00:02:22,190 --> 00:02:24,350
Adding to our
recipe, you can see

48
00:02:24,350 --> 00:02:27,650
we've added the having clause
after our group by clause,

49
00:02:27,650 --> 00:02:30,330
and it needs an aggregate
function, column name,

50
00:02:30,330 --> 00:02:32,720
operator, and value.

51
00:02:32,720 --> 00:02:35,050
You might also
notice we have where

52
00:02:35,050 --> 00:02:37,270
in here, which can
be useful when you're

53
00:02:37,270 --> 00:02:38,490
doing these types of queries.

54
00:02:41,650 --> 00:02:43,460
For example, what
if we only wanted

55
00:02:43,460 --> 00:02:48,130
to count movies who have grossed
at least a million dollars?

56
00:02:48,130 --> 00:02:49,840
We would use a SQL
statement, which

57
00:02:49,840 --> 00:02:51,780
looks something like this.

58
00:02:51,780 --> 00:02:53,890
So, let's walk through
the execution of this.

59
00:02:53,890 --> 00:02:56,510
First, when it hits
that where clause,

60
00:02:56,510 --> 00:02:58,650
it filters out all
the movies that are

61
00:02:58,650 --> 00:03:00,440
less than a million dollars.

62
00:03:00,440 --> 00:03:03,450
In this case, it's Gone with
the Wind and Some Scary Movie

63
00:03:03,450 --> 00:03:04,540
at the bottom.

64
00:03:04,540 --> 00:03:06,730
And then using
the having clause,

65
00:03:06,730 --> 00:03:08,580
it'll filter out any
of the groups that

66
00:03:08,580 --> 00:03:10,790
only have one movie in them.

67
00:03:10,790 --> 00:03:12,892
In this case, it's our
Not So Funny Movie.

68
00:03:12,892 --> 00:03:14,600
And here's the result
that gets returned.

69
00:03:18,710 --> 00:03:20,060
That's all I got for level one.

70
00:03:20,060 --> 00:03:22,976
It's time for you to have some
fun with group by and having

71
00:03:22,976 --> 00:03:23,725
in the challenges.

72
00:03:26,390 --> 00:03:30,470
Regardless or not, if there
are null values — regardless if

73
00:03:30,470 --> 00:03:31,640
there are null values.

74
00:03:31,640 --> 00:03:32,770
I can do it.

75
00:03:32,770 --> 00:03:35,130
Without further ado.

76
00:03:35,130 --> 00:03:37,340
Group by claws.

77
00:03:37,340 --> 00:03:38,890
Claws.

