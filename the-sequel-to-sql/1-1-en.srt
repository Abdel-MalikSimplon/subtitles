1
00:00:00,500 --> 00:00:03,160
[SINGING] So you learned
your database ABCs —

2
00:00:03,160 --> 00:00:05,440
more than foreign
and primary keys.

3
00:00:05,440 --> 00:00:07,200
Aggregate functions
you'll wax within —

4
00:00:07,200 --> 00:00:09,180
they're count, sum,
average, max, and min.

5
00:00:09,180 --> 00:00:11,400
Make it sleek,
add a few constraints

6
00:00:11,400 --> 00:00:13,410
to stop unique
and null complaints.

7
00:00:13,410 --> 00:00:15,410
Use check, joins, and
a few subqueries.

8
00:00:15,410 --> 00:00:20,300
The Sequel to SQL
is the bee's knees.

9
00:00:24,220 --> 00:00:26,050
You're watching
The Sequel to SQL.

10
00:00:26,050 --> 00:00:27,190
I'm Gregg Pollack.

11
00:00:27,190 --> 00:00:28,830
And if you're a
beginner to SQL, make

12
00:00:28,830 --> 00:00:32,280
sure you've taken
our Try SQL course.

13
00:00:32,280 --> 00:00:34,360
Otherwise, if you
already know the basics,

14
00:00:34,360 --> 00:00:36,042
you're in the right place.

15
00:00:36,042 --> 00:00:38,000
In this first level,
we're going to take a look

16
00:00:38,000 --> 00:00:42,100
at common aggregate functions.

17
00:00:42,100 --> 00:00:44,470
So here's our Movies database.

18
00:00:44,470 --> 00:00:46,680
How would we find
the total number

19
00:00:46,680 --> 00:00:49,430
of rows in this Movies table?

20
00:00:49,430 --> 00:00:52,710
Well, we could select
all the information out

21
00:00:52,710 --> 00:00:55,050
of the Movies table and
then programmatically,

22
00:00:55,050 --> 00:00:57,320
in whatever we're
using, count the number

23
00:00:57,320 --> 00:00:59,110
of rows that were returned.

24
00:00:59,110 --> 00:01:03,370
But there's a better
way to do this.

25
00:01:03,370 --> 00:01:07,160
And that is using the
count aggregate function.

26
00:01:07,160 --> 00:01:08,580
You see that syntax down there?

27
00:01:08,580 --> 00:01:10,900
We say select count,

28
00:01:10,900 --> 00:01:13,340
put a star in between
two parentheses,

29
00:01:13,340 --> 00:01:16,760
and that's going to give
us the total number of rows

30
00:01:16,760 --> 00:01:20,210
in this Movies table —
in this case, four.

31
00:01:20,210 --> 00:01:24,040
It's worth noting that count
star will count all the rows,

32
00:01:24,040 --> 00:01:26,510
regardless of any null values.

33
00:01:29,830 --> 00:01:32,000
In this level, we're going
to take a look at five

34
00:01:32,000 --> 00:01:33,750
different aggregate functions.

35
00:01:33,750 --> 00:01:36,080
And here are their recipes.

36
00:01:36,080 --> 00:01:37,560
First, there's count.

37
00:01:37,560 --> 00:01:39,200
We saw that a minute ago.

38
00:01:39,200 --> 00:01:42,910
We can also add up
a column using sum.

39
00:01:42,910 --> 00:01:47,230
We can find the average
of a column using average.

40
00:01:47,230 --> 00:01:50,670
We can find the largest
value in a column using max.

41
00:01:50,670 --> 00:01:55,590
Or we can find the smallest
value in a column using min.

42
00:01:55,590 --> 00:01:59,115
These last four are only going
to work if your column contains

43
00:01:59,115 --> 00:01:59,615
numbers.

44
00:02:03,250 --> 00:02:05,960
So before, we used count
star to signify that we

45
00:02:05,960 --> 00:02:08,479
wanted to count all the rows.

46
00:02:08,479 --> 00:02:11,900
But we can also put a column
name inside of our count

47
00:02:11,900 --> 00:02:13,450
aggregate function.

48
00:02:13,450 --> 00:02:15,690
In this case, if
we do count title,

49
00:02:15,690 --> 00:02:18,390
it's going to count
all of the rows that

50
00:02:18,390 --> 00:02:22,080
have a title which are not
null — in this case, three.

51
00:02:27,010 --> 00:02:31,570
Next, how do we find the total
cost of producing all our movies?

52
00:02:31,570 --> 00:02:36,290
Well, we need to add up
all of the cost column.

53
00:02:36,290 --> 00:02:38,680
We can do that using the
sum aggregate function.

54
00:02:38,680 --> 00:02:42,970
We'll say select sum
cost from Movies.

55
00:02:42,970 --> 00:02:45,720
It'll add up all the
values in the cost column

56
00:02:45,720 --> 00:02:50,800
and give us back this result.

57
00:02:50,800 --> 00:02:53,180
What if we wanted to find
the average number of tickets

58
00:02:53,180 --> 00:02:57,070
sold for all movies,
given this database table?

59
00:02:57,070 --> 00:03:01,450
We could run select
average tickets from Movies

60
00:03:01,450 --> 00:03:07,820
and it would return 1,017.

61
00:03:07,820 --> 00:03:10,250
What if we wanted to find
the number of tickets

62
00:03:10,250 --> 00:03:14,560
sold for the most popular movie
and the least popular movie?

63
00:03:14,560 --> 00:03:19,000
In this case, we could do
select max tickets from Movies

64
00:03:19,000 --> 00:03:21,580
and we would get back 1,500.

65
00:03:21,580 --> 00:03:25,970
And we could also select
min tickets from Movies

66
00:03:25,970 --> 00:03:28,670
to get the least
number of tickets sold.

67
00:03:28,670 --> 00:03:30,980
Max returns the highest
value in that column,

68
00:03:30,980 --> 00:03:32,820
and min returns
the lowest value.

69
00:03:35,960 --> 00:03:37,620
When it comes to
aggregate functions,

70
00:03:37,620 --> 00:03:41,180
we can combine them to get back
different pieces of information

71
00:03:41,180 --> 00:03:43,350
all at the same time.

72
00:03:43,350 --> 00:03:46,070
For example, here's max and
min in the same statement.

73
00:03:51,177 --> 00:03:52,760
Now it's time for
you to have some fun

74
00:03:52,760 --> 00:03:54,830
with aggregate functions
in the challenges.

75
00:03:54,830 --> 00:03:56,690
And, hey, while
you're out, maybe

76
00:03:56,690 --> 00:03:58,710
check out The Case of
the Insignificant White

77
00:03:58,710 --> 00:04:02,350
Space at a Code School
theater near you.

78
00:04:02,350 --> 00:04:06,320
It's not really a movie, but
it's kind of funny, isn't it?

