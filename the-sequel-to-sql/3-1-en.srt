1
00:00:00,000 --> 00:00:03,210
[SINGING] So you learned
your database ABCs —

2
00:00:03,210 --> 00:00:05,440
more than foreign
and primary keys.

3
00:00:05,440 --> 00:00:07,380
Aggregate functions
you'll wax within —

4
00:00:07,380 --> 00:00:09,180
they're count, sum,
average, max, and min.

5
00:00:09,180 --> 00:00:11,400
Make it sleek,
add a few constraints

6
00:00:11,400 --> 00:00:13,372
to stop unique
and null complaints.

7
00:00:13,372 --> 00:00:15,420
Use check, joins, and
a few subqueries.

8
00:00:15,420 --> 00:00:21,330
The Sequel to SQL
is the bee's knees.

9
00:00:24,020 --> 00:00:25,640
You're watching
The Sequel to SQL.

10
00:00:25,640 --> 00:00:27,610
I'm Gregg Pollack,
and this is level three,

11
00:00:27,610 --> 00:00:29,890
where we're going to be
talking about relationships

12
00:00:29,890 --> 00:00:32,859
and normalization.

13
00:00:32,859 --> 00:00:34,400
The movies application
we're building

14
00:00:34,400 --> 00:00:37,100
has a form that looks like
this that allows someone

15
00:00:37,100 --> 00:00:39,120
to create a new movie.

16
00:00:39,120 --> 00:00:42,860
You can see we put in the title,
the genre, and the movie's

17
00:00:42,860 --> 00:00:43,860
duration.

18
00:00:43,860 --> 00:00:48,930
So for Peter Pan, you can see
we can click multiple genres.

19
00:00:48,930 --> 00:00:52,150
But how would we represent
the different genres

20
00:00:52,150 --> 00:00:54,830
in our current database table?

21
00:00:54,830 --> 00:00:57,180
Well, one way we can
do that is simply

22
00:00:57,180 --> 00:01:02,180
list each genre in the same
column separated by a comma.

23
00:01:02,180 --> 00:01:04,340
But what if we wanted
to pull all adventure

24
00:01:04,340 --> 00:01:05,700
movies from the database?

25
00:01:05,700 --> 00:01:08,910
We might do a SQL statement
that looks something like this.

26
00:01:08,910 --> 00:01:10,900
But it's only going
to return Robin Hood,

27
00:01:10,900 --> 00:01:13,180
it's not going to
return Peter Pan.

28
00:01:13,180 --> 00:01:15,800
So there's a problem
with doing it this way.

29
00:01:15,800 --> 00:01:19,440
Also it's going to be harder to
update these values separately.

30
00:01:19,440 --> 00:01:22,380
What if we want to take
out adventure and put

31
00:01:22,380 --> 00:01:26,680
in romance into that genre
column for Peter Pan?

32
00:01:26,680 --> 00:01:27,310
We're stuck.

33
00:01:31,360 --> 00:01:33,940
We can avoid these problems
by using some database

34
00:01:33,940 --> 00:01:35,450
normalization.

35
00:01:35,450 --> 00:01:38,310
Normalization is the process
of reducing duplication

36
00:01:38,310 --> 00:01:39,910
in database tables.

37
00:01:39,910 --> 00:01:43,050
And there's a couple
normal form rules

38
00:01:43,050 --> 00:01:44,650
that will help us do this.

39
00:01:44,650 --> 00:01:47,350
We're going to be talking
about the first two.

40
00:01:47,350 --> 00:01:49,710
The first one says
that tables must not

41
00:01:49,710 --> 00:01:53,140
contain repeating groups
of data in one column.

42
00:01:53,140 --> 00:01:55,840
We're obviously
violating that rule.

43
00:01:55,840 --> 00:01:58,570
The second normal form
rule says tables must not

44
00:01:58,570 --> 00:02:00,280
contain redundancy.

45
00:02:00,280 --> 00:02:03,825
Redundancy meaning unnecessary
repeating information.

46
00:02:07,630 --> 00:02:09,220
Right now in our
Movies table, we

47
00:02:09,220 --> 00:02:12,640
do have repeating groups
of data in the one column.

48
00:02:12,640 --> 00:02:14,210
This is bad.

49
00:02:14,210 --> 00:02:17,490
So if we apply the
first normal form rule,

50
00:02:17,490 --> 00:02:20,830
we would end up with a table
that looks something like this.

51
00:02:20,830 --> 00:02:23,740
Notice we have Peter
Pan listed twice,

52
00:02:23,740 --> 00:02:27,080
one for each of its genres.

53
00:02:27,080 --> 00:02:28,490
Now, this is fine.

54
00:02:28,490 --> 00:02:31,000
This satisfies the
first normal form.

55
00:02:31,000 --> 00:02:32,860
But we still have problems here.

56
00:02:32,860 --> 00:02:34,660
When we update a
movie's duration,

57
00:02:34,660 --> 00:02:38,815
now we have to update
every duplicate movie row.

58
00:02:38,815 --> 00:02:40,690
And it would make sense
for our Movies table

59
00:02:40,690 --> 00:02:42,960
to have a unique
constraint on the titles

60
00:02:42,960 --> 00:02:46,850
column, in which case, we
couldn't have duplicate titles

61
00:02:46,850 --> 00:02:48,730
like we do right now.

62
00:02:48,730 --> 00:02:52,920
So let's apply the second normal
form rule, meaning that tables

63
00:02:52,920 --> 00:02:55,180
must not contain
redundancy, meaning

64
00:02:55,180 --> 00:02:57,460
unnecessary repeating
information, which

65
00:02:57,460 --> 00:02:58,890
we do have right now.

66
00:03:02,300 --> 00:03:04,810
The first step to
eliminating this redundancy

67
00:03:04,810 --> 00:03:07,030
is to create a new
Movies table, which

68
00:03:07,030 --> 00:03:12,990
doesn't have a reference to
genre and each movie is unique.

69
00:03:12,990 --> 00:03:17,880
The second step is to create
a Genres table, where each

70
00:03:17,880 --> 00:03:21,090
of the genres is also unique.

71
00:03:21,090 --> 00:03:22,850
So even though Peter
Pan and Robin Hood

72
00:03:22,850 --> 00:03:26,060
both have the adventure genre,
here in the new Genres table

73
00:03:26,060 --> 00:03:28,430
that's only
represented by one row.

74
00:03:31,900 --> 00:03:32,400
Awesome.

75
00:03:32,400 --> 00:03:35,520
So we've got two new
tables, and both new tables

76
00:03:35,520 --> 00:03:38,650
contain no repeating entries.

77
00:03:38,650 --> 00:03:40,100
This is great.

78
00:03:40,100 --> 00:03:45,600
But we still don't know which
movie belongs to which genre.

79
00:03:45,600 --> 00:03:48,140
We're going to need
another table for that.

80
00:03:51,230 --> 00:03:53,800
We need a way to link
the data between one

81
00:03:53,800 --> 00:03:58,400
table and the other.

82
00:03:58,400 --> 00:04:01,540
This is called a join table.

83
00:04:01,540 --> 00:04:04,340
And creating a join table has
a naming convention, where

84
00:04:04,340 --> 00:04:07,710
we take the name of
the Movies table,

85
00:04:07,710 --> 00:04:11,330
underscore the name
of the Genres table.

86
00:04:11,330 --> 00:04:15,680
So that's going to be the
name of this new table.

87
00:04:15,680 --> 00:04:19,209
Inside the table, we're
going to have two fields.

88
00:04:19,209 --> 00:04:22,690
First, movie_id, which
references the primary key

89
00:04:22,690 --> 00:04:24,610
of the Movies table.

90
00:04:24,610 --> 00:04:29,370
And then second, genre_id,
which references the primary key

91
00:04:29,370 --> 00:04:31,220
of the Genres table.

92
00:04:31,220 --> 00:04:33,960
Both of these columns
are foreign keys

93
00:04:33,960 --> 00:04:39,310
because they reference
primary keys on other tables.

94
00:04:39,310 --> 00:04:41,970
Now we can start mapping
rows from the Movies table

95
00:04:41,970 --> 00:04:44,180
to rows from the Genres table.

96
00:04:44,180 --> 00:04:47,830
So we know that the movie
with id of 1, Don Juan

97
00:04:47,830 --> 00:04:49,570
has a genre of romance.

98
00:04:49,570 --> 00:04:53,280
So we put in that row 1 and 1.

99
00:04:53,280 --> 00:04:56,910
And we know that Peter Pan has
both adventure and fantasy.

100
00:04:56,910 --> 00:05:02,450
So we do 2, 2 and 2,
3 and so on until we

101
00:05:02,450 --> 00:05:04,690
have the proper mapping
between the two tables.

102
00:05:09,210 --> 00:05:12,710
To recap, now we've met the
two normalization form rules.

103
00:05:12,710 --> 00:05:16,310
Rule number one, where we don't
have repeating groups of data.

104
00:05:16,310 --> 00:05:18,420
And rule number
two, where tables

105
00:05:18,420 --> 00:05:20,045
don't contain any redundancy.

106
00:05:23,040 --> 00:05:25,260
Working with these
tables are pretty easy.

107
00:05:25,260 --> 00:05:26,800
If we need to update
movie duration,

108
00:05:26,800 --> 00:05:30,010
we update that in one place
here in the Movies table.

109
00:05:30,010 --> 00:05:32,310
And if we need to add
a genre to a movie.

110
00:05:32,310 --> 00:05:36,420
For example, adding the
genre fantasy to Robin Hood,

111
00:05:36,420 --> 00:05:40,660
we would insert a new value
into the Movie_Genres table

112
00:05:40,660 --> 00:05:43,180
with the values of 4 and 3.

113
00:05:45,900 --> 00:05:48,610
The only disadvantage of
splitting things up into tables

114
00:05:48,610 --> 00:05:51,270
now is gathering that
data back out has

115
00:05:51,270 --> 00:05:53,580
become a little more complex.

116
00:05:53,580 --> 00:05:57,050
For example, how would we find
the genres of the movie Peter

117
00:05:57,050 --> 00:05:57,860
Pan?

118
00:05:57,860 --> 00:06:00,290
Well, we'd first need
to look up the id.

119
00:06:00,290 --> 00:06:02,260
So we could do select
id from Movies,

120
00:06:02,260 --> 00:06:04,480
where title equals Peter Pan.

121
00:06:04,480 --> 00:06:05,670
That will fetch the id.

122
00:06:05,670 --> 00:06:09,410
Then using that id, we
can get the genre_ids

123
00:06:09,410 --> 00:06:13,790
from the Movie_Genres table,
where the movie id equals 2.

124
00:06:13,790 --> 00:06:16,160
And lastly, we can fetch
the names of the genres

125
00:06:16,160 --> 00:06:21,470
that it's mapped to, where
id equals 2 or id equals 3.

126
00:06:21,470 --> 00:06:22,850
Sweet.

127
00:06:22,850 --> 00:06:24,290
There's another
way we could write

128
00:06:24,290 --> 00:06:31,680
this, which is where id IN 2
comma 3, like you see there.

129
00:06:31,680 --> 00:06:35,310
It's just a simpler syntax if
you have multiple or conditions

130
00:06:35,310 --> 00:06:38,300
on the same column.

131
00:06:38,300 --> 00:06:39,780
If you're not an
absolute beginner

132
00:06:39,780 --> 00:06:41,590
when it comes to
writing SQL queries,

133
00:06:41,590 --> 00:06:43,330
you might know what's coming.

134
00:06:43,330 --> 00:06:46,070
Eventually, we'll figure
out how to write one query

135
00:06:46,070 --> 00:06:49,030
to get all the data out of
these three tables at once.

136
00:06:49,030 --> 00:06:53,360
But hold your horses, that'll
be coming up in the next level.

137
00:06:53,360 --> 00:06:55,170
For now, jump into
the challenges.

138
00:06:55,170 --> 00:06:57,550
And I'll see you in
the next section.

