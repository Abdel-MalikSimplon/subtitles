1
00:00:00,000 --> 00:00:26,810


2
00:00:26,810 --> 00:00:27,840
Welcome back.

3
00:00:27,840 --> 00:00:30,000
We've learned a lot of advanced
Ruby techniques in

4
00:00:30,000 --> 00:00:32,360
the first four levels of
Ruby that's Part 2.

5
00:00:32,360 --> 00:00:35,030
And now we'd like to take the
next two levels to put all of

6
00:00:35,030 --> 00:00:38,340
that together and build
a simple DSL.

7
00:00:38,340 --> 00:00:40,590
First let's talk about
what a DSL is.

8
00:00:40,590 --> 00:00:43,760
DSL stands for Domain Specific
Language, and it's a language

9
00:00:43,760 --> 00:00:46,130
that has terminology and
constructs designed for a

10
00:00:46,130 --> 00:00:47,550
specific domain.

11
00:00:47,550 --> 00:00:49,730
If you're familiar with Rails,
ActiveRecord is a good

12
00:00:49,730 --> 00:00:51,070
example of a DSL.

13
00:00:51,070 --> 00:00:53,800
It's designed specifically to
allow you to describe how

14
00:00:53,800 --> 00:00:56,070
objects are stored
in a database.

15
00:00:56,070 --> 00:00:59,420
We can further categorize DSLs
into external DSLs and

16
00:00:59,420 --> 00:01:01,160
internal DSLs.

17
00:01:01,160 --> 00:01:03,810
An external DSL is
a standalone DSL.

18
00:01:03,810 --> 00:01:05,940
If you're familiar with Cucumber
in the Ruby world,

19
00:01:05,940 --> 00:01:07,470
that's a good example.

20
00:01:07,470 --> 00:01:09,950
To implement an external DSL
requires a lot of work.

21
00:01:09,950 --> 00:01:13,140
You have to build a parser and
a compiler or run time, so

22
00:01:13,140 --> 00:01:15,210
we're not going to talk
about those here.

23
00:01:15,210 --> 00:01:17,780
What we'll build in this course
is an internal DSL.

24
00:01:17,780 --> 00:01:19,750
That's a DSL that's implemented
within another

25
00:01:19,750 --> 00:01:20,880
programming language.

26
00:01:20,880 --> 00:01:22,490
Turns out that Ruby
is really good at

27
00:01:22,490 --> 00:01:23,870
building internal DSLs.

28
00:01:23,870 --> 00:01:25,630
Let's see how we
might do that.

29
00:01:25,630 --> 00:01:28,830
Our sample DSL will be for
posting tweets to Twitter and

30
00:01:28,830 --> 00:01:30,900
we'll start out by designing
our DSL.

31
00:01:30,900 --> 00:01:33,520
What we'll do is simply write
out some code to figure out

32
00:01:33,520 --> 00:01:35,730
what our DSL might look like.

33
00:01:35,730 --> 00:01:37,750
Our code has to be valid
Ruby syntax.

34
00:01:37,750 --> 00:01:40,360
So we can use things like "do"
and "end" as we've done here.

35
00:01:40,360 --> 00:01:42,650
And when we run our code, we'd
like it to output the tweet

36
00:01:42,650 --> 00:01:43,900
that you see here.

37
00:01:43,900 --> 00:01:46,230


38
00:01:46,230 --> 00:01:49,040
Our first step to implement
our DSL is to define a

39
00:01:49,040 --> 00:01:50,160
tweet_as method.

40
00:01:50,160 --> 00:01:52,640
We see here that we need to be
able to call tweet_as with a

41
00:01:52,640 --> 00:01:55,230
user and pass a block to it.

42
00:01:55,230 --> 00:01:57,970
So we'll define our tweet_as
method, we'll save off the

43
00:01:57,970 --> 00:02:01,020
user, we'll create an empty
array to hold the contents of

44
00:02:01,020 --> 00:02:04,190
our tweet, and then we'll
yield to the block.

45
00:02:04,190 --> 00:02:06,630
Once the block's done executing,
we'll call a method

46
00:02:06,630 --> 00:02:09,220
that we haven't written yet
called submit_to_twitter.

47
00:02:09,220 --> 00:02:11,650
Inside the block we have
several methods--

48
00:02:11,650 --> 00:02:14,480
text, mention, hashtag
and link.

49
00:02:14,480 --> 00:02:16,210
And they all do very
similar things.

50
00:02:16,210 --> 00:02:19,290
They just take a string and they
add that content onto the

51
00:02:19,290 --> 00:02:21,170
tweet that we're building up.

52
00:02:21,170 --> 00:02:22,780
Now all that's left to
do is to define our

53
00:02:22,780 --> 00:02:24,740
submit_to_twitter method.

54
00:02:24,740 --> 00:02:27,320
All that's going to do is join
together the tweet content

55
00:02:27,320 --> 00:02:30,330
separated by spaces and then,
for the purposes of this

56
00:02:30,330 --> 00:02:33,040
example, print that content
out to the console.

57
00:02:33,040 --> 00:02:35,150
So with that, we can execute
our DSL code.

58
00:02:35,150 --> 00:02:37,270
And it'll work, but
it's not so great.

59
00:02:37,270 --> 00:02:39,640
All these methods that we've
just written are in the global

60
00:02:39,640 --> 00:02:42,300
name space and that's not really
a very good practice.

61
00:02:42,300 --> 00:02:44,610
How can we clean that up?

62
00:02:44,610 --> 00:02:47,370
First we'll create a tweet
class, and we'll move as many

63
00:02:47,370 --> 00:02:50,100
of those methods into the
tweet class as we can.

64
00:02:50,100 --> 00:02:52,670
In this case, submit_to_twitter,
text,

65
00:02:52,670 --> 00:02:55,850
mention, hashtag, link have
all moved into the class.

66
00:02:55,850 --> 00:02:58,150
They haven't changed their
implementations at all.

67
00:02:58,150 --> 00:03:00,720
But we've added a new initialize
method in the tweet

68
00:03:00,720 --> 00:03:03,300
to set the two instance
variables that we were adding

69
00:03:03,300 --> 00:03:05,100
to the global name
space earlier.

70
00:03:05,100 --> 00:03:08,110
Now in our tweet_as method, we
have to make a few changes.

71
00:03:08,110 --> 00:03:10,440
First of all, we're creating
a new tweet object-- we're

72
00:03:10,440 --> 00:03:12,760
passing that user into it.

73
00:03:12,760 --> 00:03:15,000
We're yielding the tweet object,
and then we're calling

74
00:03:15,000 --> 00:03:18,970
submit_to_twitter on the tweet
object once the block is done.

75
00:03:18,970 --> 00:03:20,380
Notice that we've done
one thing here.

76
00:03:20,380 --> 00:03:22,740
We've introduced a new
block parameter.

77
00:03:22,740 --> 00:03:25,770
And so this is going to change
the syntax of our DSL just a

78
00:03:25,770 --> 00:03:28,130
little bit.

79
00:03:28,130 --> 00:03:31,160
Now the tweet has to be passed
into our block as a parameter,

80
00:03:31,160 --> 00:03:33,550
and we have to specify tweet
dot in front of all the

81
00:03:33,550 --> 00:03:35,380
methods inside the block.

82
00:03:35,380 --> 00:03:38,020
So we've cleaned up our global
name space, but we've made our

83
00:03:38,020 --> 00:03:39,680
DSL syntax ugly.

84
00:03:39,680 --> 00:03:40,930
What can we do about that?

85
00:03:40,930 --> 00:03:43,620


86
00:03:43,620 --> 00:03:45,975
You might recall earlier when we
talked about instance_eval,

87
00:03:45,975 --> 00:03:48,680
that we had an example
very similar to this.

88
00:03:48,680 --> 00:03:52,120
So instead of using yield with
our block, let's capture the

89
00:03:52,120 --> 00:03:54,550
block being passed in
to tweet_as, and use

90
00:03:54,550 --> 00:03:57,270
instance_eval to execute the
block in the context of our

91
00:03:57,270 --> 00:03:58,540
tweet object.

92
00:03:58,540 --> 00:04:01,630
This allows us to remove that
blocked parameter and remove

93
00:04:01,630 --> 00:04:04,230
the tweet dot in front of all
of our methods inside the

94
00:04:04,230 --> 00:04:07,005
block, getting back to our
original clean syntax.

95
00:04:07,005 --> 00:04:10,650


96
00:04:10,650 --> 00:04:13,750
One last improvement we'd like
to make to the DSL is to allow

97
00:04:13,750 --> 00:04:15,260
those methods that
we call inside of

98
00:04:15,260 --> 00:04:16,890
our block to be chained.

99
00:04:16,890 --> 00:04:19,200
You might have noticed that
all of those methods are

100
00:04:19,200 --> 00:04:21,820
changing the state of the tweet,
but their return value

101
00:04:21,820 --> 00:04:23,330
isn't really important.

102
00:04:23,330 --> 00:04:26,570
All we have to do to implement
chaining is to take each of

103
00:04:26,570 --> 00:04:29,950
those methods and return
self at the end.

104
00:04:29,950 --> 00:04:32,490
This makes it so that when we
call the text method, the

105
00:04:32,490 --> 00:04:33,590
tweet object gets returned.

106
00:04:33,590 --> 00:04:36,490
And then we can call hashtag
or any of the other methods

107
00:04:36,490 --> 00:04:38,040
directly on that return value.

108
00:04:38,040 --> 00:04:41,680


109
00:04:41,680 --> 00:04:44,450
So now it's time for you to go
through some challenges and

110
00:04:44,450 --> 00:04:45,696
write a DSL of your own.

111
00:04:45,696 --> 00:04:48,880
And then we'll come back in
Level 6 and extend our DSL

112
00:04:48,880 --> 00:04:50,130
even further.

113
00:00:00,000 --> 00:00:00,000
00:04:50,130 --> 00:04:50,818

