1
00:00:03,930 --> 00:00:06,180
You're watching Git Real 2,
and this is level 5, where

2
00:00:06,180 --> 00:00:09,610
we're going to be talking
about submodules.

3
00:00:09,610 --> 00:00:12,200
If you're working on multiple
projects that solve similar

4
00:00:12,200 --> 00:00:16,210
problems, odds are you're going
to have some similar

5
00:00:16,210 --> 00:00:19,820
code, or may be some code
libraries that you want to be

6
00:00:19,820 --> 00:00:21,660
able to share between them.

7
00:00:21,660 --> 00:00:24,440
There's a couple different ways,
good and bad ways you

8
00:00:24,440 --> 00:00:25,720
can share code.

9
00:00:25,720 --> 00:00:30,750
First, you can copy the
libraries into each project as

10
00:00:30,750 --> 00:00:31,980
you need them.

11
00:00:31,980 --> 00:00:35,350
Only problem with this is that
you're going to make updates

12
00:00:35,350 --> 00:00:38,840
to them, maybe locally, and
there's no easy way to then

13
00:00:38,840 --> 00:00:40,910
push up your changes so
the other projects can

14
00:00:40,910 --> 00:00:42,490
get access to them.

15
00:00:42,490 --> 00:00:44,490
Also if you do things
this way libraries

16
00:00:44,490 --> 00:00:46,280
can quickly get outdated.

17
00:00:46,280 --> 00:00:49,660
Because you copied them in and
you might lose track of when

18
00:00:49,660 --> 00:00:52,930
it's time to maybe copy in
additional changes when new

19
00:00:52,930 --> 00:00:54,920
releases come about.

20
00:00:54,920 --> 00:00:57,600
Also another alternative, you
could post libraries on a

21
00:00:57,600 --> 00:00:59,260
central server.

22
00:00:59,260 --> 00:01:01,120
So they're up on a central
server, maybe they live in a

23
00:01:01,120 --> 00:01:03,790
separate directory separate
from your project.

24
00:01:03,790 --> 00:01:06,690
Unfortunately, this may make it
harder to test the library

25
00:01:06,690 --> 00:01:09,980
in the context of
each project.

26
00:01:09,980 --> 00:01:12,260
This is where Git sub
modules come in.

27
00:01:12,260 --> 00:01:14,290
Giving you a way too
easily share

28
00:01:14,290 --> 00:01:16,370
libraries across projects.

29
00:01:16,370 --> 00:01:19,550
submodules allow you to pull
down updates easily, so as

30
00:01:19,550 --> 00:01:22,360
that shared library gets
updated, you can pull down

31
00:01:22,360 --> 00:01:24,060
updates into your project.

32
00:01:24,060 --> 00:01:27,080
You can test your changes within
the context of the

33
00:01:27,080 --> 00:01:28,670
existing project.

34
00:01:28,670 --> 00:01:30,890
You can also share
changes easily.

35
00:01:30,890 --> 00:01:33,130
So if you're inside a project
and you make an update to that

36
00:01:33,130 --> 00:01:36,630
shared library, you can easily
push it up to the repo, and

37
00:01:36,630 --> 00:01:38,390
then pull it down to through
the other projects.

38
00:01:38,390 --> 00:01:41,540
And since a submodule is just
a Git repo that lives inside

39
00:01:41,540 --> 00:01:44,690
of your Git repo, you have a
history of changes that is

40
00:01:44,690 --> 00:01:47,130
independent of your project.

41
00:01:47,130 --> 00:01:50,210
Gregg and Jane are two coders
who are working on two

42
00:01:50,210 --> 00:01:53,340
separate projects, the aquarium
project and the pet

43
00:01:53,340 --> 00:01:54,910
shop project.

44
00:01:54,910 --> 00:01:59,610
And they want to be able to
share the CSS and JavaScript

45
00:01:59,610 --> 00:02:02,090
directories between the two.

46
00:02:02,090 --> 00:02:04,240
So for these, we're going
to create two

47
00:02:04,240 --> 00:02:06,160
different submodules.

48
00:02:06,160 --> 00:02:09,500
As I mentioned, submodules
are just independent Git

49
00:02:09,500 --> 00:02:10,780
repositories.

50
00:02:10,780 --> 00:02:14,130
So we create them just like we
would create any other Git

51
00:02:14,130 --> 00:02:18,800
repo and then we add them to the
aquarium, and the pet shop

52
00:02:18,800 --> 00:02:21,640
project as submodules.

53
00:02:21,640 --> 00:02:25,090
They're Git repositories inside
our Git repository.

54
00:02:25,090 --> 00:02:28,340
This way if Gregg is working
inside the aquarium project

55
00:02:28,340 --> 00:02:32,650
and he makes changes to the
CSS, and JavaScript sub

56
00:02:32,650 --> 00:02:35,730
modules, those changes can be
pushed up to the central

57
00:02:35,730 --> 00:02:37,110
repository.

58
00:02:37,110 --> 00:02:39,960
And then later on Jane, if she's
working in the pet shop

59
00:02:39,960 --> 00:02:44,580
project, can pull down those
changes into her project.

60
00:02:44,580 --> 00:02:48,030
This way updates can happen on
each of the projects and they

61
00:02:48,030 --> 00:02:51,680
can both contribute
to each other.

62
00:02:51,680 --> 00:02:54,440
Let's pretend we haven't linked
these projects to the sub

63
00:02:54,440 --> 00:02:56,050
modules yet.

64
00:02:56,050 --> 00:02:59,860
How do we first add a sub
module to a project?

65
00:02:59,860 --> 00:03:03,520
Well first, we have to
create that Git repo.

66
00:03:03,520 --> 00:03:07,220
Or if you're using a online
service like github, you would

67
00:03:07,220 --> 00:03:10,160
go and you would create
the repository there.

68
00:03:10,160 --> 00:03:12,710
Then you would go into your
project that's going to use

69
00:03:12,710 --> 00:03:16,520
that as a submodule and write
git submodule add, and

70
00:03:16,520 --> 00:03:20,820
specify the Git repository
address, like you see here.

71
00:03:20,820 --> 00:03:25,430
This command is going to first
clone the project into a CSS

72
00:03:25,430 --> 00:03:28,810
directory, inside your
current repository.

73
00:03:28,810 --> 00:03:32,190
And now if we run Git Status,
we'll see that it also created

74
00:03:32,190 --> 00:03:36,740
a git submodules file, that
we'll look inside in a minute.

75
00:03:36,740 --> 00:03:39,910
It also created a new
file called CSS.

76
00:03:39,910 --> 00:03:42,430
But it's not actually
a new file, that's

77
00:03:42,430 --> 00:03:44,880
actually a new directory.

78
00:03:44,880 --> 00:03:49,040
Then we need to commit both of
these and push it back up to

79
00:03:49,040 --> 00:03:50,080
our server.

80
00:03:50,080 --> 00:03:52,260
That's all we have
to do to add sub

81
00:03:52,260 --> 00:03:53,510
modules to our project.

82
00:03:56,020 --> 00:03:59,260
Here's what we see inside the
.gitmodules file that was

83
00:03:59,260 --> 00:04:00,860
created for us.

84
00:04:00,860 --> 00:04:04,870
You can see here it has
submodule CSS, then it specifies

85
00:04:04,870 --> 00:04:09,120
the path to this sub
module directory.

86
00:04:09,120 --> 00:04:13,800
And then we have the origin
or the URL of the origin

87
00:04:13,800 --> 00:04:14,920
repository.

88
00:04:14,920 --> 00:04:17,600
If we add additional sub
modules later, the

89
00:04:17,600 --> 00:04:21,370
configuration will be appended
to this file.

90
00:04:21,370 --> 00:04:24,040
Now let's walk through the
process of making an update to

91
00:04:24,040 --> 00:04:25,720
the files inside
of our submodule.

92
00:04:25,720 --> 00:04:27,070
Because there's two
things about it

93
00:04:27,070 --> 00:04:29,600
that aren't that intuitive.

94
00:04:29,600 --> 00:04:31,360
So first what we're
going to do is go

95
00:04:31,360 --> 00:04:33,590
into our CSS directory.

96
00:04:33,590 --> 00:04:36,200
Then we're going to check out
a branch, in this case the

97
00:04:36,200 --> 00:04:37,870
master branch.

98
00:04:37,870 --> 00:04:40,430
See, submodules by default
don't start at

99
00:04:40,430 --> 00:04:41,460
any branch at all.

100
00:04:41,460 --> 00:04:44,270
So we need to remember
to go to a branch.

101
00:04:44,270 --> 00:04:47,310
Then we can make changes
to our files.

102
00:04:47,310 --> 00:04:49,310
Then if we run get status,
you can see that

103
00:04:49,310 --> 00:04:51,020
we've made some changes.

104
00:04:51,020 --> 00:04:53,640
Then we'll make a commit
and then finally

105
00:04:53,640 --> 00:04:56,080
push that submodule.

106
00:04:56,080 --> 00:04:57,880
Now there's one more
thing we have to do

107
00:04:57,880 --> 00:04:58,830
before we're done here.

108
00:04:58,830 --> 00:05:02,100
Which is, also push
our parent repo.

109
00:05:02,100 --> 00:05:03,900
Let's take a look at that.

110
00:05:03,900 --> 00:05:06,380
So if we jump back into our
parent directory and we do a

111
00:05:06,380 --> 00:05:09,790
get status, we're going to see
that it knows there's some new

112
00:05:09,790 --> 00:05:12,950
commits inside of the
CSS directory.

113
00:05:12,950 --> 00:05:17,570
So from here, we need to
add that CSS directory.

114
00:05:17,570 --> 00:05:21,900
And commit it, basically saying
that we updated, then

115
00:05:21,900 --> 00:05:23,420
make a commit.

116
00:05:23,420 --> 00:05:27,830
And lastly, push that
parent repository.

117
00:05:27,830 --> 00:05:30,660
The reason why we have to update
the parent, is that the

118
00:05:30,660 --> 00:05:34,990
parent has reference to a commit
on our submodule.

119
00:05:34,990 --> 00:05:39,140
And if we update that sub
module, we need to change the

120
00:05:39,140 --> 00:05:43,090
pointer on the parent to point
to the new commit that's on

121
00:05:43,090 --> 00:05:44,390
the head of that submodule.

122
00:05:47,110 --> 00:05:49,160
Now let's take a look at the
perspective of somebody

123
00:05:49,160 --> 00:05:53,360
installing a new git repo that
has some submodules in it.

124
00:05:53,360 --> 00:05:57,570
So here comes Gregg, he's going
to clone the aquarium project.

125
00:05:57,570 --> 00:05:59,500
Here's the directories he has.

126
00:05:59,500 --> 00:06:01,710
He gets the git modules
file, which has

127
00:06:01,710 --> 00:06:03,300
reference to the submodules.

128
00:06:03,300 --> 00:06:04,940
He gets all the project files.

129
00:06:04,940 --> 00:06:07,910
He also gets the CSS and
JavaScript directories, but if

130
00:06:07,910 --> 00:06:10,630
we look inside there, we'd
find them empty.

131
00:06:10,630 --> 00:06:14,930
That's because we need to
initialize the submodules.

132
00:06:14,930 --> 00:06:18,800
To do that he would run,
git submodule init.

133
00:06:18,800 --> 00:06:22,210
This is going to read the
.gitmodules file and add an

134
00:06:22,210 --> 00:06:25,190
entry to the local
git configuration

135
00:06:25,190 --> 00:06:26,920
for each submodule.

136
00:06:26,920 --> 00:06:29,970
It looks something like this.

137
00:06:29,970 --> 00:06:33,300
Then Gregg needs to run to
git submodule update.

138
00:06:33,300 --> 00:06:36,500
This is what's going to go out
onto the internet most likely

139
00:06:36,500 --> 00:06:38,910
and pull down those
submodules.

140
00:06:38,910 --> 00:06:40,900
It's going to clone
those submodules

141
00:06:40,900 --> 00:06:42,370
into our parent project.

142
00:06:42,370 --> 00:06:43,760
Now our submodules
have files.

143
00:06:46,960 --> 00:06:49,830
So Gregg pulled down our new
repository and let's say Gregg

144
00:06:49,830 --> 00:06:52,830
made some changes to our
submodules, to our CSS, or

145
00:06:52,830 --> 00:06:55,600
JavaScript directory,
and pushes those

146
00:06:55,600 --> 00:06:57,130
back up to the server.

147
00:06:57,130 --> 00:06:59,780
The next time Jane comes back
to the project and does a

148
00:06:59,780 --> 00:07:03,190
pull, she might notice
that the CSS sub

149
00:07:03,190 --> 00:07:04,650
modules been updated.

150
00:07:04,650 --> 00:07:07,150
As you see here.

151
00:07:07,150 --> 00:07:11,070
If she runs get status, again,
she's going to see that the

152
00:07:11,070 --> 00:07:14,050
CSS submodule has some
new commits on to it.

153
00:07:14,050 --> 00:07:17,710
And if she runs git diff, she
can see the parent project has

154
00:07:17,710 --> 00:07:22,120
been updated to reference a new
commit for our submodule.

155
00:07:22,120 --> 00:07:26,660
This is a cue that she needs
to run, git submodule update.

156
00:07:26,660 --> 00:07:29,190
Git submodule update is going
to go out to the git

157
00:07:29,190 --> 00:07:30,690
submodule repositories.

158
00:07:30,690 --> 00:07:33,460
And see if there's any commits
that need to be pulled down

159
00:07:33,460 --> 00:07:35,140
onto this local repository.

160
00:07:35,140 --> 00:07:37,610
Then if Jane runs, git status
again, she can see that her

161
00:07:37,610 --> 00:07:40,190
project is completely up to
date, and she's ready to start

162
00:07:40,190 --> 00:07:41,440
working on it.

163
00:07:43,570 --> 00:07:46,010
Now Jane needs to make some
changes to the submodule

164
00:07:46,010 --> 00:07:47,640
inside the CSS directory.

165
00:07:47,640 --> 00:07:50,430
So she goes and makes those
changes to those files.

166
00:07:50,430 --> 00:07:53,670
Then goes inside the CSS
directory, checks the git

167
00:07:53,670 --> 00:07:56,090
status, there's the file that
she changed, let's go ahead

168
00:07:56,090 --> 00:07:57,710
and add that to the staging.

169
00:07:57,710 --> 00:07:59,740
And then make a commit.

170
00:07:59,740 --> 00:08:02,060
Oh wait, there's one thing
though, there's one thing that

171
00:08:02,060 --> 00:08:03,240
she forgot.

172
00:08:03,240 --> 00:08:04,740
Do you see it?

173
00:08:04,740 --> 00:08:06,860
You see up there at the
top, it says, not

174
00:08:06,860 --> 00:08:10,240
currently on any branch.

175
00:08:10,240 --> 00:08:13,820
If you work with git sub
modules, likely you'll do this

176
00:08:13,820 --> 00:08:15,920
at some point as well.

177
00:08:15,920 --> 00:08:17,270
So how do we deal with it?

178
00:08:17,270 --> 00:08:21,030
Because we have this commit
that's not on a branch.

179
00:08:21,030 --> 00:08:25,070
If we try to push, well,
nothing's going to be pushed

180
00:08:25,070 --> 00:08:29,370
because the commit is
not on a branch.

181
00:08:29,370 --> 00:08:33,179
See every time we run git
submodule update, the code gets

182
00:08:33,179 --> 00:08:35,690
checked out in a
headless state.

183
00:08:35,690 --> 00:08:39,669
Which means, it's not pointing
at any particular branch.

184
00:08:39,669 --> 00:08:42,690
So if we make commits,
where do they go?

185
00:08:42,690 --> 00:08:44,250
They don't go on any branch,
which means we

186
00:08:44,250 --> 00:08:47,070
can't push them anywhere.

187
00:08:47,070 --> 00:08:48,800
Don't worry, if you make
this mistake there's

188
00:08:48,800 --> 00:08:49,940
a way to fix it.

189
00:08:49,940 --> 00:08:53,130
What Jane needs to do here is
associate the commit that we

190
00:08:53,130 --> 00:08:55,190
made onto a branch.

191
00:08:55,190 --> 00:08:57,170
So from here, we can
check out a branch.

192
00:08:57,170 --> 00:08:59,410
In this case, we're going
to check out master.

193
00:08:59,410 --> 00:09:02,540
And it even notices that we
have one commit that's not

194
00:09:02,540 --> 00:09:03,800
connected to any branches.

195
00:09:03,800 --> 00:09:06,530
And it gives us a suggestion on
how to create a new branch

196
00:09:06,530 --> 00:09:08,810
which include that commit.

197
00:09:08,810 --> 00:09:10,970
However, what we want
to do is simply run

198
00:09:10,970 --> 00:09:12,430
this commit on master.

199
00:09:12,430 --> 00:09:16,420
To do this, we simply can run
git merge, and then specify

200
00:09:16,420 --> 00:09:19,630
the hash for that commit.

201
00:09:19,630 --> 00:09:23,250
When we do that, that gets
run on our master branch.

202
00:09:23,250 --> 00:09:25,990
And if we run git log, we can
see that it's become a part of

203
00:09:25,990 --> 00:09:27,440
master history.

204
00:09:27,440 --> 00:09:30,710
Now Jane can safely push
that submodule.

205
00:09:30,710 --> 00:09:33,850
But remember that's not the only
thing she needs to do.

206
00:09:33,850 --> 00:09:37,470
After you push a submodule, you
need to then go up to the

207
00:09:37,470 --> 00:09:40,350
parent directory, and if we
run git status, we can see

208
00:09:40,350 --> 00:09:42,160
that there's been some
new commits there.

209
00:09:42,160 --> 00:09:46,590
So we need to simply add that
directory and then commit it,

210
00:09:46,590 --> 00:09:49,370
and push it.

211
00:09:49,370 --> 00:09:51,390
So when you make change the
submodules, you have to

212
00:09:51,390 --> 00:09:54,450
remember to push two different
repositories.

213
00:09:54,450 --> 00:09:57,420
First, you push the sub
module repository.

214
00:09:57,420 --> 00:10:01,510
And then you push the
parent repository.

215
00:10:01,510 --> 00:10:03,100
Step one and step two.

216
00:10:03,100 --> 00:10:06,590
However, if Jane in this case
had forgotten to push the sub

217
00:10:06,590 --> 00:10:10,350
module, and she just pushed
the parent repository.

218
00:10:10,350 --> 00:10:14,330
The next time Gregg runs git sub
module update, it's going

219
00:10:14,330 --> 00:10:16,560
to try to update
the submodule.

220
00:10:16,560 --> 00:10:19,750
And update it to the commit that
it has a reference to,

221
00:10:19,750 --> 00:10:20,940
that it just pulled down.

222
00:10:20,940 --> 00:10:26,660
But Jane forgot to commit
that particular update.

223
00:10:26,660 --> 00:10:29,830
So it fails, as you
can see here.

224
00:10:29,830 --> 00:10:34,350
So basically collaborators get
stuck until Jane goes back and

225
00:10:34,350 --> 00:10:36,060
she pushes up the submodule.

226
00:10:38,790 --> 00:10:41,330
So it's really important that
you remember to push twice

227
00:10:41,330 --> 00:10:43,360
when you're editing
submodules.

228
00:10:43,360 --> 00:10:44,855
If you're worried about
forgetting though, there's

229
00:10:44,855 --> 00:10:46,340
some options to help you.

230
00:10:46,340 --> 00:10:50,710
First, there's the recurse sub
modules option on git push.

231
00:10:50,710 --> 00:10:53,330
This will abort a push
if you haven't pushed

232
00:10:53,330 --> 00:10:55,020
the submodules yet.

233
00:10:55,020 --> 00:10:56,620
And this is something
you want to run

234
00:10:56,620 --> 00:10:57,870
from the parent directory.

235
00:11:01,600 --> 00:11:04,420
If you don't want to have to
worry about pushing twice, you

236
00:11:04,420 --> 00:11:07,530
can simply run your push command
with the recurse sub

237
00:11:07,530 --> 00:11:10,240
modules on demand option.

238
00:11:10,240 --> 00:11:15,270
What this is going to do is push
your parent repo and it's

239
00:11:15,270 --> 00:11:18,140
going to go to see if any of the
submodules need pushing.

240
00:11:18,140 --> 00:11:22,710
And if they do, it'll
push them as well.

241
00:11:22,710 --> 00:11:25,270
It's a good practice if you're
dealing with submodules to

242
00:11:25,270 --> 00:11:26,610
alias
 this command.

243
00:11:26,610 --> 00:11:29,800
So here we're aliasing
it as pushall.

244
00:11:29,800 --> 00:11:31,880
So when we ever push this
project, we would

245
00:11:31,880 --> 00:11:34,240
run git pushall.

246
00:11:34,240 --> 00:11:37,030
And if any of our submodules
need pushing, it's going to

247
00:11:37,030 --> 00:11:38,280
push those as well.

248
00:11:43,440 --> 00:11:45,220
If you don't get it,
don't worry.

249
00:11:45,220 --> 00:11:47,830
I didn't get submodules the
first time I tried to

250
00:11:47,830 --> 00:11:48,870
understand it either.

251
00:11:48,870 --> 00:11:51,720
So feel free to go back
and watch the video.

252
00:11:51,720 --> 00:11:54,500
Or maybe you'll get some
understanding when you start

253
00:11:54,500 --> 00:11:56,600
learning by doing in
the challenges.

254
00:11:56,600 --> 00:11:57,850
Good luck.