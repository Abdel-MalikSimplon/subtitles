1
00:00:00,000 --> 00:00:33,734
[MUSIC PLAYING]

2
00:00:33,734 --> 00:00:36,564
I'm Nick Walsh, and welcome to
Assembling Sass, Level One,

3
00:00:36,564 --> 00:00:37,794
Foundation.

4
00:00:37,794 --> 00:00:40,174
In Level One, we'll be
discussing why adding Sass to

5
00:00:40,174 --> 00:00:43,264
our workflows is advantageous,
and then talk about how we can

6
00:00:43,264 --> 00:00:47,174
change our CSS to the Sass
syntax including comments,

7
00:00:47,174 --> 00:00:50,014
importing, and nesting.

8
00:00:50,014 --> 00:00:52,524
So first up, let's talk
a bit about CSS.

9
00:00:52,524 --> 00:00:55,994
Not CSS was designed to be
simple and largely it is.

10
00:00:55,994 --> 00:00:58,624
But at size, we start to
run into some issues.

11
00:00:58,624 --> 00:01:00,694
Throughout our large style
sheets, we'll have slight

12
00:01:00,694 --> 00:01:03,934
variations of colors, numbers,
and properties that become

13
00:01:03,934 --> 00:01:07,064
incredibly difficult to change
over time, like if we wanted

14
00:01:07,064 --> 00:01:09,854
to change all shades
of blue to a red.

15
00:01:09,854 --> 00:01:13,074
Also, we have problems curbing
repetition as our stylesheet

16
00:01:13,074 --> 00:01:14,374
size grows.

17
00:01:14,374 --> 00:01:17,064
It's harder and harder to know
where to put new styles as

18
00:01:17,064 --> 00:01:18,934
things get very large.

19
00:01:18,934 --> 00:01:23,594
Also, base CSS has no good way
to go about handling multiple

20
00:01:23,594 --> 00:01:24,554
stylesheets.

21
00:01:24,554 --> 00:01:27,354
So either we have to take a
performance hit or we have one

22
00:01:27,354 --> 00:01:30,584
really large stylesheet.

23
00:01:30,584 --> 00:01:33,614
So because of these problems,
Sass comes in very handy.

24
00:01:33,614 --> 00:01:35,764
Now Sass stands for
Syntactically Awesome

25
00:01:35,764 --> 00:01:36,754
Stylesheets.

26
00:01:36,754 --> 00:01:40,244
And it looks a lot like CSS, but
adds a lot of extra stuff

27
00:01:40,244 --> 00:01:43,724
on top to help combat these
aforementioned issues.

28
00:01:43,724 --> 00:01:46,474
Now Sass is a preprocessor, kind
of like CoffeeScript and

29
00:01:46,474 --> 00:01:48,334
Haml, if you're familiar
with those.

30
00:01:48,334 --> 00:01:50,834
So we're going to be starting
with a Sass file.

31
00:01:50,834 --> 00:01:53,754
When we save it, it'll run
through a Sass compiler.

32
00:01:53,754 --> 00:01:56,094
And finally, a CSS file
will be output so the

33
00:01:56,094 --> 00:01:57,344
browser can read it.

34
00:01:59,744 --> 00:02:02,114
So real quick, a bit
of history on Sass.

35
00:02:02,114 --> 00:02:04,384
Sass was created by
Hampton Catlin.

36
00:02:04,384 --> 00:02:06,444
He's also the creator of Haml.

37
00:02:06,444 --> 00:02:09,114
And he wanted to bring the terse
syntax Haml brings to

38
00:02:09,114 --> 00:02:11,604
HTML to CSS as well.

39
00:02:11,604 --> 00:02:14,054
The primary developers on the
project have been Nathan

40
00:02:14,054 --> 00:02:15,984
Weizenbaum and Chris Epstein.

41
00:02:15,984 --> 00:02:18,524
And if you're fortunate enough
to work in Rails, it's already

42
00:02:18,524 --> 00:02:21,074
baked into the asset pipeline.

43
00:02:21,074 --> 00:02:24,054
Now a lot of people write
"SASS" in all caps.

44
00:02:24,054 --> 00:02:26,614
So it's important to note, if
you want to be taken seriously

45
00:02:26,614 --> 00:02:29,824
when saying "Sass," only
capitalize the first letter.

46
00:02:29,824 --> 00:02:32,374
Hampton has said before he likes
to intentionally not

47
00:02:32,374 --> 00:02:35,724
have shouty acronyms
on his projects.

48
00:02:35,724 --> 00:02:39,114
Let's start off talking a bit
about file extensions.

49
00:02:39,114 --> 00:02:42,243
.scss or Sassy CSS is
the default file

50
00:02:42,243 --> 00:02:43,844
extension for Sass.

51
00:02:43,844 --> 00:02:46,584
CSS doubles as a valid SCSS.

52
00:02:46,584 --> 00:02:49,364
So when starting off, you're
able to take any CSS you would

53
00:02:49,364 --> 00:02:53,094
normally write, save it as
.scss, and it compiles

54
00:02:53,094 --> 00:02:54,724
normally into Sass.

55
00:02:54,724 --> 00:02:57,594
Also, there's a second syntax
called the indented into

56
00:02:57,594 --> 00:02:59,314
syntax that's available
with Sass.

57
00:02:59,314 --> 00:03:00,704
But in the course, we're
going to stick to the

58
00:03:00,704 --> 00:03:03,404
default of Sassy CSS.

59
00:03:03,404 --> 00:03:06,964
So in this course, we're going
to be discussing a lot of SCSS

60
00:03:06,964 --> 00:03:10,314
code and then seeing what it
compiles down to in CSS.

61
00:03:10,314 --> 00:03:12,954
Whenever we have to show
SCSS code, it will look

62
00:03:12,954 --> 00:03:15,274
something like this.

63
00:03:15,274 --> 00:03:17,624
And then when we compile it
down to normal CSS, we'll

64
00:03:17,624 --> 00:03:19,784
represent it like this.

65
00:03:19,784 --> 00:03:21,544
Don't worry too much about
the stuff in here

66
00:03:21,544 --> 00:03:22,434
you don't know yet.

67
00:03:22,434 --> 00:03:24,084
We'll be covering what
all this means

68
00:03:24,084 --> 00:03:26,844
later in the course.

69
00:03:26,844 --> 00:03:31,124
So as we said before, since CSS
doubles as valid SCSS, we

70
00:03:31,124 --> 00:03:33,694
definitely recommend that you go
ahead and write styles like

71
00:03:33,694 --> 00:03:35,564
you're used to and slowly
incorporate new

72
00:03:35,564 --> 00:03:37,054
techniques as you go.

73
00:03:37,054 --> 00:03:39,014
You might get a little bogged
down if you try to incorporate

74
00:03:39,014 --> 00:03:40,264
everything at once.

75
00:03:42,734 --> 00:03:45,654
So our first conversion from
CSS to Sass is going to be

76
00:03:45,654 --> 00:03:46,724
through comments.

77
00:03:46,724 --> 00:03:50,654
In Sass, we're afforded a second
way to denote comments,

78
00:03:50,654 --> 00:03:53,064
double slash single
line comments.

79
00:03:53,064 --> 00:03:56,004
These type of comments in
Sass aren't compiled

80
00:03:56,004 --> 00:03:57,454
down to normal CSS.

81
00:03:57,454 --> 00:04:01,404
So in this case, we see we
have normal CSS comments

82
00:04:01,404 --> 00:04:04,224
following our single
line Sass comments.

83
00:04:04,224 --> 00:04:07,424
And when it's compiled down to
normal CSS, the Sass comments

84
00:04:07,424 --> 00:04:09,244
no longer appear.

85
00:04:09,244 --> 00:04:11,224
These comments come in
exceptionally handy when

86
00:04:11,224 --> 00:04:13,974
you're trying to separate our
your CSS document, as those

87
00:04:13,974 --> 00:04:15,914
cosmetic comments
aren't necessary

88
00:04:15,914 --> 00:04:18,934
for the final product.

89
00:04:18,934 --> 00:04:21,034
As we mentioned before, it's a
bit difficult to deal with

90
00:04:21,034 --> 00:04:22,984
multiple files in CSS.

91
00:04:22,984 --> 00:04:25,764
We're afforded either using
multiple link tags or using

92
00:04:25,764 --> 00:04:27,024
the @import rule.

93
00:04:27,024 --> 00:04:29,534
But historically, we've avoided
using the @import rule

94
00:04:29,534 --> 00:04:31,414
because it's not very
performant.

95
00:04:31,414 --> 00:04:34,324
The stylesheets can't download
in tandem and we have to wait

96
00:04:34,324 --> 00:04:36,394
for everything to load
before any styles are

97
00:04:36,394 --> 00:04:37,794
shown to the browser.

98
00:04:37,794 --> 00:04:39,524
When we use Sass though,
the @import

99
00:04:39,524 --> 00:04:40,654
rule is slightly different.

100
00:04:40,654 --> 00:04:45,294
We can import files that end in
.scss or .sass, and that

101
00:04:45,294 --> 00:04:48,204
importing happens during compile
time instead of on the

102
00:04:48,204 --> 00:04:49,424
client side.

103
00:04:49,424 --> 00:04:52,383
Also, using the @import rule
with Sass, we don't have to

104
00:04:52,383 --> 00:04:54,204
include a file extension.

105
00:04:54,204 --> 00:04:57,614
In this case, we have our
application.scss file and

106
00:04:57,614 --> 00:05:01,294
we're importing the
buttons.scss file.

107
00:05:01,294 --> 00:05:05,474
During compile time, the
application.scss file compiles

108
00:05:05,474 --> 00:05:08,304
down to application.css.

109
00:05:08,304 --> 00:05:12,234
And during compile, the
buttons.scss file is imported

110
00:05:12,234 --> 00:05:16,264
into application.scss, which
ultimately becomes part of

111
00:05:16,264 --> 00:05:17,514
application.css.

112
00:05:19,194 --> 00:05:22,694
However, when we have a separate
buttons.scss file,

113
00:05:22,694 --> 00:05:26,504
the compiler goes ahead and
makes a separate buttons.css

114
00:05:26,504 --> 00:05:30,154
file even though we're already
importing it into application.

115
00:05:30,154 --> 00:05:35,044
Now if we only want to include
buttons.scss as an import of

116
00:05:35,044 --> 00:05:37,024
application, this is
a bit of a problem.

117
00:05:37,024 --> 00:05:40,064
We don't need that
extra stylesheet.

118
00:05:40,064 --> 00:05:42,874
To combat this is Sass, we're
able to create partials.

119
00:05:42,874 --> 00:05:46,224
So we can rewrite our
buttons.scss file as a partial

120
00:05:46,224 --> 00:05:48,464
by starting it with
an underscore.

121
00:05:48,464 --> 00:05:51,244
Once we add the underscore,
it's still imported into

122
00:05:51,244 --> 00:05:55,594
application.scss normally,
but a button.css file

123
00:05:55,594 --> 00:05:57,424
is no longer created.

124
00:05:57,424 --> 00:06:00,374
So back in our application.scss
file, we don't have to change

125
00:06:00,374 --> 00:06:01,324
anything with our import.

126
00:06:01,324 --> 00:06:03,889
The import looks for the files
that I've specified here in

127
00:06:03,889 --> 00:06:05,484
the comments, so we're
still good to go

128
00:06:05,484 --> 00:06:08,364
with our new partial.

129
00:06:08,364 --> 00:06:09,884
Now that we laid the groundwork,
let's start

130
00:06:09,884 --> 00:06:12,204
getting into the really
useful bits of Sass.

131
00:06:12,204 --> 00:06:13,634
First up is nesting.

132
00:06:13,634 --> 00:06:16,644
So as you start writing CSS,
you're going to notice some

133
00:06:16,644 --> 00:06:18,464
patterns with your selectors.

134
00:06:18,464 --> 00:06:20,594
In this case, we have a
content declaration.

135
00:06:20,594 --> 00:06:24,014
And we also have scoped p
and h2 declarations to

136
00:06:24,014 --> 00:06:26,734
go along with it.

137
00:06:26,734 --> 00:06:29,214
So let's go ahead and convert
this over to a Sass file by

138
00:06:29,214 --> 00:06:31,304
copying the same
contents over.

139
00:06:31,304 --> 00:06:34,744
Using Sass, we're able to nest
these properties instead of

140
00:06:34,744 --> 00:06:35,954
defining them separately.

141
00:06:35,954 --> 00:06:37,734
So we have our content
declaration.

142
00:06:37,734 --> 00:06:39,439
And then inside of that,
we're going to nest

143
00:06:39,439 --> 00:06:41,474
our h2 and our p.

144
00:06:41,474 --> 00:06:44,304
At compile time, it's going to
go ahead and scope those as we

145
00:06:44,304 --> 00:06:46,024
initially had in
our normal CSS.

146
00:06:50,274 --> 00:06:53,824
Less common, but occasionally
useful, is the ability to nest

147
00:06:53,824 --> 00:06:57,124
certain types of properties
with matching namespaces.

148
00:06:57,124 --> 00:07:00,404
In this case, we have our text
decoration and text underline

149
00:07:00,404 --> 00:07:02,264
properties nested together.

150
00:07:02,264 --> 00:07:05,014
And when it compiles, it will
compile down to those specific

151
00:07:05,014 --> 00:07:05,924
properties.

152
00:07:05,924 --> 00:07:08,624
We can use this for things like
border and font as well.

153
00:07:12,974 --> 00:07:16,144
Another useful feature while
we're nesting is the ampersand

154
00:07:16,144 --> 00:07:17,684
or the parent selector.

155
00:07:17,684 --> 00:07:21,354
So normally, if we have our
callout block scoped inside of

156
00:07:21,354 --> 00:07:23,654
our content block, it
adds a space it

157
00:07:23,654 --> 00:07:25,354
creates that selector.

158
00:07:25,354 --> 00:07:29,224
If we use the ampersand in front
of our callout block,

159
00:07:29,224 --> 00:07:32,364
when it compiles, it uses that
reference to our initial

160
00:07:32,364 --> 00:07:35,784
parent selector, content, to
create a compound selector

161
00:07:35,784 --> 00:07:37,734
with no space in between.

162
00:07:37,734 --> 00:07:40,514
The difference between these two
declarations, as you may

163
00:07:40,514 --> 00:07:43,564
know, is that the first callout
that's scoped inside

164
00:07:43,564 --> 00:07:46,404
of content looks for a container
that has a class of

165
00:07:46,404 --> 00:07:50,214
callout inside of a container
that has a class of content,

166
00:07:50,214 --> 00:07:52,604
whereas the second looks for
a container that has both

167
00:07:52,604 --> 00:07:55,814
classes at the same time.

168
00:07:55,814 --> 00:07:58,924
Using the parent selector is
exceedingly useful in cases

169
00:07:58,924 --> 00:08:02,014
where we need to have pseudo
classes and pseudo elements

170
00:08:02,014 --> 00:08:03,304
like anchors.

171
00:08:03,304 --> 00:08:05,764
Here, I want to set an active
state and a hover

172
00:08:05,764 --> 00:08:06,794
state for my anchor.

173
00:08:06,794 --> 00:08:09,764
So I can use the parent selector
to go ahead and

174
00:08:09,764 --> 00:08:13,534
reference that anchor as we move
down and set new styles

175
00:08:13,534 --> 00:08:15,494
for those states.

176
00:08:15,494 --> 00:08:18,124
So with this parent selector
reference, we're not limited

177
00:08:18,124 --> 00:08:20,824
to using it as the first
part of a selector.

178
00:08:20,824 --> 00:08:23,794
With this bit of basic CSS, you
can see we have a sidebar

179
00:08:23,794 --> 00:08:24,584
declaration.

180
00:08:24,584 --> 00:08:27,014
And then later, we went
to scope it to user

181
00:08:27,014 --> 00:08:28,584
to change it slightly.

182
00:08:28,584 --> 00:08:31,364
However, we're changing sidebar
in a second scoping,

183
00:08:31,364 --> 00:08:35,034
things are disconnected, and
really it's not quite as

184
00:08:35,034 --> 00:08:37,734
coupled as we want it to be.

185
00:08:37,734 --> 00:08:40,674
So using our parent selector
reference, we're able to nest

186
00:08:40,674 --> 00:08:44,034
this change into our sidebar
declaration in Sass.

187
00:08:44,034 --> 00:08:47,394
We can go ahead and scope that
user's change inside.

188
00:08:47,394 --> 00:08:49,614
Our ampersand character
for the parent

189
00:08:49,614 --> 00:08:51,814
selector references .sidebar.

190
00:08:51,814 --> 00:08:54,404
And we use the user selector
first, so that when it

191
00:08:54,404 --> 00:08:56,414
compiles, it compiles
that same bit of

192
00:08:56,414 --> 00:08:59,324
CSS that we had before.

193
00:08:59,324 --> 00:09:01,794
So take note that when you nest
and combine the parent

194
00:09:01,794 --> 00:09:05,204
selector, the parents selector
reference context carries

195
00:09:05,204 --> 00:09:06,454
through depending
on your nesting.

196
00:09:09,134 --> 00:09:12,924
So this ampersand here, since
it's found inside of a nested

197
00:09:12,924 --> 00:09:16,554
h2 and our sidebar declaration,
has the reference

198
00:09:16,554 --> 00:09:18,844
of sidebar h2.

199
00:09:18,844 --> 00:09:21,674
So when we compile it, as you
can see, it compiles down to

200
00:09:21,674 --> 00:09:26,634
.users, .sidebar, h2 because
of that nesting context.

201
00:09:26,634 --> 00:09:29,894
So as you can see, nesting is
very easy and really helps

202
00:09:29,894 --> 00:09:33,194
clean up our code, but
it's dangerous.

203
00:09:33,194 --> 00:09:35,824
Sass adds a lot of extra
functionality and is very

204
00:09:35,824 --> 00:09:38,874
useful, but it doesn't help
us write good CSS.

205
00:09:38,874 --> 00:09:40,794
You should always check your
nesting to make sure you're

206
00:09:40,794 --> 00:09:43,864
not adding nesting levels
unnecessarily, as that will

207
00:09:43,864 --> 00:09:48,014
increase the specificity of your
selectors far too much.

208
00:09:48,014 --> 00:09:49,834
And here's what I
mean by that.

209
00:09:49,834 --> 00:09:53,424
In this case, we're nesting
everything down to the hover

210
00:09:53,424 --> 00:09:54,844
state for our anchor.

211
00:09:54,844 --> 00:09:57,324
When you see the compiled
CSS, we have a

212
00:09:57,324 --> 00:09:59,284
four level deep selector.

213
00:09:59,284 --> 00:10:01,124
And this specificity
is incredibly

214
00:10:01,124 --> 00:10:02,734
hard to override later.

215
00:10:06,204 --> 00:10:08,754
So as a tip, try limiting
your nesting the

216
00:10:08,754 --> 00:10:09,874
three or four levels.

217
00:10:09,874 --> 00:10:13,004
And if you have to go deeper,
consider refactoring your code

218
00:10:13,004 --> 00:10:15,664
to make use of extra classes.

219
00:10:15,664 --> 00:10:18,204
All right, you've made it the
end of Level One and it's time

220
00:10:18,204 --> 00:10:19,724
to get started on
the challenges.

221
00:10:19,724 --> 00:10:22,024
Make sure you reference the
slides as you move through the

222
00:10:22,024 --> 00:10:22,724
challenges.

223
00:10:22,724 --> 00:10:25,284
And definitely feel free to use
the hints if necessary.

224
00:10:25,284 --> 00:10:27,884
We don't want you to get stuck
in any one place for too long.

225
00:10:27,884 --> 00:10:29,134
Good luck.