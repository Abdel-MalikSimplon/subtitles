1
00:00:00,500 --> 00:00:02,620
[SINGING] Designing emails
can be really tough.

2
00:00:02,620 --> 00:00:05,070
Client preprocessors
can be pretty rough.

3
00:00:05,070 --> 00:00:07,370
To code email for
all their devices,

4
00:00:07,370 --> 00:00:09,540
cut the design into many slices.

5
00:00:09,540 --> 00:00:11,900
Mark it up in tables
with inline style,	

6
00:00:11,900 --> 00:00:14,230
with media queries
into one big file.

7
00:00:14,230 --> 00:00:16,580
To win, you'll train
and learn the details —

8
00:00:16,580 --> 00:00:17,830
Unmasking HTML Emails!

9
00:00:24,630 --> 00:00:25,440
Hello, everyone.

10
00:00:25,440 --> 00:00:27,500
Welcome to Unmasking
HTML Emails.

11
00:00:27,500 --> 00:00:29,120
I'm your instructor,
Dan Denney,

12
00:00:29,120 --> 00:00:30,830
and I'll be in
your corner as you

13
00:00:30,830 --> 00:00:36,020
learn how to write HTML and CSS
specifically for email clients.

14
00:00:36,020 --> 00:00:38,440
The best way to learn is by
doing, so in this course,

15
00:00:38,440 --> 00:00:40,720
we're going to take
a pre-designed email,

16
00:00:40,720 --> 00:00:42,950
set up for a large-screen
version and a small-screen

17
00:00:42,950 --> 00:00:46,250
version, and write the HTML
and CSS necessary for that

18
00:00:46,250 --> 00:00:49,869
to display in email clients.

19
00:00:49,869 --> 00:00:51,410
In this particular
level, we're going

20
00:00:51,410 --> 00:00:54,330
to focus on creating the
header for the large-screen

21
00:00:54,330 --> 00:00:56,870
version of the email.

22
00:00:56,870 --> 00:00:59,370
The skills that you're going
to need to complete this course

23
00:00:59,370 --> 00:01:03,770
are a working knowledge of HTML
and CSS, CSS media queries,

24
00:01:03,770 --> 00:01:06,540
and we're going to have you use
some external resources in order

25
00:01:06,540 --> 00:01:11,140
to complete the code necessary
to create this email.

26
00:01:11,140 --> 00:01:14,850
At its core, an HTML
email is an HTML file.

27
00:01:14,850 --> 00:01:16,582
If any of this code
looks unfamiliar,

28
00:01:16,582 --> 00:01:18,290
we may want to have
you first get started

29
00:01:18,290 --> 00:01:20,700
by taking Front-end
Foundations to learn

30
00:01:20,700 --> 00:01:23,970
HTML and CSS, or
Journey Into Mobile

31
00:01:23,970 --> 00:01:27,800
to learn CSS media queries.

32
00:01:27,800 --> 00:01:30,370
The code that we write is
viewed in email clients.

33
00:01:30,370 --> 00:01:32,190
These can be web-based
clients, in which you

34
00:01:32,190 --> 00:01:35,870
would visit a URL, like
gmail.com, to access

35
00:01:35,870 --> 00:01:39,150
your email in Gmail, or
yahoo.com in order to access

36
00:01:39,150 --> 00:01:41,400
your email in Yahoo Mail.

37
00:01:41,400 --> 00:01:43,630
The other type of client
are native applications.

38
00:01:43,630 --> 00:01:47,020
One popular version of this
for Microsoft operating systems

39
00:01:47,020 --> 00:01:52,030
is Microsoft Outlook, and one
popular version for iOS clients

40
00:01:52,030 --> 00:01:54,750
is the Mailbox application.

41
00:01:54,750 --> 00:01:59,010
Each of these would be used to
access mail for many accounts.

42
00:01:59,010 --> 00:02:00,600
In modern front-end
development, we're

43
00:02:00,600 --> 00:02:03,110
used to writing code that
is viewed in browsers.

44
00:02:03,110 --> 00:02:05,240
Those browsers use
rendering engines

45
00:02:05,240 --> 00:02:09,990
in order to interpret the
HTML and CSS that we write.

46
00:02:09,990 --> 00:02:12,130
Email clients have
this same process,

47
00:02:12,130 --> 00:02:15,180
but they have an
additional step too.

48
00:02:15,180 --> 00:02:18,465
They use a preprocessor that
will actually change your HTML.

49
00:02:21,650 --> 00:02:23,500
Let's take a look
at how preprocessors

50
00:02:23,500 --> 00:02:25,360
affect the code that we write.

51
00:02:25,360 --> 00:02:28,780
Their original intention was
to protect the operating system

52
00:02:28,780 --> 00:02:31,560
from code that could be
executed in an application

53
00:02:31,560 --> 00:02:34,980
and have harmful effects on
the operating system itself.

54
00:02:34,980 --> 00:02:37,460
Since then, they've added
additional responsibilities

55
00:02:37,460 --> 00:02:40,480
in that they remove
or change our HTML

56
00:02:40,480 --> 00:02:45,210
and CSS, override our
styles with their own CSS,

57
00:02:45,210 --> 00:02:46,970
change the entire
document structure

58
00:02:46,970 --> 00:02:51,131
for web-based clients, and
remove any and all JavaScript.

59
00:02:51,131 --> 00:02:53,130
So you're not going to
be writing any JavaScript

60
00:02:53,130 --> 00:02:57,300
for an HTML email anytime soon.

61
00:02:57,300 --> 00:02:59,900
Gmail has the most aggressive
preprocessor of all.

62
00:02:59,900 --> 00:03:01,650
This is unfortunate,
because it's

63
00:03:01,650 --> 00:03:04,610
one of the most popular
email clients out there.

64
00:03:04,610 --> 00:03:06,260
The combination
of its popularity

65
00:03:06,260 --> 00:03:09,230
and its preprocessing
affect how we

66
00:03:09,230 --> 00:03:11,670
have to write our HTML and CSS.

67
00:03:11,670 --> 00:03:13,100
Let's take a look
at specifically

68
00:03:13,100 --> 00:03:15,190
what Gmail's preprocessor does.

69
00:03:15,190 --> 00:03:17,290
First off, it removes
any link tags.

70
00:03:17,290 --> 00:03:20,100
This means that any external
style sheets in which we

71
00:03:20,100 --> 00:03:22,240
have code would be removed.

72
00:03:22,240 --> 00:03:27,010
It also overrides our styles
with its own version of CSS,

73
00:03:27,010 --> 00:03:29,980
and then it changes the
entire document structure.

74
00:03:29,980 --> 00:03:33,250
Finally — and this is the
most harmful to our code —

75
00:03:33,250 --> 00:03:34,770
it removes style tags.

76
00:03:34,770 --> 00:03:38,190
This means that we can't write
CSS in an external style sheet.

77
00:03:38,190 --> 00:03:42,100
We also can't lump together
CSS properties in a style tag

78
00:03:42,100 --> 00:03:43,610
to apply to our HTML elements.

79
00:03:46,410 --> 00:03:48,580
So now let's go back
to our base HTML

80
00:03:48,580 --> 00:03:50,890
and start adding some content.

81
00:03:50,890 --> 00:03:55,520
First off, we're going to
add the image for the stars.

82
00:03:55,520 --> 00:03:57,160
One thing to note
is that we're using

83
00:03:57,160 --> 00:03:59,670
an absolute URL for the image.

84
00:03:59,670 --> 00:04:02,980
Any time that we're adding
an image to an HTML email,

85
00:04:02,980 --> 00:04:05,580
we need to use an absolute URL.

86
00:04:05,580 --> 00:04:08,930
This image needs to be stored
on a server and accessible,

87
00:04:08,930 --> 00:04:11,710
and we will reference it
using an absolute path.

88
00:04:11,710 --> 00:04:15,210
This is one big difference
between email HTML and website

89
00:04:15,210 --> 00:04:15,974
HTML.

90
00:04:15,974 --> 00:04:17,390
All of the images
that we're going

91
00:04:17,390 --> 00:04:21,070
to use in our example email
will have an absolute URL.

92
00:04:21,070 --> 00:04:22,730
This is a lot of
code to look at,

93
00:04:22,730 --> 00:04:25,730
so we're going to abbreviate
these URLs using a dot, dot,

94
00:04:25,730 --> 00:04:29,290
dot, like this.

95
00:04:29,290 --> 00:04:31,430
Continuing on with
our initial markup,

96
00:04:31,430 --> 00:04:34,860
we're going to add an H1 and
a paragraph tag to our email.

97
00:04:37,472 --> 00:04:38,930
Throughout this
course, we're going

98
00:04:38,930 --> 00:04:41,000
to be writing a lot
of code, and it's all

99
00:04:41,000 --> 00:04:43,360
going to be in one single file.

100
00:04:43,360 --> 00:04:45,100
In order to keep
focus on the part

101
00:04:45,100 --> 00:04:46,600
that we're working
on at the moment,

102
00:04:46,600 --> 00:04:48,940
we're going to collapse the
code surrounding the areas

103
00:04:48,940 --> 00:04:50,350
that we're working on.

104
00:04:50,350 --> 00:04:52,910
You can see here that
we've collapsed the opening

105
00:04:52,910 --> 00:04:59,140
HTML and the closing HTML so
that we can focus on the body.

106
00:04:59,140 --> 00:05:01,880
If we take our code
and view it in Chrome,

107
00:05:01,880 --> 00:05:03,590
we get expected results.

108
00:05:03,590 --> 00:05:06,030
This is unstyled
HTML, so we're going

109
00:05:06,030 --> 00:05:08,940
to default to Times New
Roman for the font family,

110
00:05:08,940 --> 00:05:12,680
and then we'll have some
browser-specific spacing added.

111
00:05:12,680 --> 00:05:15,110
However, if we
view this in Gmail,

112
00:05:15,110 --> 00:05:17,280
we see some slight differences.

113
00:05:17,280 --> 00:05:19,160
Gmail is applying
a different font

114
00:05:19,160 --> 00:05:22,010
family and different spacing.

115
00:05:22,010 --> 00:05:24,670
This is because Gmail's
preprocessor has actually

116
00:05:24,670 --> 00:05:26,900
changed the code
that we've written.

117
00:05:30,090 --> 00:05:31,960
Let's use the browser
developer tools

118
00:05:31,960 --> 00:05:35,080
to compare how our code is
different from the Chrome

119
00:05:35,080 --> 00:05:39,230
version and the Gmail version.

120
00:05:39,230 --> 00:05:41,260
First off, looking at
the Chrome version,

121
00:05:41,260 --> 00:05:43,870
we can see that our
code is as expected.

122
00:05:43,870 --> 00:05:45,860
The only difference is
that chrome is adding

123
00:05:45,860 --> 00:05:47,295
some of its own default styles.

124
00:05:50,950 --> 00:05:53,970
Continuing on into Gmail,
we see that our code

125
00:05:53,970 --> 00:05:57,260
is in a very different
place than it was before.

126
00:05:57,260 --> 00:06:00,430
If you look way down
the line of divs,

127
00:06:00,430 --> 00:06:04,160
we'll find our code
towards the bottom.

128
00:06:04,160 --> 00:06:06,440
So what is actually going
on with our code here?

129
00:06:06,440 --> 00:06:08,990
If we look at that code
that was towards the bottom,

130
00:06:08,990 --> 00:06:12,120
we can see that it resembles
the code that we wrote.

131
00:06:12,120 --> 00:06:14,760
Our inline styles are there,
but they're now applied

132
00:06:14,760 --> 00:06:17,340
to a div tag instead of a body.

133
00:06:17,340 --> 00:06:18,870
Our image is there,
but it's being

134
00:06:18,870 --> 00:06:21,640
served from a different
location because Gmail wants

135
00:06:21,640 --> 00:06:23,690
to use its own caching service.

136
00:06:23,690 --> 00:06:26,330
Our H1 and paragraph
tags are left alone,

137
00:06:26,330 --> 00:06:32,540
but Gmail's applying CSS to
them via its own style sheet.

138
00:06:32,540 --> 00:06:35,690
In fact, if we look at the
body tag of the Gmail web

139
00:06:35,690 --> 00:06:38,370
application, we
see a lot of code

140
00:06:38,370 --> 00:06:42,920
that is no way related to ours.

141
00:06:42,920 --> 00:06:45,310
Knowing what preprocessors
are capable of,

142
00:06:45,310 --> 00:06:48,380
we need to write our styles in a
way that they won't be removed,

143
00:06:48,380 --> 00:06:50,840
and that they can counter
any styles created

144
00:06:50,840 --> 00:06:53,230
by the preprocessors themselves.

145
00:06:53,230 --> 00:06:56,280
In order to do this, we're
going to write our styles inline

146
00:06:56,280 --> 00:06:57,200
to create our email.

147
00:07:00,260 --> 00:07:02,190
To write inline
styles, the first thing

148
00:07:02,190 --> 00:07:04,680
that we're going to do
is add a style attribute

149
00:07:04,680 --> 00:07:06,090
to our image tag.

150
00:07:06,090 --> 00:07:10,060
We'll then add CSS properties to
give it the look that we want,

151
00:07:10,060 --> 00:07:12,660
and finally add
a width attribute

152
00:07:12,660 --> 00:07:14,900
to set it to 600 pixels.

153
00:07:14,900 --> 00:07:19,860
Here, you can see that our
star graphic is taking shape.

154
00:07:19,860 --> 00:07:22,890
Next, we'll follow that
same process for our H1 tag.

155
00:07:22,890 --> 00:07:25,860
We'll add our style attribute
and add properties to it,

156
00:07:25,860 --> 00:07:27,820
but the one interesting
thing to note

157
00:07:27,820 --> 00:07:31,390
is that, because we can't
reference an area of CSS,

158
00:07:31,390 --> 00:07:35,020
we have to include any reset
styles on every element

159
00:07:35,020 --> 00:07:36,540
that we want to reset.

160
00:07:36,540 --> 00:07:38,490
We're going to put
margin: 0 on this

161
00:07:38,490 --> 00:07:41,120
to counter any browser
behavior that would

162
00:07:41,120 --> 00:07:45,210
add spacing to our H1 tag.

163
00:07:45,210 --> 00:07:47,190
Our paragraph tag
is a combination

164
00:07:47,190 --> 00:07:49,610
of both of our prior
tags in that first we

165
00:07:49,610 --> 00:07:56,840
need to apply container styles,
then font styles, and also

166
00:07:56,840 --> 00:07:57,810
our reset styles.

167
00:08:02,560 --> 00:08:07,060
If we view the results of our
inline CSS, we find a problem.

168
00:08:07,060 --> 00:08:09,760
We want all three of these
elements to be aligned

169
00:08:09,760 --> 00:08:10,885
and to have equal widths.

170
00:08:13,440 --> 00:08:16,360
We can fix this by
adding a div around all

171
00:08:16,360 --> 00:08:21,180
of our current content, applying
margin: 0 auto to center it,

172
00:08:21,180 --> 00:08:23,810
and applying a max
width of 600 pixels

173
00:08:23,810 --> 00:08:25,880
so that it never gets
bigger than that.

174
00:08:25,880 --> 00:08:28,540
As you can see now, the
content is contained

175
00:08:28,540 --> 00:08:32,190
and the container is centered.

176
00:08:32,190 --> 00:08:33,990
To clean this up
a little more, we

177
00:08:33,990 --> 00:08:37,090
can apply text-align:
center to our div

178
00:08:37,090 --> 00:08:38,940
and allow that to
cascade down to all

179
00:08:38,940 --> 00:08:40,350
of the text inside of it.

180
00:08:42,970 --> 00:08:46,010
To complete our header, we
need to add a background.

181
00:08:46,010 --> 00:08:47,930
We want this background
to run the full width

182
00:08:47,930 --> 00:08:49,380
of the available space.

183
00:08:49,380 --> 00:08:51,110
In order to do that,
we're going to wrap

184
00:08:51,110 --> 00:08:54,290
a div around our current
content container,

185
00:08:54,290 --> 00:08:57,320
and apply a background color and
background image to that div.

186
00:08:59,990 --> 00:09:03,210
So far, we've seen what happens
if we take our code and view it

187
00:09:03,210 --> 00:09:05,890
after it has been through
Gmail's preprocessor

188
00:09:05,890 --> 00:09:08,450
and Chrome's rendering engine.

189
00:09:08,450 --> 00:09:11,420
Here is an example of
viewing our email after it's

190
00:09:11,420 --> 00:09:14,670
been processed by Gmail
preprocessor and Firefox's

191
00:09:14,670 --> 00:09:15,740
rendering engine.

192
00:09:15,740 --> 00:09:20,070
As we can see,
everything looks great.

193
00:09:20,070 --> 00:09:22,220
Now it's your turn to
start building an HTML

194
00:09:22,220 --> 00:09:25,640
email in the challenges.

195
00:09:25,640 --> 00:09:28,200
Blap beep.

196
00:09:28,200 --> 00:09:29,750
Ugh.

