1
00:00:00,500 --> 00:00:02,620
[SINGING] Designing emails
can be really tough.

2
00:00:02,620 --> 00:00:05,080
Client preprocessors
can be pretty rough.

3
00:00:05,080 --> 00:00:07,380
To code email for
all their devices,

4
00:00:07,380 --> 00:00:09,240
cut the design into many slices.

5
00:00:09,240 --> 00:00:11,910
Mark it up in tables
with inline style,

6
00:00:11,910 --> 00:00:14,230
with media queries
into one big file.

7
00:00:14,230 --> 00:00:16,665
To win, you'll train
and learn the details —

8
00:00:16,665 --> 00:00:17,830
Unmasking HTML Emails!

9
00:00:24,230 --> 00:00:26,520
Welcome back to
Unmasking HTML Emails.

10
00:00:26,520 --> 00:00:28,250
This is level three.

11
00:00:28,250 --> 00:00:30,930
In your first two levels,
you had some really tough

12
00:00:30,930 --> 00:00:31,967
opponents.

13
00:00:31,967 --> 00:00:33,800
Compared to them, the
opponent in this level

14
00:00:33,800 --> 00:00:37,010
is going to feel a little bit
more like a sparring match.

15
00:00:37,010 --> 00:00:39,610
Here, we're going to use
media queries to adjust

16
00:00:39,610 --> 00:00:41,395
our layout for smaller screens.

17
00:00:44,250 --> 00:00:46,610
We can see here that
our text isn't as big

18
00:00:46,610 --> 00:00:47,980
as we had expected it to be.

19
00:00:47,980 --> 00:00:50,080
These are set at
very high values,

20
00:00:50,080 --> 00:00:51,670
and yet they're very
small and fitting

21
00:00:51,670 --> 00:00:54,080
in a single line on the phone.

22
00:00:54,080 --> 00:00:57,680
This is because we are setting
fixed widths on our layout.

23
00:00:57,680 --> 00:01:01,160
So we're telling the phone
to display this table at 600

24
00:01:01,160 --> 00:01:05,750
pixels, but it only has 320
pixels available to view it.

25
00:01:05,750 --> 00:01:08,955
What it does to correct this
is, it shrinks the email

26
00:01:08,955 --> 00:01:12,360
down so that everything can fit.

27
00:01:12,360 --> 00:01:14,550
Our solution for
that is to use CSS

28
00:01:14,550 --> 00:01:18,730
to force the width of the table
to be 100% of the container.

29
00:01:18,730 --> 00:01:20,700
This is okay, because
any client that

30
00:01:20,700 --> 00:01:23,380
would support media
queries will also support

31
00:01:23,380 --> 00:01:26,460
putting CSS in a style tag.

32
00:01:26,460 --> 00:01:29,310
Once we create our
rule, we can apply that

33
00:01:29,310 --> 00:01:33,270
to each table using
a class attribute.

34
00:01:33,270 --> 00:01:36,690
You can now see that our table
is taking up the full width,

35
00:01:36,690 --> 00:01:39,630
and our fonts are big like
we expected them to be.

36
00:01:43,060 --> 00:01:45,970
While we do want these styles
to apply to any client that

37
00:01:45,970 --> 00:01:48,280
does support media
queries, we don't want

38
00:01:48,280 --> 00:01:51,430
it to always impact our tables.

39
00:01:51,430 --> 00:01:55,340
We only want this width of
100% to apply when our screen

40
00:01:55,340 --> 00:01:58,130
size is less than
600 pixels, so we're

41
00:01:58,130 --> 00:02:01,450
going to use a media query
with a max width of 600 pixels

42
00:02:01,450 --> 00:02:02,270
to hold our rule.

43
00:02:07,210 --> 00:02:10,940
We want a little bit of space in
between our table and the edges

44
00:02:10,940 --> 00:02:11,930
of the client.

45
00:02:11,930 --> 00:02:13,850
In order to do that,
we're going to move back

46
00:02:13,850 --> 00:02:16,790
up to the table that's
containing all of our content

47
00:02:16,790 --> 00:02:19,540
tables, and on that
first cell, we're

48
00:02:19,540 --> 00:02:22,890
going to apply padding of 10
pixels to the left and right.

49
00:02:26,530 --> 00:02:30,210
If we scroll down to our
two columns in our email,

50
00:02:30,210 --> 00:02:32,130
we would hope that,
on small screens,

51
00:02:32,130 --> 00:02:33,950
they would stack like this.

52
00:02:33,950 --> 00:02:36,125
However, right now,
they look like this.

53
00:02:40,100 --> 00:02:42,800
To fix this, we're going
to add a class with styles

54
00:02:42,800 --> 00:02:47,020
to make each column display
block and width 100%.

55
00:02:47,020 --> 00:02:50,890
We'll then apply that
class to each table cell.

56
00:02:50,890 --> 00:02:52,990
Now you can see that
the two columns are

57
00:02:52,990 --> 00:02:54,400
stacked on top of each other.

58
00:02:57,429 --> 00:02:58,970
Now that the two
columns are stacked,

59
00:02:58,970 --> 00:03:00,630
we have an alignment
issue, and this

60
00:03:00,630 --> 00:03:02,860
is from when we
created a padding

61
00:03:02,860 --> 00:03:05,770
right on the first
cell and a padding left

62
00:03:05,770 --> 00:03:07,000
on the second cell.

63
00:03:07,000 --> 00:03:12,040
We don't need that padding
when we're on a small screen.

64
00:03:12,040 --> 00:03:15,330
Removing the padding can be
done by adding a property

65
00:03:15,330 --> 00:03:17,640
to our stack column
class, and using

66
00:03:17,640 --> 00:03:19,680
our important declarative.

67
00:03:19,680 --> 00:03:22,610
Our two columns are now taking
up all of their available space

68
00:03:22,610 --> 00:03:23,385
with no padding.

69
00:03:26,920 --> 00:03:29,090
Our layout is now
working properly.

70
00:03:29,090 --> 00:03:31,950
We can add some details to
improve the overall look

71
00:03:31,950 --> 00:03:33,140
of the content.

72
00:03:33,140 --> 00:03:35,310
In between our two
columns, we want

73
00:03:35,310 --> 00:03:36,545
to add some vertical space.

74
00:03:39,304 --> 00:03:40,970
You'll probably
recognize this solution.

75
00:03:40,970 --> 00:03:42,900
We add a class to
our media query,

76
00:03:42,900 --> 00:03:45,370
and then apply that
class to a table cell.

77
00:03:51,170 --> 00:03:53,430
Here we can see that we
get inconsistent results

78
00:03:53,430 --> 00:03:54,930
with our font family.

79
00:03:54,930 --> 00:03:57,360
There are a few places where
our font family that we

80
00:03:57,360 --> 00:04:00,040
set of Arial Black is missing.

81
00:04:00,040 --> 00:04:02,900
This is because it's not
available on the system,

82
00:04:02,900 --> 00:04:06,530
so we need to create
better fallbacks.

83
00:04:06,530 --> 00:04:09,990
This would need to be updated
on every cell and span that

84
00:04:09,990 --> 00:04:12,970
contains the font
family Arial Black.

85
00:04:12,970 --> 00:04:14,760
We're showing you
the first cell,

86
00:04:14,760 --> 00:04:16,480
but you would actually
have to apply this

87
00:04:16,480 --> 00:04:22,420
to every cell and span
using that font family.

88
00:04:22,420 --> 00:04:24,690
Now that we have a
good fallback font,

89
00:04:24,690 --> 00:04:27,110
we see that our
text is very big.

90
00:04:27,110 --> 00:04:32,910
It's readable, but we'd like to
have that fit in a single line.

91
00:04:32,910 --> 00:04:34,730
We would follow the
same process as before,

92
00:04:34,730 --> 00:04:37,760
where we create a class
and apply that class

93
00:04:37,760 --> 00:04:40,340
to the table cells.

94
00:04:40,340 --> 00:04:44,170
For this specific content, this
is a long, arduous process.

95
00:04:44,170 --> 00:04:46,180
We're just showing
you one little sample

96
00:04:46,180 --> 00:04:51,540
of an area between 321 pixels
and 375 pixels, and the values

97
00:04:51,540 --> 00:04:57,060
that we would need to fit that
text in one line right there.

98
00:04:57,060 --> 00:05:00,010
In styling an email
across many breakpoints,

99
00:05:00,010 --> 00:05:02,180
you're going to have to
repeat this same process

100
00:05:02,180 --> 00:05:03,670
for multiple properties.

101
00:05:03,670 --> 00:05:06,220
Here's another example
where we adjust padding

102
00:05:06,220 --> 00:05:07,690
for our small screens as well.

103
00:05:10,990 --> 00:05:13,630
Now it's your turn to
jump into the challenges

104
00:05:13,630 --> 00:05:16,880
and improve your
small-screen experiences.

105
00:05:16,880 --> 00:05:17,860
Client that was-- ugh.

106
00:05:17,860 --> 00:05:19,410
I rolled my eyes.

107
00:05:19,410 --> 00:05:21,790
Layout is ac-- ugh.

