1
00:00:00,208 --> 00:00:02,166
[SINGING] Designing emails
can be really tough.

2
00:00:02,166 --> 00:00:05,080
Client preprocessors
can be pretty rough.

3
00:00:05,080 --> 00:00:07,386
To code email for
all their devices,

4
00:00:07,386 --> 00:00:09,535
cut the design into many slices.

5
00:00:09,535 --> 00:00:11,910
Mark it up in tables
with inline style,

6
00:00:11,910 --> 00:00:14,220
with media queries
into one big file.

7
00:00:14,220 --> 00:00:16,200
To win, you'll train
and learn the details —

8
00:00:16,200 --> 00:00:18,317
Unmasking HTML Emails!

9
00:00:24,170 --> 00:00:25,090
Welcome back.

10
00:00:25,090 --> 00:00:27,820
In level one, you learned
how to defeat one opponent

11
00:00:27,820 --> 00:00:30,491
by countering the
preprocessing skills of Gmail.

12
00:00:30,491 --> 00:00:31,990
In this level,
you're going to learn

13
00:00:31,990 --> 00:00:35,150
about multiple opponents, and
their secret weapon, the Word

14
00:00:35,150 --> 00:00:36,360
rendering engine.

15
00:00:36,360 --> 00:00:38,280
In order to defeat
them, we're going

16
00:00:38,280 --> 00:00:42,790
to be recreating our header
using tables for layout.

17
00:00:42,790 --> 00:00:47,800
In this section, we're going to
focus on Outlook 2003 and 2013.

18
00:00:47,800 --> 00:00:49,950
The reason that we're
focusing on both of these

19
00:00:49,950 --> 00:00:52,750
is that they use different
rendering engines.

20
00:00:52,750 --> 00:00:57,740
Prior to 2007, Word
used Internet Explorer 6

21
00:00:57,740 --> 00:00:59,450
for its rendering engine.

22
00:00:59,450 --> 00:01:03,580
2007 and later uses
Microsoft Word.

23
00:01:03,580 --> 00:01:05,990
You can see here that we
get unexpected results

24
00:01:05,990 --> 00:01:10,820
when word processing software
is rendering our HTML and CSS.

25
00:01:10,820 --> 00:01:13,910
Our stars' width is
correct, the styles

26
00:01:13,910 --> 00:01:15,500
are missing from the
background of it,

27
00:01:15,500 --> 00:01:18,540
and our padding is missing
from our paragraph tag.

28
00:01:21,510 --> 00:01:24,690
The reason all this happens
is that Word lacks box model

29
00:01:24,690 --> 00:01:26,092
and positioning support.

30
00:01:26,092 --> 00:01:27,800
Everything that you
can think of that you

31
00:01:27,800 --> 00:01:30,820
would want to use to
create a layout in CSS

32
00:01:30,820 --> 00:01:32,460
is not supported by it.

33
00:01:32,460 --> 00:01:36,380
So we can't set specific
heights, display options,

34
00:01:36,380 --> 00:01:38,410
floats, or positions.

35
00:01:38,410 --> 00:01:41,610
We do get minimal support
for width and padding.

36
00:01:41,610 --> 00:01:44,490
However, they're not supported
on div element or paragraph

37
00:01:44,490 --> 00:01:45,460
tags.

38
00:01:45,460 --> 00:01:50,300
They are, however,
supported on table elements.

39
00:01:50,300 --> 00:01:52,830
You should absolutely avoid
using tables for layout

40
00:01:52,830 --> 00:01:54,400
when building web pages.

41
00:01:54,400 --> 00:01:57,680
However, they're a necessity
for HTML emails because

42
00:01:57,680 --> 00:01:59,270
of the lack of CSS support.

43
00:02:02,510 --> 00:02:04,950
Tables typically use
many semantic elements

44
00:02:04,950 --> 00:02:07,890
to create their structure.

45
00:02:07,890 --> 00:02:09,740
However, this is too
much code for what

46
00:02:09,740 --> 00:02:11,530
we need for our layouts.

47
00:02:11,530 --> 00:02:14,110
We're going to use simplified
tables, in that we're only

48
00:02:14,110 --> 00:02:17,520
going to use the table element,
table row element, and table

49
00:02:17,520 --> 00:02:18,260
cell element.

50
00:02:22,710 --> 00:02:26,250
Many clients apply default
spacing in order to space

51
00:02:26,250 --> 00:02:27,310
out tables.

52
00:02:27,310 --> 00:02:29,020
We're going to need
to counter this.

53
00:02:29,020 --> 00:02:33,430
In order to do that, we're going
to use HTML attributes, border,

54
00:02:33,430 --> 00:02:37,120
cell padding, and cell
spacing, and set them to zero.

55
00:02:37,120 --> 00:02:40,470
With those set, you can see
that we no longer have any space

56
00:02:40,470 --> 00:02:44,210
in between our table cells.

57
00:02:44,210 --> 00:02:45,890
Here's an example
of our simplified

58
00:02:45,890 --> 00:02:48,870
table with our reset
attributes, and this table

59
00:02:48,870 --> 00:02:50,710
is what we're going
to use to contain all

60
00:02:50,710 --> 00:02:52,450
of the content in our email.

61
00:02:52,450 --> 00:02:54,260
Because every
table that we write

62
00:02:54,260 --> 00:02:56,380
has to have these
reset attributes,

63
00:02:56,380 --> 00:02:59,020
sometimes we're going to
shorten that up, like this.

64
00:03:03,740 --> 00:03:06,600
Here, we've taken all of
our content from level one

65
00:03:06,600 --> 00:03:08,900
and put that into a table cell.

66
00:03:08,900 --> 00:03:13,210
We've then added a width
of 600 to our table.

67
00:03:13,210 --> 00:03:16,810
As you can see, the width is
being restricted to 600 pixels.

68
00:03:16,810 --> 00:03:18,850
However, our styles are
still not displaying

69
00:03:18,850 --> 00:03:20,330
the way that we want to.

70
00:03:20,330 --> 00:03:22,920
One example is that the
background styles for our image

71
00:03:22,920 --> 00:03:26,850
are still not
rendering properly.

72
00:03:26,850 --> 00:03:29,760
The Word rendering engine
has very minimal support

73
00:03:29,760 --> 00:03:34,060
for styles on any HTML elements,
except for the table and table

74
00:03:34,060 --> 00:03:35,050
cell.

75
00:03:35,050 --> 00:03:38,980
This means we need to divide our
content into individual table

76
00:03:38,980 --> 00:03:41,320
cells that can be styled.

77
00:03:41,320 --> 00:03:43,860
Let's take a look at how
this would affect our header.

78
00:03:43,860 --> 00:03:48,090
We can create our header as a
single table with three rows,

79
00:03:48,090 --> 00:03:50,150
each with a single cell.

80
00:03:50,150 --> 00:03:52,290
Let's take a look at
how that looks in code.

81
00:03:56,290 --> 00:04:00,500
The first row has a cell
that contains our image,

82
00:04:00,500 --> 00:04:04,740
the second row has a cell
that contains our title,

83
00:04:04,740 --> 00:04:07,455
and the third row has a cell
that contains our paragraph.

84
00:04:10,530 --> 00:04:12,620
We're not going to use
the H1 and paragraph

85
00:04:12,620 --> 00:04:15,820
elements so that we don't have
to counter any styles that

86
00:04:15,820 --> 00:04:17,640
will be added on by clients.

87
00:04:21,529 --> 00:04:25,170
Earlier, we applied our styles
directly to our image tag.

88
00:04:25,170 --> 00:04:26,890
However, to get
the best support we

89
00:04:26,890 --> 00:04:29,160
want to apply our
background color and padding

90
00:04:29,160 --> 00:04:31,020
to the table cell.

91
00:04:31,020 --> 00:04:32,750
Now, you may wonder
why we also don't

92
00:04:32,750 --> 00:04:37,010
move display: block and max-width:
100% up to the table cell.

93
00:04:37,010 --> 00:04:39,360
This is because, while it
wouldn't cause a problem

94
00:04:39,360 --> 00:04:42,810
in this example, if we were
in a multi-column layout,

95
00:04:42,810 --> 00:04:45,165
that could break the
layout in some clients.

96
00:04:48,680 --> 00:04:52,200
Moving on to styling our title,
this would be the same process

97
00:04:52,200 --> 00:04:54,080
as we did earlier,
except that we're

98
00:04:54,080 --> 00:04:57,370
applying all of those
styles to the table cell.

99
00:04:57,370 --> 00:04:58,900
The one nice thing
is, we no longer

100
00:04:58,900 --> 00:05:01,720
have to include
reset CSS in there,

101
00:05:01,720 --> 00:05:04,340
because we're not getting
any default styles applied

102
00:05:04,340 --> 00:05:04,840
to our cell.

103
00:05:08,460 --> 00:05:12,810
Like before, this text has a
combination of layout styles

104
00:05:12,810 --> 00:05:15,700
and font styles, and we're
applying them all directly

105
00:05:15,700 --> 00:05:16,580
to the table cell.

106
00:05:20,990 --> 00:05:24,140
Like before, we're going to
apply our text-align: center

107
00:05:24,140 --> 00:05:26,940
to our containing element,
but now our containing element

108
00:05:26,940 --> 00:05:28,790
is a table instead.

109
00:05:28,790 --> 00:05:32,090
You may wonder why we wouldn't
bring all of our font styles

110
00:05:32,090 --> 00:05:36,230
up to the table level and
allow them to only be set once.

111
00:05:36,230 --> 00:05:37,690
Here are some
examples of some

112
00:05:37,690 --> 00:05:40,750
webmail clients,
and the default styles

113
00:05:40,750 --> 00:05:43,230
that they would
set to table cells.

114
00:05:43,230 --> 00:05:45,590
As we saw earlier,
Gmail will actually

115
00:05:45,590 --> 00:05:47,756
set font family of Arial.

116
00:05:47,756 --> 00:05:49,380
This means that if
we ever have a table

117
00:05:49,380 --> 00:05:51,880
cell without the font
family set on it,

118
00:05:51,880 --> 00:05:53,870
it will default to Arial.

119
00:05:53,870 --> 00:05:56,010
AOL goes one step
further, in that

120
00:05:56,010 --> 00:05:59,200
they would set the color
to black on any table cell

121
00:05:59,200 --> 00:06:01,570
that we do not have
a color set on.

122
00:06:01,570 --> 00:06:03,240
These examples make
it clear that we

123
00:06:03,240 --> 00:06:08,680
need to default to setting
font styles on our table cells.

124
00:06:08,680 --> 00:06:11,860
In level one, we used
margin: 0 auto in order

125
00:06:11,860 --> 00:06:14,300
to center our
containing element.

126
00:06:14,300 --> 00:06:16,680
Now that our containing
element is a table,

127
00:06:16,680 --> 00:06:20,130
we're going to use an
HTML attribute, align,

128
00:06:20,130 --> 00:06:22,620
with a value of center.

129
00:06:22,620 --> 00:06:25,205
With that attribute applied,
our table is now centered.

130
00:06:28,850 --> 00:06:32,240
The final step in recreating
our header with tables

131
00:06:32,240 --> 00:06:33,820
is to add our background.

132
00:06:33,820 --> 00:06:36,530
In order to do this, we're
going to wrap our container

133
00:06:36,530 --> 00:06:40,080
table inside of another
table, and we're

134
00:06:40,080 --> 00:06:43,340
going to apply our background
to that outer table.

135
00:06:48,840 --> 00:06:51,110
Remember, it's always
important to continue

136
00:06:51,110 --> 00:06:54,930
testing how your changes
affect multiple clients.

137
00:06:54,930 --> 00:06:58,060
Here, we can see that our layout
is looking great in Outlook

138
00:06:58,060 --> 00:07:01,380
using Internet Explorer
as a rendering engine,

139
00:07:01,380 --> 00:07:04,500
Outlook using Microsoft
Word as a rendering engine,

140
00:07:04,500 --> 00:07:07,680
and Gmail using Chrome's
rendering engine.

141
00:07:07,680 --> 00:07:09,850
There are some small
differences in the font styles,

142
00:07:09,850 --> 00:07:11,140
but we'll tackle those later.

143
00:07:13,920 --> 00:07:16,320
Now it's your turn to
recreate the header using

144
00:07:16,320 --> 00:07:18,200
tables for layout.

