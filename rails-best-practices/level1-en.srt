1
00:00:00,000 --> 00:00:00,295

2
00:00:00,295 --> 00:00:00,590
Hello,

3
00:00:00,590 --> 00:00:03,040
I'm Gregg Pollack, and you're
watching Rails Best Practices

4
00:00:03,040 --> 00:00:06,010
Super Deluxe Championship
Edition, Level One.

5
00:00:06,010 --> 00:00:26,110
[MUSIC PLAYING]

6
00:00:26,110 --> 00:00:29,840
Level one is entitled
Controllers in Space.

7
00:00:29,840 --> 00:00:31,680
So we're going to be going
through and doing some

8
00:00:31,680 --> 00:00:33,910
controller best practices.

9
00:00:33,910 --> 00:00:37,350
As we go through, you're going
to notice sometimes we use sad

10
00:00:37,350 --> 00:00:40,990
smiley faces to signify that
we have some bad code that

11
00:00:40,990 --> 00:00:42,510
needs to be refactored.

12
00:00:42,510 --> 00:00:45,660
And then sometimes we'll be
having happy smiley faces,

13
00:00:45,660 --> 00:00:48,230
which will show you that this
code has been refactored and

14
00:00:48,230 --> 00:00:50,020
it is a best practice.

15
00:00:50,020 --> 00:00:51,770
They should be useful when you
go back and reference the

16
00:00:51,770 --> 00:00:54,430
slides later to figure out
which is the sad code and

17
00:00:54,430 --> 00:00:56,460
which is the happy code.

18
00:00:56,460 --> 00:00:59,010
The example we're going to be
using throughout this whole

19
00:00:59,010 --> 00:01:01,430
tutorial is going
to be Twitter.

20
00:01:01,430 --> 00:01:04,160
So you're going to see code that
we might have written if

21
00:01:04,160 --> 00:01:06,250
we were writing Twitter
from scratch.

22
00:01:06,250 --> 00:01:09,140
And we'll, of course, show you
some sad code and how to make

23
00:01:09,140 --> 00:01:10,402
happy Twitter code.

24
00:01:10,402 --> 00:01:13,710

25
00:01:13,710 --> 00:01:15,650
The first best practice we're
going to take a look at is a

26
00:01:15,650 --> 00:01:19,000
pretty common one, called fat
model, skinny controller,

27
00:01:19,000 --> 00:01:21,330
which, of course, talks about
taking code out of your

28
00:01:21,330 --> 00:01:25,760
controller into your model, so
your model should be fatter,

29
00:01:25,760 --> 00:01:28,620
not too fat, and your
controller's skinny.

30
00:01:28,620 --> 00:01:30,670
So let's take a look
at some code.

31
00:01:30,670 --> 00:01:33,280
The tweets controller
has a retweet action

32
00:01:33,280 --> 00:01:34,940
which fetches a tweet.

33
00:01:34,940 --> 00:01:38,200
If the person who created that
tweet is us, well then we're

34
00:01:38,200 --> 00:01:39,200
going to simply return

35
00:01:39,200 --> 00:01:41,050
"Sorry, you can't retweet
your own tweets."

36
00:01:41,050 --> 00:01:43,790
If we've already retweeted that
tweet, well, we're simply

37
00:01:43,790 --> 00:01:46,520
going to say, "you've already
retweeted this."

38
00:01:46,520 --> 00:01:48,860
Otherwise, we're going to go
ahead and create the retweet

39
00:01:48,860 --> 00:01:50,660
like this.

40
00:01:50,660 --> 00:01:53,070
You can see that string we're
putting together with the RT

41
00:01:53,070 --> 00:01:55,340
keyword that you see across
Twitter a lot.

42
00:01:55,340 --> 00:01:59,080
We'll then give notice that we
successfully retweeted and

43
00:01:59,080 --> 00:02:01,990
redirect back to showing
that particular tweet.

44
00:02:01,990 --> 00:02:03,910
The first thing we're going to
do to refactor this is we're

45
00:02:03,910 --> 00:02:06,070
going to take those Flash
notices and we're going to

46
00:02:06,070 --> 00:02:09,400
move them up to the
top of the action.

47
00:02:09,400 --> 00:02:11,640
We'll then move the redirect
up to simplify this

48
00:02:11,640 --> 00:02:12,720
controller.

49
00:02:12,720 --> 00:02:15,130
The rest of this code we're
going to refactor, and we're

50
00:02:15,130 --> 00:02:19,630
going to refactor it into a
method called retweet_by on

51
00:02:19,630 --> 00:02:20,770
the Tweet model.

52
00:02:20,770 --> 00:02:24,610
So we're going to send in who
is retweeting this tweet.

53
00:02:24,610 --> 00:02:28,370
Then in the tweet.rb model,
we'll go ahead and define the

54
00:02:28,370 --> 00:02:30,330
retweet_by method.

55
00:02:30,330 --> 00:02:33,480
It's going to send in the
retweeter, so retweeter is the

56
00:02:33,480 --> 00:02:35,760
user who's trying to
retweet obviously.

57
00:02:35,760 --> 00:02:38,670
And then, we just need to
specify self where we need to.

58
00:02:38,670 --> 00:02:41,440
And as you can see here, this
method is going to return a

59
00:02:41,440 --> 00:02:43,885
string, which then gets
set into the notice.

60
00:02:43,885 --> 00:02:46,440

61
00:02:46,440 --> 00:02:49,140
Next we're going to take a look
at two different types of

62
00:02:49,140 --> 00:02:51,230
scope to improve our code.

63
00:02:51,230 --> 00:02:54,670
So let's take a look inside the
index action of our tweets

64
00:02:54,670 --> 00:02:55,500
controller.

65
00:02:55,500 --> 00:02:58,380
Here we might want to pull a
list of tweets, and we might

66
00:02:58,380 --> 00:03:01,530
also want to pull a
list of trends.

67
00:03:01,530 --> 00:03:03,650
There's a couple ways we
can improve this code.

68
00:03:03,650 --> 00:03:05,740
The first thing you might notice
is that we're not using

69
00:03:05,740 --> 00:03:09,310
the new active relation method
chaining syntax.

70
00:03:09,310 --> 00:03:10,810
So let's go ahead and
refactor that.

71
00:03:10,810 --> 00:03:14,990
So up at the top, we're going
to change that to use the

72
00:03:14,990 --> 00:03:17,600
method chaining.

73
00:03:17,600 --> 00:03:20,140
And let's go ahead and do that
with the second query.

74
00:03:20,140 --> 00:03:22,770
The next thing we can do to
refactor is you'll notice that

75
00:03:22,770 --> 00:03:25,780
we're querying for the tweets
for a particular user.

76
00:03:25,780 --> 00:03:29,380
Well, a user has_many
tweets, so why not

77
00:03:29,380 --> 00:03:31,860
scope it by that user?

78
00:03:31,860 --> 00:03:36,730
So we'll change this so it reads
current_user.tweets, and

79
00:03:36,730 --> 00:03:39,800
we've properly scoped it
to the particular user.

80
00:03:39,800 --> 00:03:42,380
We can also now take this code
and put it on a single line,

81
00:03:42,380 --> 00:03:44,930
since we've simplified it.

82
00:03:44,930 --> 00:03:48,060
The next type of scope we're
going to be talking about is a

83
00:03:48,060 --> 00:03:49,030
named scope.

84
00:03:49,030 --> 00:03:51,810
So inside of our model, we're
going to define a scope

85
00:03:51,810 --> 00:03:54,180
keyword that's going to be scope
:recent because there may

86
00:03:54,180 --> 00:03:56,390
be different parts of an
application where we want to

87
00:03:56,390 --> 00:03:59,250
query for recent tweets.

88
00:03:59,250 --> 00:04:01,600
In this case, a recent tweet
is going to be defined by a

89
00:04:01,600 --> 00:04:03,010
specific order.

90
00:04:03,010 --> 00:04:06,430
So we're going to take order
from out of the prior query

91
00:04:06,430 --> 00:04:08,460
and move it down
into the model.

92
00:04:08,460 --> 00:04:11,260
So now we can use the recent
named scope in our original

93
00:04:11,260 --> 00:04:13,140
query inside of our action.

94
00:04:13,140 --> 00:04:15,480
On most of the screens that
we're going to see tweets,

95
00:04:15,480 --> 00:04:19,890
most the time we want them
listed from newest to oldest.

96
00:04:19,890 --> 00:04:23,550
So you might argue that this
should be the default scope.

97
00:04:23,550 --> 00:04:26,290
So we can do something
like this.

98
00:04:26,290 --> 00:04:29,170
If this particular order is the
default scope, then we can

99
00:04:29,170 --> 00:04:32,090
refactor our original code
and simply get rid

100
00:04:32,090 --> 00:04:35,160
of that recent keyword.

101
00:04:35,160 --> 00:04:37,670
Now let's flip back over to the
second query that we had

102
00:04:37,670 --> 00:04:38,950
in our action.

103
00:04:38,950 --> 00:04:40,920
So this is where we've got
all of the trends.

104
00:04:40,920 --> 00:04:43,970
How might we use named scope
in this instance?

105
00:04:43,970 --> 00:04:46,640
Well, maybe in the topic
model we'll have a

106
00:04:46,640 --> 00:04:48,520
scope called trending.

107
00:04:48,520 --> 00:04:51,220
So let's go ahead and move
down the query methods.

108
00:04:51,220 --> 00:04:54,760
So now we can specify topic
trending limit five.

109
00:04:54,760 --> 00:04:58,640
However, this query is only
going to work once, the first

110
00:04:58,640 --> 00:04:59,570
time we run it.

111
00:04:59,570 --> 00:05:00,850
Why is that?

112
00:05:00,850 --> 00:05:04,200
Well, if we run it the first
time, it's going to print out

113
00:05:04,200 --> 00:05:06,430
a date and time that
looks like this.

114
00:05:06,430 --> 00:05:08,860
The second time we run it, it'll
print out a date and

115
00:05:08,860 --> 00:05:10,030
time that looks like that.

116
00:05:10,030 --> 00:05:12,170
This is the same time,
you'll notice.

117
00:05:12,170 --> 00:05:15,300
This is because of the way Rails
deals with named scopes.

118
00:05:15,300 --> 00:05:16,770
The first time it runs
the scope, it

119
00:05:16,770 --> 00:05:18,620
actually creates a method.

120
00:05:18,620 --> 00:05:21,710
And the second time you run it,
it just runs that method.

121
00:05:21,710 --> 00:05:23,110
So how might we fix this?

122
00:05:23,110 --> 00:05:27,060
Well, what we might do here to
make it work is add a lambda.

123
00:05:27,060 --> 00:05:29,750

124
00:05:29,750 --> 00:05:32,430
So we wrap in a lambda,
it works properly.

125
00:05:32,430 --> 00:05:35,200
And every time someone calls
that scope, it regenerates

126
00:05:35,200 --> 00:05:36,990
that date and time.

127
00:05:36,990 --> 00:05:39,360
There's another way we can
improve the scope and that's

128
00:05:39,360 --> 00:05:41,500
by maybe adding a parameter.

129
00:05:41,500 --> 00:05:44,560
So we're going to send in the
number of trending topics we

130
00:05:44,560 --> 00:05:45,640
want it to return.

131
00:05:45,640 --> 00:05:47,960
In this example, we have five.

132
00:05:47,960 --> 00:05:49,500
How might we do that?

133
00:05:49,500 --> 00:05:52,630
Well, since we're using a
lambda, we can just specify a

134
00:05:52,630 --> 00:05:55,540
block parameter called num.

135
00:05:55,540 --> 00:05:58,910
And we can specify limit num.

136
00:05:58,910 --> 00:06:00,910
And it works, just like that.

137
00:06:00,910 --> 00:06:05,470
However, this allows us to do
topic trending five, but what

138
00:06:05,470 --> 00:06:09,170
if we wanted to be able to do
something like topic trending

139
00:06:09,170 --> 00:06:12,990
to get back all of the
trending topics?

140
00:06:12,990 --> 00:06:14,890
If we ran this code, it would
give us back wrong number of

141
00:06:14,890 --> 00:06:18,430
args, zero for one.

142
00:06:18,430 --> 00:06:20,010
So how might we fix this?

143
00:06:20,010 --> 00:06:23,600
Well, in Ruby 1.9, we were given
the ability to specify a

144
00:06:23,600 --> 00:06:26,110
default for a block parameter.

145
00:06:26,110 --> 00:06:29,830
We can simply specify
num equals nil.

146
00:06:29,830 --> 00:06:31,720
We could also make
this a number.

147
00:06:31,720 --> 00:06:34,930
So if we wanted to default the
limit to five, we could say

148
00:06:34,930 --> 00:06:36,750
num equals 5.

149
00:06:36,750 --> 00:06:40,350
But the interesting part about
putting equals nil is that

150
00:06:40,350 --> 00:06:43,440
means it's simply going
to ignore the limit.

151
00:06:43,440 --> 00:06:46,250
Since nil gets passed into
limit, it's simply going to

152
00:06:46,250 --> 00:06:50,350
return all of the
trending topics.

153
00:06:50,350 --> 00:06:53,960
Now you saw earlier that we're
specifying a default scope for

154
00:06:53,960 --> 00:06:55,560
our tweet model.

155
00:06:55,560 --> 00:06:58,440
But what we want to override
the default scope?

156
00:06:58,440 --> 00:07:00,710
Can we simply do a query
like this where we

157
00:07:00,710 --> 00:07:03,810
specify order status?

158
00:07:03,810 --> 00:07:05,470
That's actually not
going to work.

159
00:07:05,470 --> 00:07:07,860
It's actually going to keep
the order of created at

160
00:07:07,860 --> 00:07:08,490
descending.

161
00:07:08,490 --> 00:07:11,270
And it's not going to
order by status.

162
00:07:11,270 --> 00:07:14,130
Sometimes you might want to
override the default status.

163
00:07:14,130 --> 00:07:15,100
How do you do that?

164
00:07:15,100 --> 00:07:17,970
Well, you can do that
using the unscoped

165
00:07:17,970 --> 00:07:19,890
keyword as you see here.

166
00:07:19,890 --> 00:07:23,055
And now it's going to properly
order by the status column.

167
00:07:23,055 --> 00:07:27,420

168
00:07:27,420 --> 00:07:29,450
Earlier in this video,
you saw some code

169
00:07:29,450 --> 00:07:30,330
that looked like this.

170
00:07:30,330 --> 00:07:33,830
We're creating a retweet.

171
00:07:33,830 --> 00:07:36,240
Now we can improve this
code a little bit by

172
00:07:36,240 --> 00:07:37,810
properly using the scope.

173
00:07:37,810 --> 00:07:41,600
So if we're creating a retweet
for a particular user, why not

174
00:07:41,600 --> 00:07:43,120
scope it to that user?

175
00:07:43,120 --> 00:07:45,580
So we might have some code that
instead looks something

176
00:07:45,580 --> 00:07:50,880
like this, where we do
current_user.tweets.create 

177
00:07:50,880 --> 00:07:52,130
and then we 
send in the parameters.

178
00:07:52,130 --> 00:07:57,530

179
00:07:57,530 --> 00:07:58,820
Next up we're going
to be talking

180
00:07:58,820 --> 00:08:00,820
about controller filters.

181
00:08:00,820 --> 00:08:04,560
Now in Rails for Zombies, if
you watch that, we had this

182
00:08:04,560 --> 00:08:09,090
example here where we had a
Tweet.find(params[:id]), and that

183
00:08:09,090 --> 00:08:11,240
was happening in a bunch
of different actions.

184
00:08:11,240 --> 00:08:16,380
And we moved that up into its
own method called get_tweet.

185
00:08:16,380 --> 00:08:19,945
And then we specified a before
filter for that method and

186
00:08:19,945 --> 00:08:22,030
then specified that should
only happen on the edit,

187
00:08:22,030 --> 00:08:24,280
update, and destroy actions.

188
00:08:24,280 --> 00:08:28,275
Well, there's a couple things
wrong about doing this that

189
00:08:28,275 --> 00:08:30,820
aren't so much of
a best practice.

190
00:08:30,820 --> 00:08:33,720
The first thing that's a little
fishy is that get tweet

191
00:08:33,720 --> 00:08:37,390
method should probably be in
a private section of our

192
00:08:37,390 --> 00:08:39,870
controller, maybe down
at the bottom.

193
00:08:39,870 --> 00:08:42,150
Another reason why people don't
think this is a best

194
00:08:42,150 --> 00:08:46,930
practice is because it's kind of
hiding instance variables.

195
00:08:46,930 --> 00:08:47,930
What does that mean?

196
00:08:47,930 --> 00:08:50,900
Well, some people have the idea
that instance variables

197
00:08:50,900 --> 00:08:55,520
should only be declared inside
of your actions.

198
00:08:55,520 --> 00:08:58,620
They should never be hidden in
some private methods at the

199
00:08:58,620 --> 00:09:01,220
bottom of your file that
you might forget about.

200
00:09:01,220 --> 00:09:03,170
So how might we fix this?

201
00:09:03,170 --> 00:09:06,170
First we might declare the tweet
variable inside each of

202
00:09:06,170 --> 00:09:08,160
our actions and have
each of them call

203
00:09:08,160 --> 00:09:11,240
the get_tweet method.

204
00:09:11,240 --> 00:09:13,990
Another best practice along
the same lines is that you

205
00:09:13,990 --> 00:09:18,200
might want to have parameters
only being accessed from

206
00:09:18,200 --> 00:09:20,280
inside the action.

207
00:09:20,280 --> 00:09:22,590
So let me show you what
that might look like.

208
00:09:22,590 --> 00:09:25,330
So here we're referencing the
parameters and sending that

209
00:09:25,330 --> 00:09:28,360
into our get_tweet method,
which now has another

210
00:09:28,360 --> 00:09:30,840
parameter itself called
tweet_id.

211
00:09:30,840 --> 00:09:33,410
And you might be asking
yourself, at this point, well,

212
00:09:33,410 --> 00:09:36,280
what's the point of a helper
if it's that simple?

213
00:09:36,280 --> 00:09:37,380
And you might have a point.

214
00:09:37,380 --> 00:09:39,670
In this case, you might just
want to do Tweet.find(params[:id])

215
00:09:39,670 --> 00:09:41,110
in each of those.

216
00:09:41,110 --> 00:09:44,290
But for more complex examples,
where you want to be able to

217
00:09:44,290 --> 00:09:47,040
test each part of your
controller, you definitely

218
00:09:47,040 --> 00:09:49,255
might want to encapsulate
that inside of a method.

219
00:09:49,255 --> 00:09:53,050

220
00:09:53,050 --> 00:09:55,930
So what are some good examples
of where you do want filters?

221
00:09:55,930 --> 00:09:58,440
Well, if you have any sort of
authorization, that's a good

222
00:09:58,440 --> 00:10:01,250
use of filters, any
sort of logging.

223
00:10:01,250 --> 00:10:04,510
Or maybe you have a wizard,
maybe a multi-step form where

224
00:10:04,510 --> 00:10:06,970
somebody goes through different
steps, and you might

225
00:10:06,970 --> 00:10:11,950
want to control some of
that through a filter.

226
00:10:11,950 --> 00:10:13,780
So let's take a quick look at
a couple different ways you

227
00:10:13,780 --> 00:10:14,460
can use filters.

228
00:10:14,460 --> 00:10:17,530
So here you can see we're using
it for authorization.

229
00:10:17,530 --> 00:10:19,540
We can use the only keyword.

230
00:10:19,540 --> 00:10:22,830
We can also use the except
keyword to specify which

231
00:10:22,830 --> 00:10:25,270
actions shouldn't
run this filter.

232
00:10:25,270 --> 00:10:27,750
If we want a filter to be run
across all of our actions and

233
00:10:27,750 --> 00:10:30,620
all of our controllers, we can
put it in our application

234
00:10:30,620 --> 00:10:31,490
controller.

235
00:10:31,490 --> 00:10:33,940
In this case, if we're requiring
login, we don't want

236
00:10:33,940 --> 00:10:36,360
it across all of our pages.

237
00:10:36,360 --> 00:10:40,160
For example, we wouldn't want
it on our sign in form.

238
00:10:40,160 --> 00:10:43,620
So in that case, we might want
to use the skip_before_filter

239
00:10:43,620 --> 00:10:45,060
syntax like you see here.

240
00:10:45,060 --> 00:10:49,430

241
00:10:49,430 --> 00:10:51,460
So that pretty much
wraps up Level One:

242
00:10:51,460 --> 00:10:53,150
Controllers in Space.

243
00:10:53,150 --> 00:10:55,785
And now it's your turn to take
some of the code you learned

244
00:10:55,785 --> 00:10:58,420
and apply them to the challenges
in this level.

245
00:10:58,420 --> 00:11:01,628
[MUSIC PLAYING]
