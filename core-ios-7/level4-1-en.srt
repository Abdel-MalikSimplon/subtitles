1
00:00:01,884 --> 00:00:04,530
Welcome back to Core iOS 7.

2
00:00:04,530 --> 00:00:07,870
In this level, we're going to
be going over interactive

3
00:00:07,870 --> 00:00:09,330
transitions.

4
00:00:09,330 --> 00:00:12,640
Now, what is an interactive
transition?

5
00:00:12,640 --> 00:00:14,990
The easiest place to see an
example of one of these

6
00:00:14,990 --> 00:00:18,620
transitions is in a navigation
controller stack.

7
00:00:18,620 --> 00:00:21,880
By default, you can pan from
the left side, as you see

8
00:00:21,880 --> 00:00:25,950
here, and go back to the
last controller.

9
00:00:25,950 --> 00:00:29,280
You can also see an interactive
transition in, for

10
00:00:29,280 --> 00:00:32,670
example, the control center,
where you can pan up from the

11
00:00:32,670 --> 00:00:36,710
bottom to bring it up, and also
pan down to dismiss the

12
00:00:36,710 --> 00:00:38,080
control center.

13
00:00:38,080 --> 00:00:40,710
In addition to being able to
tap the Sign In button to

14
00:00:40,710 --> 00:00:43,500
dismiss the view controller, we
also want to let the user

15
00:00:43,500 --> 00:00:46,610
interact with the view
controller to dismiss it.

16
00:00:46,610 --> 00:00:48,830
Interactive transitions are
great, because they take

17
00:00:48,830 --> 00:00:52,230
advantage of powerful gesture
recognizers that you might

18
00:00:52,230 --> 00:00:55,740
already be familiar with in
iOS, but they're also very

19
00:00:55,740 --> 00:00:57,380
easy to do in iOS 7.

20
00:00:57,380 --> 00:01:01,010
This would have been much, much
harder to do in iOS 6.

21
00:01:01,010 --> 00:01:03,510
It also allows the user to feel
more in control of the

22
00:01:03,510 --> 00:01:06,780
experience, basically allowing
them to control the

23
00:01:06,780 --> 00:01:08,030
transition.

24
00:01:09,920 --> 00:01:12,850
Now at a high level, an
interactive transition is made

25
00:01:12,850 --> 00:01:14,370
up of two parts.

26
00:01:14,370 --> 00:01:17,300
The first part is what we
built last level in the

27
00:01:17,300 --> 00:01:19,140
animated transition.

28
00:01:19,140 --> 00:01:20,350
Now this doesn't
change at all.

29
00:01:20,350 --> 00:01:23,680
Now the second part is the
user's interaction.

30
00:01:23,680 --> 00:01:27,560
For example, a pan gesture where
they start from the top

31
00:01:27,560 --> 00:01:31,540
and pan down to the bottom.

32
00:01:31,540 --> 00:01:33,460
So you can think of this
like a movie you'd

33
00:01:33,460 --> 00:01:34,980
watch on your computer.

34
00:01:34,980 --> 00:01:37,580
The animated transition is
the movie, and goes from

35
00:01:37,580 --> 00:01:39,400
beginning to end.

36
00:01:39,400 --> 00:01:42,550
The interactive transition is
like the scrubber, allowing

37
00:01:42,550 --> 00:01:46,045
you to scrub through the movie
to any point that you'd like.

38
00:01:49,560 --> 00:01:51,490
So what do we want
to do in our app?

39
00:01:51,490 --> 00:01:54,590
Basically, we want to allow the
user to dismiss the log in

40
00:01:54,590 --> 00:01:56,320
view controller by
panning their

41
00:01:56,320 --> 00:01:58,270
finger from top to bottom.

42
00:01:58,270 --> 00:02:01,140
But we also want to make sure
that the two step transition

43
00:02:01,140 --> 00:02:03,410
we built last level
still works by

44
00:02:03,410 --> 00:02:04,790
tapping the sign in button.

45
00:02:08,340 --> 00:02:10,979
There are three phases to an
interactive transition that

46
00:02:10,979 --> 00:02:12,490
we're going to have
to implement.

47
00:02:12,490 --> 00:02:15,480
The first one is starting
and setting up.

48
00:02:15,480 --> 00:02:18,290
The second one is to update
as an interaction

49
00:02:18,290 --> 00:02:20,250
changes over time.

50
00:02:20,250 --> 00:02:23,790
And the last one is to finish
or cancel the interactive

51
00:02:23,790 --> 00:02:26,310
transition.

52
00:02:26,310 --> 00:02:29,430
In our starting and setting up
phase, we need to do three

53
00:02:29,430 --> 00:02:30,890
different things.

54
00:02:30,890 --> 00:02:34,520
First, we need to install the
gesture recognizer when the

55
00:02:34,520 --> 00:02:36,290
modal finishes presenting.

56
00:02:36,290 --> 00:02:39,590
When that gesture begins, when
the user starts panning their

57
00:02:39,590 --> 00:02:43,060
finger, we need to actually
dismiss the view controller

58
00:02:43,060 --> 00:02:45,180
and start the whole
transition.

59
00:02:45,180 --> 00:02:48,760
Next, we need to implement the
interactive transition

60
00:02:48,760 --> 00:02:52,935
delegate method to return a
interactive transition object.

61
00:02:56,440 --> 00:02:57,630
This should look familiar.

62
00:02:57,630 --> 00:03:00,520
We're back in the
PathsViewController inside of

63
00:03:00,520 --> 00:03:04,050
the login button tap method,
where we're displaying the

64
00:03:04,050 --> 00:03:05,230
login view controller -

65
00:03:05,230 --> 00:03:06,910
presenting it, actually -

66
00:03:06,910 --> 00:03:10,740
and we need to install the
gesture recognizer when this

67
00:03:10,740 --> 00:03:13,050
presentation is done
so we can start

68
00:03:13,050 --> 00:03:15,430
listening for the gesture.

69
00:03:15,430 --> 00:03:18,900
We can do that by passing in
a completion block to the

70
00:03:18,900 --> 00:03:21,870
presentViewController animated
completion method.

71
00:03:21,870 --> 00:03:23,810
Inside of this block, we're
going to create a new

72
00:03:23,810 --> 00:03:28,340
UIPanGestureRecognizer, we're
going to add a target of self

73
00:03:28,340 --> 00:03:32,310
with the action being the
handleGesture method, and

74
00:03:32,310 --> 00:03:35,280
we're going to add that gesture
recognizer to the

75
00:03:35,280 --> 00:03:39,290
login view controller's view so
we're only detecting that

76
00:03:39,290 --> 00:03:43,510
gesture inside of that view.

77
00:03:43,510 --> 00:03:46,500
Now that we've installed our
gesture recognizer, we need to

78
00:03:46,500 --> 00:03:49,100
implement the handleGesture
method on the

79
00:03:49,100 --> 00:03:51,110
PathsViewController.

80
00:03:51,110 --> 00:03:54,360
This method is going to be
called many times over the

81
00:03:54,360 --> 00:03:55,860
life of this gesture.

82
00:03:55,860 --> 00:03:57,900
Each time this method is called,
we're going to want to

83
00:03:57,900 --> 00:04:01,370
switch on the gesture's state,
which can be any

84
00:04:01,370 --> 00:04:03,560
one of these constants.

85
00:04:03,560 --> 00:04:07,200
If we want to start the
dismissal, for example, when

86
00:04:07,200 --> 00:04:11,190
the gesture begins, we would
add the code to the

87
00:04:11,190 --> 00:04:15,130
UIGestureRecognizerStateBegan
block.

88
00:04:15,130 --> 00:04:17,760
When we call dismiss, this
is going to kick off the

89
00:04:17,760 --> 00:04:18,500
transition.

90
00:04:18,500 --> 00:04:21,450
But how do we make sure that
it becomes an interactive

91
00:04:21,450 --> 00:04:24,110
transition instead of just a
normal animated transition?

92
00:04:29,260 --> 00:04:31,237
To do that, we need to implement
the interactionContr

93
00:04:31,237 --> 00:04:36,770
ollerForDismissal delegate
method on PathsViewController.

94
00:04:36,770 --> 00:04:39,990
Returning from that method is an
object that should conform

95
00:04:39,990 --> 00:04:42,250
to the UIViewController
interactive

96
00:04:42,250 --> 00:04:44,240
transitioning protocol.

97
00:04:44,240 --> 00:04:47,470
In our animated transitions from
the last level, we had to

98
00:04:47,470 --> 00:04:50,150
create our own classes, like
balancing transition, or

99
00:04:50,150 --> 00:04:53,270
two-step transition to actually
implement those

100
00:04:53,270 --> 00:04:54,340
transitions.

101
00:04:54,340 --> 00:04:58,100
But for the interactive
transition, we can use a class

102
00:04:58,100 --> 00:05:00,475
provided by UIKit called
UIPercentDrivenI

103
00:05:00,475 --> 00:05:05,570
nteractiveTransition, and this
class implements the

104
00:05:05,570 --> 00:05:07,960
interactive transitioning
protocol.

105
00:05:07,960 --> 00:05:10,400
For example, we can use it
like this, where we just

106
00:05:10,400 --> 00:05:14,570
create a transition object, then
with that object, we can

107
00:05:14,570 --> 00:05:17,460
update the interactive
transition to a certain

108
00:05:17,460 --> 00:05:20,640
scrubber position. We can
finish the interactive

109
00:05:20,640 --> 00:05:24,300
transition, or we could cancel
the interactive transition.

110
00:05:24,300 --> 00:05:27,690
And we're using each of these
methods to learn how to drive

111
00:05:27,690 --> 00:05:31,100
the interactive transition.

112
00:05:31,100 --> 00:05:34,690
The first step, obviously, is to
just return an instance of

113
00:05:34,690 --> 00:05:36,147
this class from the
interactionContr

114
00:05:36,147 --> 00:05:39,280
ollerForDismissal delegate
method in our

115
00:05:39,280 --> 00:05:41,390
PathsViewController, like so.

116
00:05:44,020 --> 00:05:46,900
Now that we have our interactive
transition set up,

117
00:05:46,900 --> 00:05:48,190
let's move on to phase two.

118
00:05:51,370 --> 00:05:55,100
In phase two, we need to
calculate a number between 0

119
00:05:55,100 --> 00:05:59,460
and 1 based on how the gesture
changes, and update the

120
00:05:59,460 --> 00:06:00,710
interactive transition.

121
00:06:03,520 --> 00:06:05,180
So what would that look like?

122
00:06:05,180 --> 00:06:08,480
Basically what we want to do is,
as the user's finger moves

123
00:06:08,480 --> 00:06:11,700
down the screen, we want
to continuously call

124
00:06:11,700 --> 00:06:16,660
updateInteractiveTransition,
passing in a value between 0

125
00:06:16,660 --> 00:06:18,640
and 1 based on that position;

126
00:06:18,640 --> 00:06:20,480
and we're going to look
at how to calculate

127
00:06:20,480 --> 00:06:22,270
that value in a minute.

128
00:06:22,270 --> 00:06:25,580
The number we pass into
updateInteractiveTransition

129
00:06:25,580 --> 00:06:28,700
sets the timing of the
animated transition.

130
00:06:28,700 --> 00:06:32,885
For example, if we passed in
0.0, the animation would be at

131
00:06:32,885 --> 00:06:34,390
its starting position.

132
00:06:34,390 --> 00:06:38,340
If we passed in 0.5, or
50%, the animation

133
00:06:38,340 --> 00:06:39,590
would be halfway through.

134
00:06:42,710 --> 00:06:45,250
So if we want to call
updateInteractiveTransition

135
00:06:45,250 --> 00:06:48,180
continuously as a gesture
changes, we're going to want

136
00:06:48,180 --> 00:06:51,100
to go back into the
handleGesture method and open

137
00:06:51,100 --> 00:06:54,270
up the
UIGestureRecognizerStateChanged

138
00:06:54,270 --> 00:06:56,922
case and add the
code in there.

139
00:06:56,922 --> 00:06:59,010
There are two things
here we need to do.

140
00:06:59,010 --> 00:07:02,500
One is to figure out what
number to pass into

141
00:07:02,500 --> 00:07:04,330
updateInteractiveTransition.

142
00:07:04,330 --> 00:07:08,420
The other is, how do we access
the transition object that we

143
00:07:08,420 --> 00:07:09,270
created in the

144
00:07:09,270 --> 00:07:10,830
InteractiveTransition delegate?

145
00:07:13,500 --> 00:07:15,540
To fix that last problem,
we'll go back in the

146
00:07:15,540 --> 00:07:18,690
PathsViewController header and
add a property for that

147
00:07:18,690 --> 00:07:21,150
PercentDrivenInt
eractiveTransition, and we'll

148
00:07:21,150 --> 00:07:24,490
just call it something like
myInteractiveDismissal.

149
00:07:24,490 --> 00:07:27,390
Then, in our PathsViewController
dismissal

150
00:07:27,390 --> 00:07:30,370
delegate method, we'll
set that property

151
00:07:30,370 --> 00:07:31,620
and then return it.

152
00:07:36,210 --> 00:07:39,470
Now, back in our handleGesture
method, which again is defined

153
00:07:39,470 --> 00:07:42,720
on PathsViewController, we'll
have access to that property,

154
00:07:42,720 --> 00:07:43,580
and be able to call

155
00:07:43,580 --> 00:07:45,450
updateInteractiveTransition on it.

156
00:07:45,450 --> 00:07:48,140
But we still have that one
problem left where what number

157
00:07:48,140 --> 00:07:49,860
do we pass into that method?

158
00:07:49,860 --> 00:07:53,170
And we'll figure that out now.

159
00:07:53,170 --> 00:07:56,150
If we access the
gesture.view.superview, this

160
00:07:56,150 --> 00:07:59,590
will return us the transition
context container view.

161
00:07:59,590 --> 00:08:02,960
And if we pass that view into
the translation and new

162
00:08:02,960 --> 00:08:05,480
method, it'll give us the
CGPoint that we're calling

163
00:08:05,480 --> 00:08:07,670
translation.

164
00:08:07,670 --> 00:08:11,480
Now we're going to use that y
position on that CGPoint and

165
00:08:11,480 --> 00:08:15,050
divide it by the height
of the views frame.

166
00:08:15,050 --> 00:08:18,150
That will give us the
percentTransitioned, which

167
00:08:18,150 --> 00:08:20,790
we'll pass into the update
interactive transition method.

168
00:08:23,630 --> 00:08:26,340
Let's get a better idea of what
that means by visualizing

169
00:08:26,340 --> 00:08:29,430
the percentTransition
calculation that we just made.

170
00:08:29,430 --> 00:08:31,870
Here we have the view hierarchy,
and the user has

171
00:08:31,870 --> 00:08:35,130
panned their finger down the
screen a certain length.

172
00:08:35,130 --> 00:08:39,880
Now, that orange bar is going to
signify the translation.y.

173
00:08:39,880 --> 00:08:42,539
We're going to divide that by
the height of the view, which

174
00:08:42,539 --> 00:08:44,480
corresponds to the green bar.

175
00:08:44,480 --> 00:08:46,150
Now that will give us
the result of the

176
00:08:46,150 --> 00:08:47,740
percentTransitioned.

177
00:08:47,740 --> 00:08:51,390
So in this example, it looks
like we're about 25 to 30%

178
00:08:51,390 --> 00:08:52,640
transitioned.

179
00:08:54,300 --> 00:08:56,150
So that wraps up phase two.

180
00:08:56,150 --> 00:08:59,600
Now we're moving on to phase
three, where we have to finish

181
00:08:59,600 --> 00:09:00,870
or cancel the transition.

182
00:09:04,030 --> 00:09:06,770
Back in the handleGesture
method, when the user, in the

183
00:09:06,770 --> 00:09:09,080
middle of the interactive
transition, lifts their

184
00:09:09,080 --> 00:09:12,050
finger, we have to decide
whether we want the view to

185
00:09:12,050 --> 00:09:15,270
continue animating off the screen,
or finishing, or to

186
00:09:15,270 --> 00:09:17,230
animate back into place,
which is canceling.

187
00:09:22,390 --> 00:09:24,590
Our interactive dismissal
object has a

188
00:09:24,590 --> 00:09:26,610
percent complete property.

189
00:09:26,610 --> 00:09:29,050
This will return the last
value we pass to

190
00:09:29,050 --> 00:09:32,590
updateInteractiveTransition, and
we can use that value to

191
00:09:32,590 --> 00:09:34,990
decide whether we want to
finish or cancel the

192
00:09:34,990 --> 00:09:35,880
transition.

193
00:09:35,880 --> 00:09:38,680
In this case, we're going to
finish the transition if it's

194
00:09:38,680 --> 00:09:42,310
past 25%, otherwise we're
going to cancel the

195
00:09:42,310 --> 00:09:43,560
transition.

196
00:09:45,420 --> 00:09:48,560
We also want to make sure we
implement the case where the

197
00:09:48,560 --> 00:09:50,490
gesture is canceled.

198
00:09:50,490 --> 00:09:52,840
Now, this can happen if the
gesture is, let's say,

199
00:09:52,840 --> 00:09:55,060
disabled somewhere
else in the code.

200
00:09:55,060 --> 00:09:57,500
In that case, we're always going
to want to cancel the

201
00:09:57,500 --> 00:09:58,750
interactive transition.

202
00:10:03,080 --> 00:10:06,010
Now get into the challenges
and create your first

203
00:10:06,010 --> 00:10:07,260
interactive transition.

