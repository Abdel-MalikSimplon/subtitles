1
00:00:00,000 --> 00:00:02,050

2
00:00:02,050 --> 00:00:05,350
Welcome back to Core
iOS 7, level 7.

3
00:00:05,350 --> 00:00:07,240
In this level, we're going to
be talking about some of the

4
00:00:07,240 --> 00:00:09,730
cool new improvements
to Auto Layout.

5
00:00:09,730 --> 00:00:12,780
And the biggest improvement into
Auto Layout in iOS 7 is

6
00:00:12,780 --> 00:00:14,030
the new workflow.

7
00:00:14,030 --> 00:00:16,300

8
00:00:16,300 --> 00:00:19,550
In iOS 6, it was impossible to
have ambiguous layout when you

9
00:00:19,550 --> 00:00:22,270
were using Auto Layout with
Interface Builder--

10
00:00:22,270 --> 00:00:25,340
ambiguous layout being a
situation where you didn't

11
00:00:25,340 --> 00:00:28,760
have enough constraints to fully
describe the layout.

12
00:00:28,760 --> 00:00:30,730
Now this sounds like it
was a good thing.

13
00:00:30,730 --> 00:00:33,210
But in practice, it was actually
very frustrating,

14
00:00:33,210 --> 00:00:35,610
because Interface Builder
would automatically add

15
00:00:35,610 --> 00:00:37,530
missing constraints for you.

16
00:00:37,530 --> 00:00:39,570
And sometimes it would be adding
constraints that you

17
00:00:39,570 --> 00:00:42,890
never expected to be there
in the first place.

18
00:00:42,890 --> 00:00:46,590
So the workflow in iOS 6 was
basically to just have an idea

19
00:00:46,590 --> 00:00:49,440
of what your final interface
should look like and then

20
00:00:49,440 --> 00:00:52,630
start adding constraints and
hope that nothing went wrong

21
00:00:52,630 --> 00:00:54,390
in the meantime.

22
00:00:54,390 --> 00:00:57,860
In iOS 7 and Xcode 5,
this workflow has

23
00:00:57,860 --> 00:00:59,110
been greatly improved.

24
00:00:59,110 --> 00:01:02,630

25
00:01:02,630 --> 00:01:05,800
First, constraints are only
added one at a time.

26
00:01:05,800 --> 00:01:09,060
And in fact, Xcode 5 is never
going to add an explicit

27
00:01:09,060 --> 00:01:12,840
constraint unless
you ask it to.

28
00:01:12,840 --> 00:01:15,460
One trade off of this, of
course, is that you can have

29
00:01:15,460 --> 00:01:18,400
ambiguous layout if you don't
add the right constraints.

30
00:01:18,400 --> 00:01:20,780
But there's a neat new debugging
panel that helps you

31
00:01:20,780 --> 00:01:23,040
solve these problems before
you run your app.

32
00:01:23,040 --> 00:01:26,410

33
00:01:26,410 --> 00:01:29,280
So a quick refresher on how
Xcode is laid out when you're

34
00:01:29,280 --> 00:01:31,320
using Interface Builder.

35
00:01:31,320 --> 00:01:33,590
Here you can see on the left
pane, we still have the

36
00:01:33,590 --> 00:01:36,370
Project Navigator, which lets
us select our class

37
00:01:36,370 --> 00:01:39,100
files or xib files.

38
00:01:39,100 --> 00:01:42,550
Next to that, there's an outline
that shows all of the

39
00:01:42,550 --> 00:01:45,650
different views and sub views
that are inside of an

40
00:01:45,650 --> 00:01:48,440
Interface Builder document.

41
00:01:48,440 --> 00:01:51,350
Next, there's the Editor panel,
where all of your

42
00:01:51,350 --> 00:01:53,740
dragging and dropping of
views takes place.

43
00:01:53,740 --> 00:01:56,610
And even some of your
constraints can be added here.

44
00:01:56,610 --> 00:01:59,140
At the top right is the
Inspector panel, where you're

45
00:01:59,140 --> 00:02:02,300
going to be able to do some fine
tuning and tweaks of your

46
00:02:02,300 --> 00:02:04,930
Interface Builder documents
after you have your initial

47
00:02:04,930 --> 00:02:06,840
constraints in place.

48
00:02:06,840 --> 00:02:09,520
And then at the bottom right is
the Object Library, which

49
00:02:09,520 --> 00:02:12,730
provides a really easy drag and
drop system that allows

50
00:02:12,730 --> 00:02:16,320
you to move views directly onto
the editor and have them

51
00:02:16,320 --> 00:02:18,090
added into your view
hierarchy in your

52
00:02:18,090 --> 00:02:19,340
Interface Builder document.

53
00:02:19,340 --> 00:02:22,590

54
00:02:22,590 --> 00:02:26,280
Let's start looking at this
new workflow in iOS 7.

55
00:02:26,280 --> 00:02:29,310
First, we want to make sure
that the Use Auto Layout

56
00:02:29,310 --> 00:02:33,260
checkbox is checked for any
Interface Builder documents

57
00:02:33,260 --> 00:02:35,860
where we want to have
Auto Layout active.

58
00:02:35,860 --> 00:02:38,020
Remember that you can have
Auto Layout enabled

59
00:02:38,020 --> 00:02:41,150
individually for each xib or
storyboard, which means you

60
00:02:41,150 --> 00:02:44,310
can have one xib file that uses
Auto Layout to determine

61
00:02:44,310 --> 00:02:47,090
the layout and another xib
file where the layout is

62
00:02:47,090 --> 00:02:49,190
determined entirely in code.

63
00:02:49,190 --> 00:02:50,485
It's fine to mix and match.

64
00:02:50,485 --> 00:02:53,720

65
00:02:53,720 --> 00:02:57,490
To start, we'll drag elements
from the Object Library onto

66
00:02:57,490 --> 00:02:59,010
the editor.

67
00:02:59,010 --> 00:03:01,910
Now notice that we're editing
the names inside the

68
00:03:01,910 --> 00:03:03,540
outline view here.

69
00:03:03,540 --> 00:03:05,590
This is important, because it's
going to help us keep

70
00:03:05,590 --> 00:03:08,790
track of all of our different
subviews as we lay them into

71
00:03:08,790 --> 00:03:10,040
the editor.

72
00:03:10,040 --> 00:03:13,520

73
00:03:13,520 --> 00:03:16,290
Then we'll set the properties
for each of the views that

74
00:03:16,290 --> 00:03:19,050
we've added in to our editor.

75
00:03:19,050 --> 00:03:21,490
Here, we're setting the initial
frame using the

76
00:03:21,490 --> 00:03:23,350
Inspector panel.

77
00:03:23,350 --> 00:03:25,460
And we're also setting the
background color of these

78
00:03:25,460 --> 00:03:28,040
squares so that we can see
them against the white

79
00:03:28,040 --> 00:03:29,290
background.

80
00:03:29,290 --> 00:03:49,950

81
00:03:49,950 --> 00:03:52,210
Now that we've got these
elements on the editor with

82
00:03:52,210 --> 00:03:54,710
the right properties, we're
going to want to move them

83
00:03:54,710 --> 00:03:56,690
around and put them in
what we expect to

84
00:03:56,690 --> 00:03:58,770
be their final locations.

85
00:03:58,770 --> 00:04:01,220
Now, if you don't know exactly
where these elements are going

86
00:04:01,220 --> 00:04:02,310
to end up, it's OK.

87
00:04:02,310 --> 00:04:04,550
We're going to be able to
make changes later.

88
00:04:04,550 --> 00:04:07,250
But if you do know your general
layout before you

89
00:04:07,250 --> 00:04:10,260
start, it's going to make the
process a lot easier, because

90
00:04:10,260 --> 00:04:12,260
there will be a lot less
changes down the road.

91
00:04:12,260 --> 00:04:15,740

92
00:04:15,740 --> 00:04:18,570
Now that we've got these first
few steps in place, it's time

93
00:04:18,570 --> 00:04:21,019
to start thinking about
constraints.

94
00:04:21,019 --> 00:04:23,450
The first thing you want to ask
yourself before adding any

95
00:04:23,450 --> 00:04:27,480
constraints is, what would the
frame of this view look like

96
00:04:27,480 --> 00:04:30,170
if we were to write
it in code?

97
00:04:30,170 --> 00:04:32,140
In this case, our purple squares
frame would look

98
00:04:32,140 --> 00:04:33,550
something like this.

99
00:04:33,550 --> 00:04:37,960
Our origin would be 20 points
from the left, 50 points from

100
00:04:37,960 --> 00:04:43,260
the top, and 40 points wide
and 40 points high.

101
00:04:43,260 --> 00:04:46,410
So our job is to figure out what
constraints we have to

102
00:04:46,410 --> 00:04:50,680
apply to this purple square in
order to generate that frame

103
00:04:50,680 --> 00:04:52,025
using the Auto Layout system.

104
00:04:52,025 --> 00:04:55,530

105
00:04:55,530 --> 00:04:58,210
There are multiple ways that
you can add constraints to

106
00:04:58,210 --> 00:04:59,850
reach the same goal.

107
00:04:59,850 --> 00:05:02,470
So we'll just look at
a few of those now.

108
00:05:02,470 --> 00:05:06,100
Starting with the exposition,
we'll apply a Leading Space to

109
00:05:06,100 --> 00:05:12,140
Container constraint between the
view and it's superview.

110
00:05:12,140 --> 00:05:15,350
This is going to give us 20
points of spacing between the

111
00:05:15,350 --> 00:05:18,800
edge of that superview's wall
and the edge of the purple

112
00:05:18,800 --> 00:05:23,780
square, thus giving us the
effect of setting our frame 20

113
00:05:23,780 --> 00:05:27,100
points from the start
of the superview.

114
00:05:27,100 --> 00:05:30,180
When our x-position constraint
is in place, it's time to move

115
00:05:30,180 --> 00:05:32,480
on to our y-position
constraint.

116
00:05:32,480 --> 00:05:35,130
And we'll use a similar approach
that we used before.

117
00:05:35,130 --> 00:05:39,170
Here, we'll use a Top Space to
Container constraint, which is

118
00:05:39,170 --> 00:05:42,480
going to constrain the top space
between the superview's

119
00:05:42,480 --> 00:05:47,020
edge and the purple
square's edge.

120
00:05:47,020 --> 00:05:49,890
Finally, we'll need to add width
and height constraints

121
00:05:49,890 --> 00:05:53,170
to determine how wide and
tall the square is.

122
00:05:53,170 --> 00:05:55,680
So we'll add width and height
constraints directly

123
00:05:55,680 --> 00:05:56,930
here to this view.

124
00:05:56,930 --> 00:05:59,670

125
00:05:59,670 --> 00:06:03,610
Now, you're always going to need
to represent the x, y,

126
00:06:03,610 --> 00:06:07,520
width, and height constraints
for every single view inside

127
00:06:07,520 --> 00:06:09,360
of your Interface Builder
document.

128
00:06:09,360 --> 00:06:10,960
But there's different ways
to go about this.

129
00:06:10,960 --> 00:06:13,380
You don't always have to set
them directly on the left

130
00:06:13,380 --> 00:06:17,520
edge, top edge, and width
and height explicitly.

131
00:06:17,520 --> 00:06:20,900
One example of this is setting
the x and y position using

132
00:06:20,900 --> 00:06:22,370
center constraints.

133
00:06:22,370 --> 00:06:25,260
So if we add a Center
Horizontally in Container

134
00:06:25,260 --> 00:06:28,650
constraint to the purple square,
it's going to make

135
00:06:28,650 --> 00:06:30,740
sure that that square
sits right in the

136
00:06:30,740 --> 00:06:33,750
middle of its superview.

137
00:06:33,750 --> 00:06:37,230
Likewise, if we set the Center
Vertically in Container

138
00:06:37,230 --> 00:06:40,240
constraint on the purple square,
it's going to make

139
00:06:40,240 --> 00:06:43,900
sure that that purple square is
always right in the middle

140
00:06:43,900 --> 00:06:46,200
vertically of that superview.

141
00:06:46,200 --> 00:06:48,730
So this is another way that we
can set x and y position

142
00:06:48,730 --> 00:06:50,890
without setting an explicit
number from

143
00:06:50,890 --> 00:06:52,140
the left or the top.

144
00:06:52,140 --> 00:06:55,020

145
00:06:55,020 --> 00:06:57,900
Here you can see one way that
we can do this in Xcode.

146
00:06:57,900 --> 00:07:00,330
We can right-click and
drag from the purple

147
00:07:00,330 --> 00:07:02,750
square to the superview.

148
00:07:02,750 --> 00:07:04,900
And when we do, we get
a list of constraint

149
00:07:04,900 --> 00:07:06,090
options that pops up.

150
00:07:06,090 --> 00:07:08,790
And we can choose our
constraints right there.

151
00:07:08,790 --> 00:07:10,810
So here, you can see I'm
adding a leading space

152
00:07:10,810 --> 00:07:20,850
constraint, a top space
constraint, and a width

153
00:07:20,850 --> 00:07:22,100
constraint.

154
00:07:22,100 --> 00:07:25,870

155
00:07:25,870 --> 00:07:28,870
So you probably noticed that as
we were adding constraints,

156
00:07:28,870 --> 00:07:32,670
they were turning orange in the
Interface Builder layout.

157
00:07:32,670 --> 00:07:35,660
Those colors tell us something
about the state of the layout

158
00:07:35,660 --> 00:07:37,390
while we're working.

159
00:07:37,390 --> 00:07:40,110
Orange means ambiguous layout.

160
00:07:40,110 --> 00:07:43,240
Again, we don't have enough
constraints to determine the

161
00:07:43,240 --> 00:07:47,330
entirety of the layout from the
constraints we've added.

162
00:07:47,330 --> 00:07:49,150
In this example, we're
missing a height

163
00:07:49,150 --> 00:07:51,380
constraint on that view.

164
00:07:51,380 --> 00:07:54,920
We've set the x position,
the y position, and

165
00:07:54,920 --> 00:07:56,020
the width of it.

166
00:07:56,020 --> 00:07:57,940
But we haven't set the
height constraint.

167
00:07:57,940 --> 00:08:01,260

168
00:08:01,260 --> 00:08:03,810
The reason the ambiguous layout
is bad for the Auto

169
00:08:03,810 --> 00:08:06,310
Layout system is that it
doesn't have enough

170
00:08:06,310 --> 00:08:10,330
information to determine how
high this view should be.

171
00:08:10,330 --> 00:08:12,110
We don't give it a height
constraint.

172
00:08:12,110 --> 00:08:15,890
It could be the final number
we're expecting, which is to

173
00:08:15,890 --> 00:08:17,690
produce a square.

174
00:08:17,690 --> 00:08:20,350
Or it could stretch it out to be
a really long rectangle and

175
00:08:20,350 --> 00:08:21,770
have a really big height.

176
00:08:21,770 --> 00:08:23,920
Or it could have a really
small height.

177
00:08:23,920 --> 00:08:26,090
Fact of the matter is, if we
don't declare a height

178
00:08:26,090 --> 00:08:29,950
constraint, all of those are
valid outputs, and thus the

179
00:08:29,950 --> 00:08:31,200
layout is ambiguous.

180
00:08:31,200 --> 00:08:34,490

181
00:08:34,490 --> 00:08:37,750
One of the great parts about the
changes in iOS 7 is that

182
00:08:37,750 --> 00:08:41,520
there's now a Debugging panel
for Auto Layout built right

183
00:08:41,520 --> 00:08:43,980
into the Outline View.

184
00:08:43,980 --> 00:08:47,540
If you create a situation by
adding constraints that causes

185
00:08:47,540 --> 00:08:50,770
something like ambiguous layout,
you'll first see this

186
00:08:50,770 --> 00:08:54,540
little orange arrow appear at
the top of the Outline View.

187
00:08:54,540 --> 00:08:57,220
If you click this arrow, you'll
get a full list of all

188
00:08:57,220 --> 00:08:59,520
the problems that have
automatically been detected in

189
00:08:59,520 --> 00:09:01,630
your layout.

190
00:09:01,630 --> 00:09:04,740
Here you can see that on our
purple square the system is

191
00:09:04,740 --> 00:09:08,290
telling us that we need
constraints for height.

192
00:09:08,290 --> 00:09:11,910
And as a result of that, we
have a misplaced view.

193
00:09:11,910 --> 00:09:15,260
Our expected height is 0, but
our actual height in the

194
00:09:15,260 --> 00:09:17,490
Interface Builder
system is 80.

195
00:09:17,490 --> 00:09:19,410
So we need to add another
constraint in

196
00:09:19,410 --> 00:09:21,060
order to fix this.

197
00:09:21,060 --> 00:09:24,160
This Debugging panel is a great
place to check if you've

198
00:09:24,160 --> 00:09:27,030
added constraints but you're
still seeing unexpected

199
00:09:27,030 --> 00:09:28,280
behavior in your layouts.

200
00:09:28,280 --> 00:09:32,070

201
00:09:32,070 --> 00:09:35,160
So if we go back and we add a
height constraint onto this

202
00:09:35,160 --> 00:09:38,630
purple square, then everything
will turn blue.

203
00:09:38,630 --> 00:09:40,930
Blue is what we're hoping for.

204
00:09:40,930 --> 00:09:43,270
If all of your constraints
are blue, then that means

205
00:09:43,270 --> 00:09:45,540
everything's been set
up properly and your

206
00:09:45,540 --> 00:09:47,015
layout is in place.

207
00:09:47,015 --> 00:09:50,150

208
00:09:50,150 --> 00:09:53,120
As you add more and more
constraints in your editor,

209
00:09:53,120 --> 00:09:56,140
your Outline View is going
to get bigger and bigger.

210
00:09:56,140 --> 00:09:58,660
So it's important to remember
where all these constraints

211
00:09:58,660 --> 00:10:01,020
are placed in case you need
to go find them to make a

212
00:10:01,020 --> 00:10:03,630
change later on.

213
00:10:03,630 --> 00:10:06,030
So here you can see that
constraints like width and

214
00:10:06,030 --> 00:10:09,240
height that directly affect the
view that you're working

215
00:10:09,240 --> 00:10:13,870
with appear nested inside of
that view in the Outline View.

216
00:10:13,870 --> 00:10:17,390
Constraints that affect the
position of that view in the

217
00:10:17,390 --> 00:10:20,350
superview appear nested
inside of the

218
00:10:20,350 --> 00:10:22,360
superview in the outline.

219
00:10:22,360 --> 00:10:24,930
This Outline View will get more
and more complex as you

220
00:10:24,930 --> 00:10:28,350
add more constraints into your
layout, so just be careful.

221
00:10:28,350 --> 00:10:32,090

222
00:10:32,090 --> 00:10:35,390
We just looked at how to add
constraints between a view and

223
00:10:35,390 --> 00:10:37,770
a superview, which is great
for getting our

224
00:10:37,770 --> 00:10:40,070
initial layout in place.

225
00:10:40,070 --> 00:10:42,740
Sometimes you'll want to create
constraints between

226
00:10:42,740 --> 00:10:46,300
views that are siblings or
appear closer to each other in

227
00:10:46,300 --> 00:10:48,370
the layout.

228
00:10:48,370 --> 00:10:50,150
In this case, you'll want
to consider applying the

229
00:10:50,150 --> 00:10:53,250
constraints between the two
views directly instead of

230
00:10:53,250 --> 00:10:54,500
involving the superview.

231
00:10:54,500 --> 00:10:58,310

232
00:10:58,310 --> 00:11:02,490
For example, if we have these
two squares, and the purple

233
00:11:02,490 --> 00:11:05,810
square already has constraints
for leading space and top

234
00:11:05,810 --> 00:11:09,590
space, your first instinct
might be to add a leading

235
00:11:09,590 --> 00:11:12,530
space constraint to
the red square.

236
00:11:12,530 --> 00:11:15,710
Instead, you could add a left
constraint between the purple

237
00:11:15,710 --> 00:11:18,510
square and the red square
to give the red

238
00:11:18,510 --> 00:11:21,310
square its x position.

239
00:11:21,310 --> 00:11:24,100
Adding that left constraint will
say, take the left edge

240
00:11:24,100 --> 00:11:26,740
of the red square and line it
up with the left edge of the

241
00:11:26,740 --> 00:11:28,430
purple square.

242
00:11:28,430 --> 00:11:32,010
Similarly, we could use a top
space constraint here to

243
00:11:32,010 --> 00:11:35,950
constrain the top edge of the
red square to the superview.

244
00:11:35,950 --> 00:11:39,640
Or we could add a center y
constraint between the purple

245
00:11:39,640 --> 00:11:43,330
square and the red square to
make sure that the centers of

246
00:11:43,330 --> 00:11:47,610
those two squares always stay
on the same horizontal line.

247
00:11:47,610 --> 00:11:49,960
So you have lots of options when
you're adding constraints

248
00:11:49,960 --> 00:11:52,020
to pin views together.

249
00:11:52,020 --> 00:11:55,080
Then you would just add a
horizontal spacing constraint

250
00:11:55,080 --> 00:11:57,990
between the purple square
and the red square.

251
00:11:57,990 --> 00:12:01,020
And that will be enough to
define the red square's x and

252
00:12:01,020 --> 00:12:02,270
y position.

253
00:12:02,270 --> 00:12:05,870

254
00:12:05,870 --> 00:12:07,560
Here you can see a
demo of all this

255
00:12:07,560 --> 00:12:09,470
working together in Xcode.

256
00:12:09,470 --> 00:12:12,200
We've got our purple square
and our red square.

257
00:12:12,200 --> 00:12:16,540
And to start, we're applying a
center y constraint between

258
00:12:16,540 --> 00:12:17,790
the purple and red.

259
00:12:17,790 --> 00:12:23,080

260
00:12:23,080 --> 00:12:25,710
Then we're applying a horizontal
spacing constraint

261
00:12:25,710 --> 00:12:27,120
between them.

262
00:12:27,120 --> 00:12:30,150
And finally, we'll set the width
and height of the red

263
00:12:30,150 --> 00:12:33,720
square so that all four of those
x y width and height

264
00:12:33,720 --> 00:12:35,450
constraints are represented.

265
00:12:35,450 --> 00:12:38,070
And when we do this, all of
our constraints turn blue,

266
00:12:38,070 --> 00:12:40,290
because we don't have
an ambiguous layout.

267
00:12:40,290 --> 00:12:41,540
And we're good to go.

268
00:12:41,540 --> 00:12:44,110

269
00:12:44,110 --> 00:12:46,910
We're doing good with our
Auto Layout workflow.

270
00:12:46,910 --> 00:12:49,810
We've started out by dragging
a bunch of views onto the

271
00:12:49,810 --> 00:12:51,080
Editor panel.

272
00:12:51,080 --> 00:12:52,830
Then we've added a bunch
of constraints.

273
00:12:52,830 --> 00:12:56,350
But what happens if we decide
to move the position of one

274
00:12:56,350 --> 00:13:00,780
view in the editor after we've
added a constraint?

275
00:13:00,780 --> 00:13:03,180
In iOS 7, there's a different
behavior than

276
00:13:03,180 --> 00:13:05,830
there was in iOS 6.

277
00:13:05,830 --> 00:13:09,310
So if you move a view from
one spot to another after

278
00:13:09,310 --> 00:13:12,490
constraints have been added,
you're going to see this red

279
00:13:12,490 --> 00:13:15,770
dotted outline of where
the view used to be.

280
00:13:15,770 --> 00:13:19,140
This appears whenever you've
moved a view after you've

281
00:13:19,140 --> 00:13:21,090
added a constraint.

282
00:13:21,090 --> 00:13:24,560
This outline appears because
Interface Builder doesn't know

283
00:13:24,560 --> 00:13:26,390
if you meant to move
that view or not.

284
00:13:26,390 --> 00:13:31,750

285
00:13:31,750 --> 00:13:35,590
Here you can see moving that red
square to a new position.

286
00:13:35,590 --> 00:13:38,820
If this was a mistake, and we
want to place it back to where

287
00:13:38,820 --> 00:13:42,480
it should be as defined by the
constraints, then we'll choose

288
00:13:42,480 --> 00:13:46,940
the Update Frames menu option
from the Resolve Auto Layout

289
00:13:46,940 --> 00:13:50,770
Issues tool, which appears at
the bottom of the editor.

290
00:13:50,770 --> 00:13:54,290
If we really do want to move
this view to a new position,

291
00:13:54,290 --> 00:13:57,580
then we'll choose the Update
Constraints option from that

292
00:13:57,580 --> 00:13:59,900
Auto Layout Issues tool.

293
00:13:59,900 --> 00:14:02,980
And that will update those
constraints to put the view in

294
00:14:02,980 --> 00:14:04,160
the new spot.

295
00:14:04,160 --> 00:14:05,520
Here you can see that
the constraints

296
00:14:05,520 --> 00:14:06,770
have now been updated.

297
00:14:06,770 --> 00:14:09,540

298
00:14:09,540 --> 00:14:11,800
But we've got a little
problem.

299
00:14:11,800 --> 00:14:14,760
When you choose Update
Constraints from that Auto

300
00:14:14,760 --> 00:14:19,320
Layout Resolve Issues menu, it
doesn't actually change the

301
00:14:19,320 --> 00:14:20,660
constraint type.

302
00:14:20,660 --> 00:14:23,240
It just changes the value
that's applied to the

303
00:14:23,240 --> 00:14:25,850
constraint.

304
00:14:25,850 --> 00:14:28,880
So this can sometimes lead to
constraints that don't really

305
00:14:28,880 --> 00:14:31,750
make logical sense anymore.

306
00:14:31,750 --> 00:14:35,400
In this example, we've moved our
red square from the right

307
00:14:35,400 --> 00:14:38,920
of the purple square,
down below it.

308
00:14:38,920 --> 00:14:42,020
So you'd expect that there would
be a vertical spacing

309
00:14:42,020 --> 00:14:46,470
constraint and maybe a left
or a leading constraint.

310
00:14:46,470 --> 00:14:49,650
But instead, we've still got
this y position constraint,

311
00:14:49,650 --> 00:14:53,450
now with a negative value,
and a horizontal position

312
00:14:53,450 --> 00:14:57,430
constraint also with
a negative value.

313
00:14:57,430 --> 00:15:00,510
This doesn't really make
any sense anymore.

314
00:15:00,510 --> 00:15:02,900
So we probably want to go
in and delete these two

315
00:15:02,900 --> 00:15:07,480
constraints and then add new
constraints to the purple

316
00:15:07,480 --> 00:15:09,670
square so they make a
lot more sense when

317
00:15:09,670 --> 00:15:11,980
we're debugging later.

318
00:15:11,980 --> 00:15:14,600
This is one of the negative
side effects of using the

319
00:15:14,600 --> 00:15:17,830
Resolve Auto Layout
Issues menu.

320
00:15:17,830 --> 00:15:19,860
Sometimes it can get
you out of a jam.

321
00:15:19,860 --> 00:15:22,210
But a lot of times, it'll just
add constraints in weird

322
00:15:22,210 --> 00:15:23,380
places for you.

323
00:15:23,380 --> 00:15:24,630
So be careful.

324
00:15:24,630 --> 00:15:26,970

325
00:15:26,970 --> 00:15:29,030
So now it's time for you to
practice working with Auto

326
00:15:29,030 --> 00:15:30,280
Layout in the challenges.

327
00:15:30,280 --> 00:15:33,929