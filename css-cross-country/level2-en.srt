1
00:00:00,000 --> 00:00:24,180
[MUSIC PLAYING]

2
00:00:24,180 --> 00:00:26,720
You're watching CSS Cross
Country, and this is level

3
00:00:26,720 --> 00:00:28,660
two, Clear Carving.

4
00:00:28,660 --> 00:00:31,440
In level two we'll be discussing
clearing our floats

5
00:00:31,440 --> 00:00:35,240
and inheritance and
specificity.

6
00:00:35,240 --> 00:00:37,590
So now that we've discussed the
float property, let's talk

7
00:00:37,590 --> 00:00:39,650
about clearing those floats.

8
00:00:39,650 --> 00:00:43,680
If the other items inside of a
container are in danger of not

9
00:00:43,680 --> 00:00:46,780
extending beyond that of the
floated item, the parent

10
00:00:46,780 --> 00:00:49,160
container isn't going to stretch
to match the height of

11
00:00:49,160 --> 00:00:50,690
any floated items.

12
00:00:50,690 --> 00:00:54,660
So we'll need to clear a float
if any floated items might

13
00:00:54,660 --> 00:00:56,430
extend beyond that of the other

14
00:00:56,430 --> 00:00:59,060
content that's not floating.

15
00:00:59,060 --> 00:01:02,210
Similarly, if all of the content
inside of a container

16
00:01:02,210 --> 00:01:05,650
is floating, we'll need to clear
that container as well.

17
00:01:05,650 --> 00:01:08,640
Now, there are three main
ways to clear floats.

18
00:01:08,640 --> 00:01:11,480
So the first of these methods
to clear floats is clearing

19
00:01:11,480 --> 00:01:13,430
with the subsequent element.

20
00:01:13,430 --> 00:01:16,270
What we'll do here is target
an element that falls after

21
00:01:16,270 --> 00:01:19,580
any floated content and give it
that clear both property.

22
00:01:19,580 --> 00:01:22,090
Once we clear with the
subsequent element, any floats

23
00:01:22,090 --> 00:01:25,600
from the previous container
won't overlap the elements

24
00:01:25,600 --> 00:01:27,970
inside of that subsequent
element.

25
00:01:27,970 --> 00:01:30,890
Now this works to a degree
but has a few problems.

26
00:01:30,890 --> 00:01:33,460
If you have to change the
sequence of elements later on,

27
00:01:33,460 --> 00:01:35,760
it's going to mess
up this clear.

28
00:01:35,760 --> 00:01:39,330
Also, if the initial parent
container that has the floated

29
00:01:39,330 --> 00:01:43,010
item has a background or a
border, such as this, this

30
00:01:43,010 --> 00:01:45,470
type of clearing isn't going
to allow that border or

31
00:01:45,470 --> 00:01:49,490
background to extend to the
bottom of the container.

32
00:01:49,490 --> 00:01:52,567
So let's move to our second way
of clearing floats, via a

33
00:01:52,567 --> 00:01:54,280
manual clear.

34
00:01:54,280 --> 00:01:56,870
Now with a manual clear we're
going to add an empty element,

35
00:01:56,870 --> 00:01:58,940
as a sibling of any
floated items

36
00:01:58,940 --> 00:02:00,950
in that parent container.

37
00:02:00,950 --> 00:02:04,380
And this is going to allow us to
clear that container prior

38
00:02:04,380 --> 00:02:07,670
to it finishing out, and it will
look something like this.

39
00:02:07,670 --> 00:02:10,229
Now this works perfectly in
extending the border or

40
00:02:10,229 --> 00:02:12,940
background of the parent
container so it stretches to

41
00:02:12,940 --> 00:02:15,540
the height of any floated
elements, but it

42
00:02:15,540 --> 00:02:17,360
also has some problems.

43
00:02:17,360 --> 00:02:20,630
In this case, we're adding
an empty element to

44
00:02:20,630 --> 00:02:22,050
achieve this clear.

45
00:02:22,050 --> 00:02:25,300
If down the line we wanted this
to no longer float, we'd

46
00:02:25,300 --> 00:02:28,640
have to go through and remove
all of these extra HTML

47
00:02:28,640 --> 00:02:33,120
elements because they'd
no longer be needed.

48
00:02:33,120 --> 00:02:36,370
So let's move on to the third,
and recommended, way to clear

49
00:02:36,370 --> 00:02:38,680
our floats, via the clearfix.

50
00:02:38,680 --> 00:02:41,780
Now, here's a bunch of code, and
don't worry too much about

51
00:02:41,780 --> 00:02:42,620
how it works yet.

52
00:02:42,620 --> 00:02:44,570
We're going to go into some
of these concepts

53
00:02:44,570 --> 00:02:46,100
later on in the course.

54
00:02:46,100 --> 00:02:48,690
For now know that clearfix
was developed back in

55
00:02:48,690 --> 00:02:51,160
2007 by Tony Aslett.

56
00:02:51,160 --> 00:02:54,650
This bit of code is refined by
Nicholas Gallagher, and what

57
00:02:54,650 --> 00:02:57,910
it allows us to do is add this
group class to the parent

58
00:02:57,910 --> 00:03:00,790
container to have itself
clear any floated

59
00:03:00,790 --> 00:03:02,980
elements inside of it.

60
00:03:02,980 --> 00:03:05,610
So if we go back to our example,
by adding the group

61
00:03:05,610 --> 00:03:08,570
class to the parent element, we
no longer need a subsequent

62
00:03:08,570 --> 00:03:11,830
element or an empty element to
clear the floats, and this

63
00:03:11,830 --> 00:03:14,710
container will automatically
stretch to the height of any

64
00:03:14,710 --> 00:03:16,630
floated elements.

65
00:03:16,630 --> 00:03:19,820
Let's move on to inheritance
and specificity.

66
00:03:19,820 --> 00:03:23,200
Now, in CSS, you need to
remember that when you set a

67
00:03:23,200 --> 00:03:26,850
property on a parent element,
any other children elements

68
00:03:26,850 --> 00:03:30,060
inside that parent are going to
inherit those styles unless

69
00:03:30,060 --> 00:03:31,280
you override it.

70
00:03:31,280 --> 00:03:34,540
So in this case, by setting
a style on the parent, the

71
00:03:34,540 --> 00:03:38,460
paragraph inside is going to
inherit the color as well.

72
00:03:38,460 --> 00:03:41,450
If you need to override these
inherited properties you can

73
00:03:41,450 --> 00:03:43,500
use what's called a
nested selector.

74
00:03:43,500 --> 00:03:46,350
So, in this case, we're adding
a nested paragraph to our

75
00:03:46,350 --> 00:03:49,330
initial selector and set a
second color that will

76
00:03:49,330 --> 00:03:53,100
override that of the first.

77
00:03:53,100 --> 00:03:55,170
If you've been dealing with
CSS for a while you're

78
00:03:55,170 --> 00:03:58,070
probably aware of situations
like this, where an ID and a

79
00:03:58,070 --> 00:04:00,420
class selector are both
contending to set the same

80
00:04:00,420 --> 00:04:02,070
property on an element.

81
00:04:02,070 --> 00:04:03,490
But which wins out?

82
00:04:03,490 --> 00:04:07,130
You're probably aware that the
ID selector will win out here.

83
00:04:07,130 --> 00:04:10,290
But without trial and error, is
there an easy way to find

84
00:04:10,290 --> 00:04:12,010
out which would win?

85
00:04:12,010 --> 00:04:14,180
In CSS there is.

86
00:04:14,180 --> 00:04:16,980
The way we do that is
with specificity.

87
00:04:16,980 --> 00:04:19,930
Now, specificity is referring
to the priority of our

88
00:04:19,930 --> 00:04:22,590
selector, and that can be
represented by a common

89
00:04:22,590 --> 00:04:25,060
delimited list of four digits.

90
00:04:25,060 --> 00:04:28,230
The fourth digit refers to the
total number of element

91
00:04:28,230 --> 00:04:30,820
selectors and our
CSS selector.

92
00:04:30,820 --> 00:04:32,920
The third digit refers
to the total

93
00:04:32,920 --> 00:04:34,970
number of class selectors.

94
00:04:34,970 --> 00:04:38,350
The second digit, the total
number of ID selectors.

95
00:04:38,350 --> 00:04:42,010
And the first, whether or not
we have inline styles.

96
00:04:42,010 --> 00:04:44,560
But what does this look
like in practice?

97
00:04:44,560 --> 00:04:47,590
Here I have an example of a
simple element selector.

98
00:04:47,590 --> 00:04:49,970
So my common delimited
list has a 1

99
00:04:49,970 --> 00:04:52,090
in the fourth position.

100
00:04:52,090 --> 00:04:54,330
Next we have a class selector.

101
00:04:54,330 --> 00:04:57,490
It has a 1 in the third
digit position.

102
00:04:57,490 --> 00:04:59,740
We can find out which one would
win out if they are

103
00:04:59,740 --> 00:05:03,700
competing to apply a property to
an element via this common

104
00:05:03,700 --> 00:05:06,740
delimited list now, by comparing
whether or not they

105
00:05:06,740 --> 00:05:09,550
have a digit in a
higher position.

106
00:05:09,550 --> 00:05:12,760
If we have an ID selector, then
there'll be a 1 in that

107
00:05:12,760 --> 00:05:14,180
second position.

108
00:05:14,180 --> 00:05:17,070
And if we an inline style,
there'll be a 1 in the first

109
00:05:17,070 --> 00:05:19,210
position, meaning this
overrules the

110
00:05:19,210 --> 00:05:21,030
previous three versions.

111
00:05:21,030 --> 00:05:24,340
The important value added to a
property in CSS is going to

112
00:05:24,340 --> 00:05:27,970
override all of these previous
examples, so it's important to

113
00:05:27,970 --> 00:05:31,140
remember that the important
value shouldn't be used unless

114
00:05:31,140 --> 00:05:32,800
absolutely necessary.

115
00:05:32,800 --> 00:05:36,190
Let's take a look at a few more
complicated examples.

116
00:05:36,190 --> 00:05:39,390
In this first selector
we have two classes

117
00:05:39,390 --> 00:05:41,310
and one element selector.

118
00:05:41,310 --> 00:05:45,080
And in the second we have two
classes and two elements.

119
00:05:45,080 --> 00:05:48,160
So in this case, since the
highest priority digit, the

120
00:05:48,160 --> 00:05:52,390
class selector, has the same
value it'll default back to

121
00:05:52,390 --> 00:05:55,310
the element selector to
determine that the second

122
00:05:55,310 --> 00:05:57,760
version would win out if they're
trying to apply the

123
00:05:57,760 --> 00:05:59,780
same style.

124
00:05:59,780 --> 00:06:02,940
Remember, though, that just
having one ID selector will

125
00:06:02,940 --> 00:06:05,320
override both of these previous
examples no matter

126
00:06:05,320 --> 00:06:08,300
how many class and element
selectors they have.

127
00:06:08,300 --> 00:06:11,480
It's because of this it's
recommended in many cases to

128
00:06:11,480 --> 00:06:13,670
try to keep the number
of ID selectors you

129
00:06:13,670 --> 00:06:15,450
use down to a minimum.

130
00:06:15,450 --> 00:06:17,130
If you'd like to learn
more about this

131
00:06:17,130 --> 00:06:20,030
visit link one below.

132
00:06:20,030 --> 00:06:22,720
Here's an example of how to
deal with a specificity.

133
00:06:22,720 --> 00:06:25,690
In this case, we have a
container with an ID and that

134
00:06:25,690 --> 00:06:29,150
ID is setting a color on
both of its paragraphs.

135
00:06:29,150 --> 00:06:31,900
If we have a paragraph that has
a featured class, and we

136
00:06:31,900 --> 00:06:35,000
want to give it a special
color via that class, we

137
00:06:35,000 --> 00:06:38,120
simply can't use a class
selector to change the color

138
00:06:38,120 --> 00:06:41,730
that's inherited from the
ID and element selector.

139
00:06:41,730 --> 00:06:42,860
Well why is this?

140
00:06:42,860 --> 00:06:45,440
If we look at the specificity
numbers, we can see that the

141
00:06:45,440 --> 00:06:48,880
initial selector is so much more
specific than our simple

142
00:06:48,880 --> 00:06:52,290
class selector that the class
selector will not win out over

143
00:06:52,290 --> 00:06:54,660
that initial color
declaration.

144
00:06:54,660 --> 00:06:57,780
The first way we can fix this
badly is via the important

145
00:06:57,780 --> 00:06:59,710
property that we just
talked about.

146
00:06:59,710 --> 00:07:03,260
This will make this second
declaration override the first

147
00:07:03,260 --> 00:07:05,700
but, like we said, we're
completely overriding our

148
00:07:05,700 --> 00:07:09,040
cascade order and creating
a maintenance nightmare.

149
00:07:09,040 --> 00:07:11,370
Let's take a look at the correct
way to override the

150
00:07:11,370 --> 00:07:12,990
initial rule.

151
00:07:12,990 --> 00:07:16,990
We can nest our class selector
inside of an ID selector and

152
00:07:16,990 --> 00:07:20,220
the specificity will be
increased as so, so that it

153
00:07:20,220 --> 00:07:25,170
becomes the version that
is used by the browser.

154
00:07:25,170 --> 00:07:26,580
That does it for level 2.

155
00:07:26,580 --> 00:07:27,780
Good luck on the challenges.

156
00:07:27,780 --> 00:07:29,280
I'll be out carving
up the slopes.