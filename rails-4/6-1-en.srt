1
00:00:01,428 --> 00:00:01,904
[SINGING]

2
00:00:01,904 --> 00:00:05,720
Wanted and captured without
bail, locked and forgotten in

3
00:00:05,720 --> 00:00:06,110
rusty jail.

4
00:00:06,110 --> 00:00:08,488
Zombies attacked, the
townsfolk fled.

5
00:00:08,488 --> 00:00:10,476
Those who were left
became the undead.

6
00:00:10,476 --> 00:00:12,464
He's a zombie outlaw.

7
00:00:12,464 --> 00:00:14,452
He's a zombie outlaw.

8
00:00:14,452 --> 00:00:18,428
And he's hunting the law
that left him for dead,

9
00:00:18,428 --> 00:00:21,410
for dead, for dead.

10
00:00:26,410 --> 00:00:28,510
I'm Greg Pollack and
you're watching

11
00:00:28,510 --> 00:00:30,260
Rails 4 Zombie Outlaws.

12
00:00:30,260 --> 00:00:33,670
In this level, we're going to
be going over ETags, Dalli,

13
00:00:33,670 --> 00:00:37,210
and Cache Digests.

14
00:00:37,210 --> 00:00:40,450
One of the new features in Rails
4 is declarative ETags.

15
00:00:40,450 --> 00:00:43,080
But in order to understand how
to use them, you need to

16
00:00:43,080 --> 00:00:44,780
understand what ETags are.

17
00:00:44,780 --> 00:00:46,940
And since that's something
that not everybody

18
00:00:46,940 --> 00:00:49,550
understands, I thought I would
give a brief introduction.

19
00:00:49,550 --> 00:00:51,020
If you already know what
they are, feel

20
00:00:51,020 --> 00:00:53,100
free to skip on ahead.

21
00:00:53,100 --> 00:00:55,870
Rails 3 and 4 apps by
default use ETags.

22
00:00:55,870 --> 00:00:57,130
But what does that mean?

23
00:00:57,130 --> 00:01:00,280
Well here's the default ETag
behavior, here we have our

24
00:01:00,280 --> 00:01:03,170
client, which is probably a
browser that requests a web

25
00:01:03,170 --> 00:01:04,390
page from our Rails app.

26
00:01:04,390 --> 00:01:07,530
Our Rails app renders out the
entire response body.

27
00:01:07,530 --> 00:01:11,140
Then it creates an ETag by doing
an MD5 hash on the

28
00:01:11,140 --> 00:01:12,335
entire response body.

29
00:01:12,335 --> 00:01:15,250
The code looks something
like this.

30
00:01:15,250 --> 00:01:18,810
Then it sends back to the client
the response body and

31
00:01:18,810 --> 00:01:21,380
the ETag as a header field.

32
00:01:21,380 --> 00:01:23,940
The client is going to
cache the response

33
00:01:23,940 --> 00:01:25,580
and store the ETag.

34
00:01:25,580 --> 00:01:28,840
Then the next time we request
that same page, the client is

35
00:01:28,840 --> 00:01:34,210
going to send the ETag in the
if none match header.

36
00:01:34,210 --> 00:01:38,280
Don't ask me why the header that
it sends to the browser

37
00:01:38,280 --> 00:01:40,260
isn't called ETag.

38
00:01:40,260 --> 00:01:43,850
It's called, if none match,
that's just what we use, it's

39
00:01:43,850 --> 00:01:46,710
weird, just get used to it.

40
00:01:46,710 --> 00:01:48,960
Once the Rails app receives the
request, it renders out

41
00:01:48,960 --> 00:01:50,975
the entire response body.

42
00:01:50,975 --> 00:01:53,665
It then creates a ETag
in the same way.

43
00:01:53,665 --> 00:01:57,580
It then compares the ETag that
was sent over with the one it

44
00:01:57,580 --> 00:01:58,750
just generated.

45
00:01:58,750 --> 00:02:01,500
If the ETags match,
the body is not

46
00:02:01,500 --> 00:02:03,470
sent back to our client.

47
00:02:03,470 --> 00:02:07,590
It is simply sent the status
code 304 not modified.

48
00:02:07,590 --> 00:02:10,020
That tells our client's browser
that nothing on the

49
00:02:10,020 --> 00:02:13,180
page has changed since the last
request and it can load

50
00:02:13,180 --> 00:02:14,905
the entire page from
their cache.

51
00:02:18,790 --> 00:02:22,620
ETag stands for entity tag and
it's simply a key we use to

52
00:02:22,620 --> 00:02:24,810
see if the page has changed.

53
00:02:24,810 --> 00:02:27,170
If we take a look under the
covers at the headers that our

54
00:02:27,170 --> 00:02:29,260
browser is sending and
receiving, we can see on the

55
00:02:29,260 --> 00:02:31,980
first request that it
returned 200 OK.

56
00:02:31,980 --> 00:02:34,520
Which means the entire body was
included in the response

57
00:02:34,520 --> 00:02:36,180
and cached by our browser.

58
00:02:36,180 --> 00:02:38,690
You'll notice at the bottom
here, we can see the actual

59
00:02:38,690 --> 00:02:42,290
ETag that was sent with
this response.

60
00:02:42,290 --> 00:02:45,720
Here we can see on the second
request that we sent the ETag

61
00:02:45,720 --> 00:02:48,690
in the, if none match header,
down there at the bottom.

62
00:02:48,690 --> 00:02:50,820
And the server responded
with a 304 status

63
00:02:50,820 --> 00:02:52,570
code meaning not modified.

64
00:02:52,570 --> 00:02:55,450
And our browser loaded the web
page from our local cache.

65
00:02:57,990 --> 00:03:01,230
As we mentioned, by default
Rails calculates the ETag by

66
00:03:01,230 --> 00:03:04,780
generating the entire response
body and then generating an

67
00:03:04,780 --> 00:03:06,810
ETag which it sends back
to the client.

68
00:03:06,810 --> 00:03:09,480
This is great on the client side
because if it gets that

69
00:03:09,480 --> 00:03:12,360
304 not modified code, that
means it can load the entire

70
00:03:12,360 --> 00:03:15,330
page from the local cache, and
it doesn't have to re download

71
00:03:15,330 --> 00:03:16,270
everything.

72
00:03:16,270 --> 00:03:19,950
However, on the server side, we
have to re render the page

73
00:03:19,950 --> 00:03:22,540
every time to generate the ETag

74
00:03:22,540 --> 00:03:24,340
which isn't that efficient.

75
00:03:24,340 --> 00:03:28,440
If only there were a way to
generate a more specific ETag.

76
00:03:28,440 --> 00:03:30,130
That's where
fresh_when comes in.

77
00:03:32,750 --> 00:03:35,710
Here inside of our items
controller, we're going to set

78
00:03:35,710 --> 00:03:37,260
a custom ETag.

79
00:03:37,260 --> 00:03:40,180
We can do that by using,
fresh_when.

80
00:03:40,180 --> 00:03:43,060
What this is going to do is
it's going to set the ETag

81
00:03:43,060 --> 00:03:47,090
equal to the cache key of
that particular item.

82
00:03:47,090 --> 00:03:49,730
The cache key as you can see
here is a combination of the

83
00:03:49,730 --> 00:03:53,260
model name, the ID, and
the updated at field.

84
00:03:53,260 --> 00:03:56,500
It then gets the MD5 hash of
this key and that's what it

85
00:03:56,500 --> 00:03:59,590
uses as the ETag.

86
00:03:59,590 --> 00:04:01,290
So let's go through
our client-server

87
00:04:01,290 --> 00:04:02,940
scenario one more time.

88
00:04:02,940 --> 00:04:05,550
This time when our server
receives the request, it's

89
00:04:05,550 --> 00:04:08,280
going to create an ETag right
there in the controller.

90
00:04:08,280 --> 00:04:09,800
Then render the body.

91
00:04:09,800 --> 00:04:13,480
And then finally, send the
response with our ETag based

92
00:04:13,480 --> 00:04:16,290
on the items cache key.

93
00:04:16,290 --> 00:04:19,430
Then if we access the same page
for a second time, it's

94
00:04:19,430 --> 00:04:21,820
going to send the ETag
back to the server.

95
00:04:21,820 --> 00:04:24,980
Rails is going to create the
ETag in our controller again.

96
00:04:24,980 --> 00:04:27,810
Compare the ETag to the one
sent over by our browser.

97
00:04:27,810 --> 00:04:31,450
And if our ETags match, it's
going to send a 304 back to

98
00:04:31,450 --> 00:04:35,120
our browser, and not bother with
rendering out the body of

99
00:04:35,120 --> 00:04:36,670
the web page.

100
00:04:36,670 --> 00:04:39,630
So this fresh_when command
really does two things.

101
00:04:39,630 --> 00:04:42,330
First, it creates
the ETag for us.

102
00:04:42,330 --> 00:04:46,490
And then it checks to see if
the client sent an ETag with

103
00:04:46,490 --> 00:04:48,960
the request, if that
matches the ETag

104
00:04:48,960 --> 00:04:50,110
that it just generated.

105
00:04:50,110 --> 00:04:52,210
And if it does it
sends back 304.

106
00:04:52,210 --> 00:04:56,380
Otherwise it will continue
rendering out the web page.

107
00:04:56,380 --> 00:04:59,740
If we have multiple actions in
our controller that use ETags,

108
00:04:59,740 --> 00:05:02,580
they might start to look pretty
similar, and we might

109
00:05:02,580 --> 00:05:04,360
be duplicating some code.

110
00:05:04,360 --> 00:05:08,100
So how might we re factor this
repetition? Well this is where

111
00:05:08,100 --> 00:05:10,180
declarative ETags come in.

112
00:05:10,180 --> 00:05:14,480
It allows us to declare a ETag
at the top of our controller.

113
00:05:14,480 --> 00:05:17,320
We could even declare multiple
ETags at the top of our

114
00:05:17,320 --> 00:05:18,030
controller.

115
00:05:18,030 --> 00:05:21,010
So here we're declaring both
current user ID, and current

116
00:05:21,010 --> 00:05:25,700
user age, and this is going to
get combined onto our ETag.

117
00:05:25,700 --> 00:05:28,180
So as you see in the bottom
here when we do fresh_when

118
00:05:28,180 --> 00:05:31,640
item, this is the same as doing
fresh_when item, current

119
00:05:31,640 --> 00:05:33,910
user ID, current user age.