1
00:00:00,000 --> 00:00:00,477
[SINGING]

2
00:00:00,477 --> 00:00:04,770
He was wanted and captured
without bail, locked and

3
00:00:04,770 --> 00:00:07,970
forgotten in a rusty jail,
zombies attacked, the

4
00:00:07,970 --> 00:00:10,420
townsfolk fled, and those who
were left became the undead.

5
00:00:10,420 --> 00:00:14,830
He's a zombie outlaw, he's
a zombie outlaw, and he's

6
00:00:14,830 --> 00:00:21,690
hunting the law that left him
for dead, for dead, for dead.]

7
00:00:27,120 --> 00:00:28,410
I'm Gregg Pollack, and
you're watching

8
00:00:28,410 --> 00:00:30,660
Rails 4, Zombies Outlaws.

9
00:00:30,660 --> 00:00:32,800
In this level, we're going to be
going over some new testing

10
00:00:32,800 --> 00:00:34,840
features in Rails 4.

11
00:00:34,840 --> 00:00:37,490
In a default Rails 3
application, here is what the

12
00:00:37,490 --> 00:00:40,260
test folder structure
looks like.

13
00:00:40,260 --> 00:00:42,210
It should look familiar.

14
00:00:42,210 --> 00:00:44,390
Things have changed a little
bit in Rails 4.

15
00:00:44,390 --> 00:00:46,370
Here's what the test
folder structure

16
00:00:46,370 --> 00:00:49,070
looks like by default.

17
00:00:49,070 --> 00:00:51,330
First thing you might notice
here is that no longer do we

18
00:00:51,330 --> 00:00:54,130
have a functional directory.

19
00:00:54,130 --> 00:00:55,760
Those were typically
where we'd put our

20
00:00:55,760 --> 00:00:56,930
controller tests, right?

21
00:00:56,930 --> 00:01:01,200
So why not call that directory
controllers, like we are now.

22
00:01:01,200 --> 00:01:04,900
We also don't have the unit
folder anymore, so we're going

23
00:01:04,900 --> 00:01:08,170
to take the helpers folder and
move that up to the top level.

24
00:01:08,170 --> 00:01:11,600
Also you might notice that we
have a models directory.

25
00:01:11,600 --> 00:01:12,340
Makes sense.

26
00:01:12,340 --> 00:01:14,780
That's typically where we
put our model tests.

27
00:01:14,780 --> 00:01:17,190
We still have the same fixtures
and integration test

28
00:01:17,190 --> 00:01:19,310
folders, and we have
a new folder,

29
00:01:19,310 --> 00:01:22,750
which is just for mailers.

30
00:01:22,750 --> 00:01:25,690
To run our tests in Rails 3,
we would typically run rake

31
00:01:25,690 --> 00:01:28,440
test:units to run our unit test
and rake test:functionals

32
00:01:28,440 --> 00:01:30,680
to run our functional tests.

33
00:01:30,680 --> 00:01:33,180
But now with the new directory
structure, this doesn't make a

34
00:01:33,180 --> 00:01:35,130
lot of sense anymore.

35
00:01:35,130 --> 00:01:38,130
So now we can run rake
test:models to run all the tests in

36
00:01:38,130 --> 00:01:41,290
the models directory, rake
test:controllers, rake

37
00:01:41,290 --> 00:01:43,515
test:helpers, and rake
test:mailers.

38
00:01:43,515 --> 00:01:46,310
The old rake task will still
work with this new folder

39
00:01:46,310 --> 00:01:48,580
structure running the
appropriate tests.

40
00:01:48,580 --> 00:01:51,950
However, these new commands will
only work with the new

41
00:01:51,950 --> 00:01:53,385
folder structure, obviously.

42
00:01:55,910 --> 00:01:59,290
Let's say we create a new
migration for Rails app, like

43
00:01:59,290 --> 00:02:02,710
so, but we don't run
that migration.

44
00:02:02,710 --> 00:02:06,360
If we then go and run an
individual test, like you see

45
00:02:06,360 --> 00:02:10,120
here in Rails 3, it's going to
go ahead and execute it.

46
00:02:10,120 --> 00:02:11,710
No warnings, no nothing.

47
00:02:11,710 --> 00:02:13,190
It's going to run the test.

48
00:02:13,190 --> 00:02:15,830
The test might pass or it might
break because we haven't

49
00:02:15,830 --> 00:02:17,430
run that migration.

50
00:02:17,430 --> 00:02:20,670
Luckily in Rails 4, by default,
if we have migrations

51
00:02:20,670 --> 00:02:24,110
we haven't run yet, and we try
to run an individual test,

52
00:02:24,110 --> 00:02:27,060
it's going to give us a pending
migration error, as

53
00:02:27,060 --> 00:02:29,370
you see here.

54
00:02:29,370 --> 00:02:32,220
The reason for this default
behavior Rails 4 is that if

55
00:02:32,220 --> 00:02:35,490
you look inside your
test_helper.rb, you'll see

56
00:02:35,490 --> 00:02:38,770
this line at the top that says
"check pending." so that means

57
00:02:38,770 --> 00:02:40,960
every time you try to run a
test, it's going to check for

58
00:02:40,960 --> 00:02:44,500
any pending migrations.

59
00:02:44,500 --> 00:02:48,400
Rails 3 by default shipped
with performance testing.

60
00:02:48,400 --> 00:02:50,432
Bet you didn't know that.

61
00:02:50,432 --> 00:02:53,730
But in Rails 4, they
took it out.

62
00:02:53,730 --> 00:02:57,920
But those of you did use this
feature, all two of you, you

63
00:02:57,920 --> 00:03:02,620
can reinstall it by adding it
to gem file, running bundle,

64
00:03:02,620 --> 00:03:05,552
and then you can generate your
performance tests this way.

65
00:03:09,490 --> 00:03:13,500
The default testing framework
in Rails 4 is now MiniTest.

66
00:03:13,500 --> 00:03:15,200
It used to be Test Unit.

67
00:03:15,200 --> 00:03:18,300
But don't worry, the syntax
hasn't changed.

68
00:03:18,300 --> 00:03:20,710
This new library is a little bit
more lighter weight, and

69
00:03:20,710 --> 00:03:22,854
it uses the same API.

70
00:03:25,520 --> 00:03:28,970
There is one nice new feature
in MiniTest, though.

71
00:03:28,970 --> 00:03:32,710
If we're in our test file here,
and want to skip a test

72
00:03:32,710 --> 00:03:35,080
for some reason, we can
simply add the skip

73
00:03:35,080 --> 00:03:38,480
keyword, as you see here.

74
00:03:38,480 --> 00:03:41,430
Another feature of MiniTest is
that we can specify test

75
00:03:41,430 --> 00:03:45,180
options where we're using the
verbose option, which is going

76
00:03:45,180 --> 00:03:49,720
to show runtime and skip status
for each of our tests.

77
00:03:49,720 --> 00:03:52,600
This can be really useful if you
need to track down a slow

78
00:03:52,600 --> 00:03:54,170
test in your test suite.