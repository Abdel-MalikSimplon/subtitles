1
00:00:00,880 --> 00:00:03,430
Put down your brains
and your entrails.

2
00:00:03,430 --> 00:00:07,840
It's time to stop and learn
some Rails, 'cause we got

3
00:00:07,840 --> 00:00:09,310
something new to grab.

4
00:00:09,310 --> 00:00:12,175
Rails for Zombies
by Envy Labs.

5
00:00:20,230 --> 00:00:21,800
You made it all the
way to Level 4.

6
00:00:21,800 --> 00:00:23,240
We're going to be talking
about asset

7
00:00:23,240 --> 00:00:24,710
packaging and mailing.

8
00:00:24,710 --> 00:00:27,010
So we're going to start out by
learning how to send emails

9
00:00:27,010 --> 00:00:28,740
from inside of our Rails apps.

10
00:00:28,740 --> 00:00:30,950
Then we're going to be looking
at the asset pipeline.

11
00:00:30,950 --> 00:00:33,740
The asset pipeline is
new to Rails 3.1.

12
00:00:33,740 --> 00:00:35,170
It's a bunch of really
new cool stuff.

13
00:00:35,170 --> 00:00:37,850
We'll figure out how that works
with the asset tags.

14
00:00:37,850 --> 00:00:41,310
Rails 3.1 also ships with
CoffeeScript and Sassy CSS

15
00:00:41,310 --> 00:00:43,510
turned on out of the box.

16
00:00:43,510 --> 00:00:46,390
We're going to get a taste of
each of those and then take a

17
00:00:46,390 --> 00:00:49,170
look at the JavaScript manifest
file, which is

18
00:00:49,170 --> 00:00:52,980
created for asset packager and
figure out how to use that

19
00:00:52,980 --> 00:00:55,340
using something called
sprockets.

20
00:00:55,340 --> 00:00:56,780
And that's about it.

21
00:00:56,780 --> 00:00:59,190
So let's get to it.

22
00:00:59,190 --> 00:01:01,560
In our application, we want to
create two different emails,

23
00:01:01,560 --> 00:01:05,970
one for when the decomposition
state changes and one for when

24
00:01:05,970 --> 00:01:08,000
we lose our brain.

25
00:01:08,000 --> 00:01:09,390
So to do that, we're
going to use the

26
00:01:09,390 --> 00:01:10,420
Rails generate command.

27
00:01:10,420 --> 00:01:13,360
Again, we're going to say,
rails generate mailer.

28
00:01:13,360 --> 00:01:15,330
We're going to call it
ZombieMailer, that's our

29
00:01:15,330 --> 00:01:16,710
mailer class.

30
00:01:16,710 --> 00:01:19,130
And then we're going to specify
two different emails,

31
00:01:19,130 --> 00:01:22,720
the decomposition change email
and the lost brain email.

32
00:01:22,720 --> 00:01:23,790
So we run that command.

33
00:01:23,790 --> 00:01:26,570
It's going to create for us
the Zombie Mailer and two

34
00:01:26,570 --> 00:01:30,280
views, which represent the text
version of our emails.

35
00:01:30,280 --> 00:01:32,770
If we open up the ZombieMailer,
by default, before we

36
00:01:32,770 --> 00:01:35,060
change anything, this is what
we're going to find.

37
00:01:35,060 --> 00:01:38,220
In there, it's going to set
a default from address.

38
00:01:38,220 --> 00:01:39,370
We're going to have
two methods.

39
00:01:39,370 --> 00:01:41,190
One of them is going to
have decomp_change.

40
00:01:41,190 --> 00:01:43,590
And you can see here,
it has a instance

41
00:01:43,590 --> 00:01:45,570
variable called greeting.

42
00:01:45,570 --> 00:01:48,900
And just like we have instance
variables in our controllers

43
00:01:48,900 --> 00:01:52,560
to signify what we want access
to in our views,

44
00:01:52,560 --> 00:01:54,290
same thing with mail.

45
00:01:54,290 --> 00:01:57,070
When we actually create instance
variables, to signify

46
00:01:57,070 --> 00:02:00,680
what we want access to
in our mail views.

47
00:02:00,680 --> 00:02:03,720
So here we have a greeting, and
then we have this mail to:

48
00:02:03,720 --> 00:02:05,930
command, which, obviously,
sends the mail.

49
00:02:05,930 --> 00:02:07,460
And there's options
in here, and by

50
00:02:07,460 --> 00:02:09,470
default it has a to address.

51
00:02:09,470 --> 00:02:13,490
Let's customize this for our
particular ZombieMailer.

52
00:02:13,490 --> 00:02:15,110
So first thing we're going to
do is, we're going to add a

53
00:02:15,110 --> 00:02:16,600
zombie parameter.

54
00:02:16,600 --> 00:02:18,580
The zombie parameter there,
we're going to send in the

55
00:02:18,580 --> 00:02:21,360
particular zombie
that wants the

56
00:02:21,360 --> 00:02:24,110
decomposition change email.

57
00:02:24,110 --> 00:02:25,790
We're going to set that to
an instance variable.

58
00:02:25,790 --> 00:02:28,570
So we have access to
that in the mailer.

59
00:02:28,570 --> 00:02:30,770
Then we might also want
to show the last

60
00:02:30,770 --> 00:02:31,680
tweet from the zombie.

61
00:02:31,680 --> 00:02:33,330
So let's include that.

62
00:02:33,330 --> 00:02:34,420
You might have attachments.

63
00:02:34,420 --> 00:02:36,820
This is how you include
attachments, and then we can

64
00:02:36,820 --> 00:02:40,660
say, mail to this particular
zombie, their email address,

65
00:02:40,660 --> 00:02:43,230
and specify a subject
as you see here.

66
00:02:43,230 --> 00:02:44,900
There are lots of additional
options you can send in to

67
00:02:44,900 --> 00:02:48,910
this mail command like from,
cc, bcc, or reply to.

68
00:02:48,910 --> 00:02:51,980
Any of these can also be put up
at the top of the file in

69
00:02:51,980 --> 00:02:53,230
the defaults.

70
00:02:55,110 --> 00:02:56,850
Now, let's create the content
of our email.

71
00:02:56,850 --> 00:02:58,730
So we're going to open
up this view here.

72
00:02:58,730 --> 00:03:00,280
We're going to say, greetings
@zombie.name.

73
00:03:00,280 --> 00:03:02,280
Your decomposition state
is now blah, and your

74
00:03:02,280 --> 00:03:04,040
last week was blah.

75
00:03:04,040 --> 00:03:05,490
That's all there is to it.

76
00:03:05,490 --> 00:03:08,920
If we want to HTML emails, we
just have to change it from

77
00:03:08,920 --> 00:03:11,860
.text to .html.

78
00:03:11,860 --> 00:03:15,500
And then we can write the HTML
email like you see here.

79
00:03:15,500 --> 00:03:19,230
If we want both text and HTML,
well, we just create two

80
00:03:19,230 --> 00:03:20,390
different files.

81
00:03:20,390 --> 00:03:22,990
It's going to create a
multipart email for us, and

82
00:03:22,990 --> 00:03:27,400
if it accepts HTML, it's
going to show HTML.

83
00:03:27,400 --> 00:03:29,530
Now, let's figure out how
to send the email.

84
00:03:29,530 --> 00:03:31,720
So we're going to jump into
our Zombie model.

85
00:03:31,720 --> 00:03:33,870
Inside there, we're going to
have a private method called

86
00:03:33,870 --> 00:03:36,340
decomp_change_notification.

87
00:03:36,340 --> 00:03:39,740
The purpose of this method is
simply to send the email.

88
00:03:39,740 --> 00:03:40,360
We're going to call

89
00:03:40,360 --> 00:03:43,380
Zombiemailer.decomp_change self.

90
00:03:43,380 --> 00:03:46,920
Remember, that method takes a
zombie parameter, and we're in

91
00:03:46,920 --> 00:03:47,850
the Zombie model,

92
00:03:47,850 --> 00:03:50,970
so we can just call self, it
will send the zombie right in,

93
00:03:50,970 --> 00:03:53,050
and then we just need to call
deliver, and it's going to

94
00:03:53,050 --> 00:03:55,040
deliver the email for us.

95
00:03:55,040 --> 00:03:57,560
We're going to want to call
this method after save.

96
00:03:57,560 --> 00:03:58,730
So we're going to
say, after_save

97
00:03:58,730 --> 00:04:00,410
decomp_change_notification.

98
00:04:00,410 --> 00:04:05,180
But we only want to happen if
the decomp has changed.

99
00:04:05,180 --> 00:04:08,200
This decomp change method is a
helper method that is included

100
00:04:08,200 --> 00:04:09,740
with active record by default.

101
00:04:09,740 --> 00:04:12,680
When an attribute is changed,
you can call that method and

102
00:04:12,680 --> 00:04:16,089
it will return true or false.

103
00:04:16,089 --> 00:04:18,589
So by default, Rails is really
good with handling one off

104
00:04:18,589 --> 00:04:20,810
emails, like a reset password
email, welcome

105
00:04:20,810 --> 00:04:22,940
email, or even receipts.

106
00:04:22,940 --> 00:04:25,930
But when it comes time to take
care of mailing lists, and

107
00:04:25,930 --> 00:04:28,750
subscriptions, and
unsubscribing, and white lists

108
00:04:28,750 --> 00:04:32,040
and blacklists, and all that
sort of stuff, in my opinion,

109
00:04:32,040 --> 00:04:34,420
you're better off using
an external service,

110
00:04:34,420 --> 00:04:36,610
one like Mad Mimi.

111
00:04:36,610 --> 00:04:39,010
So if you wanted to use Mad
Mimi, you would add the Mad

112
00:04:39,010 --> 00:04:42,200
Mimi gem to your gem file
and run bundle install.

113
00:04:42,200 --> 00:04:45,120
You then just instantiate the
Mimi object sending in your

114
00:04:45,120 --> 00:04:47,210
account email an API key.

115
00:04:47,210 --> 00:04:49,260
You can then subscribe people
to mailing lists.

116
00:04:49,260 --> 00:04:51,790
So in this case, I'm subscribing
Gregg@envylabs to

117
00:04:51,790 --> 00:04:53,020
the newsletter.

118
00:04:53,020 --> 00:04:55,710
I can remove Gregg from the
list by just calling

119
00:04:55,710 --> 00:04:57,290
remove_from_list.

120
00:04:57,290 --> 00:05:00,000
And I can get a list of all of
the subscriptions that Gregg

121
00:05:00,000 --> 00:05:02,300
has with this command here.

122
00:05:02,300 --> 00:05:04,610
At codeschool.com this is what
we use to do our monthly

123
00:05:04,610 --> 00:05:05,650
newsletters.

124
00:05:05,650 --> 00:05:08,140
And you may remember on the
sign up form, we have this

125
00:05:08,140 --> 00:05:09,320
check box here.

126
00:05:09,320 --> 00:05:11,780
When you keep that checked when
you sign up, we basically

127
00:05:11,780 --> 00:05:12,750
do an API call.

128
00:05:12,750 --> 00:05:14,610
We call add_to_list,
and we add you to

129
00:05:14,610 --> 00:05:16,310
the newsletter list.

130
00:05:16,310 --> 00:05:18,320
The great thing about going
with Mad Mimi is that they

131
00:05:18,320 --> 00:05:21,750
have this great in-browser
interface for creating

132
00:05:21,750 --> 00:05:26,580
beautiful newsletters, beautiful
emails, HTML emails.

133
00:05:26,580 --> 00:05:29,350
You can see here's the Code
School email that we built

134
00:05:29,350 --> 00:05:30,790
from inside Mad Mimi.

135
00:05:30,790 --> 00:05:34,260
We build it, we select the
subscription list, and we just

136
00:05:34,260 --> 00:05:38,500
hit send, and Mad Mimi
does the rest.

137
00:05:38,500 --> 00:05:40,480
Now, we're going to be talking
about the asset

138
00:05:40,480 --> 00:05:43,160
pipeline in Rails 3.1.

139
00:05:43,160 --> 00:05:47,580
So back in Rails 3.0 and prior,
we would keep all of

140
00:05:47,580 --> 00:05:50,570
our style sheets, JavaScripts
and images in their own

141
00:05:50,570 --> 00:05:53,180
directory in the
public folder.

142
00:05:53,180 --> 00:05:56,260
However, as applications get
bigger and you've got bigger

143
00:05:56,260 --> 00:05:58,860
Rails apps, what you start to
find is that these folders

144
00:05:58,860 --> 00:06:01,760
like the JavaScript folder
starts to feel like a bit of a

145
00:06:01,760 --> 00:06:02,700
junk drawer.

146
00:06:02,700 --> 00:06:05,170
Here's an example of a
JavaScript folder from a real

147
00:06:05,170 --> 00:06:06,190
application.

148
00:06:06,190 --> 00:06:08,970
And the JavaScript files you see
in here, some of these are

149
00:06:08,970 --> 00:06:10,970
custom for a particular
Rails app.

150
00:06:10,970 --> 00:06:12,620
Some of them are shared
libraries.

151
00:06:12,620 --> 00:06:14,060
Some of them are vendor
libraries.

152
00:06:14,060 --> 00:06:16,770
Some of them are framework
libraries.

153
00:06:16,770 --> 00:06:19,590
As you can see, it starts to
feel like a junk drawer.

154
00:06:19,590 --> 00:06:22,320
So how do we fix things
in Rails 3.1?

155
00:06:22,320 --> 00:06:25,120
In Rails 3.1, we have an asset

156
00:06:25,120 --> 00:06:26,730
directory in our app directory.

157
00:06:26,730 --> 00:06:29,610
We have an asset directory, lib,
and in vendor, we also

158
00:06:29,610 --> 00:06:31,160
have an asset directory.

159
00:06:31,160 --> 00:06:34,160
Inside each of these asset
folders, each of them can have

160
00:06:34,160 --> 00:06:36,360
a style sheets directory, a
JavaScripts directory, and an

161
00:06:36,360 --> 00:06:38,770
images directory.

162
00:06:38,770 --> 00:06:41,330
So what's with the different
locations?

163
00:06:41,330 --> 00:06:43,710
Well, in the app directory,
that's where we put all of our

164
00:06:43,710 --> 00:06:45,540
apps-specific code.

165
00:06:45,540 --> 00:06:48,250
In our lib directory, that's
where we put like shared code

166
00:06:48,250 --> 00:06:51,130
that I might have between each
of my Rails apps, and in my

167
00:06:51,130 --> 00:06:53,370
vendor directory, that's where I
put all my third-party code.

168
00:06:53,370 --> 00:06:56,980
Like if I had a date picker or
a calendar, or some sort of

169
00:06:56,980 --> 00:07:00,110
slide show, just some open
source library, I would put

170
00:07:00,110 --> 00:07:02,250
that inside of my JavaScripts
directory, in

171
00:07:02,250 --> 00:07:04,240
my vendor folder.

172
00:07:04,240 --> 00:07:07,170
To get access to the files in
these directories, I only use

173
00:07:07,170 --> 00:07:09,540
one path, that's the
assets path.

174
00:07:09,540 --> 00:07:14,710
So if I go asset/custom or
asset/rails for an image, it's

175
00:07:14,710 --> 00:07:16,920
actually going to check all the
different paths for this

176
00:07:16,920 --> 00:07:19,860
particular asset.

177
00:07:19,860 --> 00:07:22,720
To include that asset in my
Rails app, well, I can use the

178
00:07:22,720 --> 00:07:25,650
javascript_include tag if I
want for a custom piece of

179
00:07:25,650 --> 00:07:28,530
JavaScript and that just
creates this code.

180
00:07:28,530 --> 00:07:31,740
I could use stylesheet_link tag
and then specify style,

181
00:07:31,740 --> 00:07:34,080
and that would print out this.

182
00:07:34,080 --> 00:07:37,150
I could also, for an image, use
the image tag helper, and

183
00:07:37,150 --> 00:07:38,380
it will print out that.

184
00:07:38,380 --> 00:07:41,250
Now, in production, it's
actually going to take the

185
00:07:41,250 --> 00:07:46,120
file name and create a
fingerprint or MD5 hash, which

186
00:07:46,120 --> 00:07:48,970
is going to be appended to
the file name like so.

187
00:07:48,970 --> 00:07:52,990
Doing this allows for better
client-side caching.

188
00:07:52,990 --> 00:07:56,350
So when you think about it, this
file name isn't going to

189
00:07:56,350 --> 00:07:59,530
get changed until the contents
of it changed.

190
00:07:59,530 --> 00:08:02,120
Otherwise, it should be
completely cached.

191
00:08:02,120 --> 00:08:03,950
See, the way we were previously
doing it with

192
00:08:03,950 --> 00:08:09,150
Rails, is we we're adding a hash
like this except well, we

193
00:08:09,150 --> 00:08:12,770
were often doing it after the
file name in parameters, which

194
00:08:12,770 --> 00:08:13,730
wasn't so good.

195
00:08:13,730 --> 00:08:16,530
And we were changing it every
time we did a new deployment.

196
00:08:16,530 --> 00:08:22,040
But you may not need to refresh
your Rails image if it

197
00:08:22,040 --> 00:08:23,730
never changes.

198
00:08:23,730 --> 00:08:28,090
So now we have a way to version
each of our assets and

199
00:08:28,090 --> 00:08:30,510
cache them better on
the client side.

200
00:08:30,510 --> 00:08:32,610
But what about in our
style sheets?

201
00:08:32,610 --> 00:08:35,799
It's not uncommon at all to
see images referenced from

202
00:08:35,799 --> 00:08:37,510
inside of our style sheets.

203
00:08:37,510 --> 00:08:39,640
How do we take advantage
of this new

204
00:08:39,640 --> 00:08:41,530
fingerprint caching mechanism?

205
00:08:41,530 --> 00:08:45,570
Well, what we need to do
is add .erb to all

206
00:08:45,570 --> 00:08:47,320
of our style sheets.

207
00:08:47,320 --> 00:08:50,760
With this, we can write some
Rails code inside of our style

208
00:08:50,760 --> 00:08:54,460
sheets, such as asset
path just like this.

209
00:08:54,460 --> 00:08:57,690
That's going to generate this
nice asset path which includes

210
00:08:57,690 --> 00:08:58,940
that fingerprint.

211
00:09:00,910 --> 00:09:05,230
Rails 3.1 ships with SASSY
CSS by default.

212
00:09:05,230 --> 00:09:09,460
SASSY CSS is just an improved
version of CSS that gives you

213
00:09:09,460 --> 00:09:12,000
some additional features such
as nested rules, variables,

214
00:09:12,000 --> 00:09:15,090
mixins, selectors, inheritance,
and more.

215
00:09:15,090 --> 00:09:16,600
Let's take a look at a
quick example of how

216
00:09:16,600 --> 00:09:17,890
we might use it.

217
00:09:17,890 --> 00:09:23,110
So here we've got some CSS, and
you'll notice in each of

218
00:09:23,110 --> 00:09:25,340
these pieces we've got
form.new_zombie,

219
00:09:25,340 --> 00:09:26,930
form.new_zombie,
form.new_zombie.

220
00:09:26,930 --> 00:09:28,710
We're repeating ourselves.

221
00:09:28,710 --> 00:09:32,020
Well, this would be a great
chance to use some nesting.

222
00:09:32,020 --> 00:09:33,180
So check this out.

223
00:09:33,180 --> 00:09:36,750
We're going to take form.new,
we're going to merge it up

224
00:09:36,750 --> 00:09:41,420
into the top, properly nest
the CSS, and there we go.

225
00:09:41,420 --> 00:09:43,440
It's a lot cleaner.

226
00:09:43,440 --> 00:09:46,060
Next step, let's take a
look at CoffeeScript.

227
00:09:46,060 --> 00:09:48,440
CoffeeScript is a programming
language that compiles into

228
00:09:48,440 --> 00:09:49,860
JavaScript.

229
00:09:49,860 --> 00:09:53,170
It's really nice, and you get
it by default in Rails 3.1.

230
00:09:53,170 --> 00:09:56,230
So let's take a look at an
example where we might use

231
00:09:56,230 --> 00:09:56,940
CoffeeScript.

232
00:09:56,940 --> 00:09:58,360
We're not going to jump right
into CoffeeScript.

233
00:09:58,360 --> 00:09:59,260
We need a good example.

234
00:09:59,260 --> 00:10:01,880
So here is our zombie form.

235
00:10:01,880 --> 00:10:05,260
Inside there, we've got a bio
field, and what we're going to

236
00:10:05,260 --> 00:10:08,840
want to do is create a link
called show_bio_field when we

237
00:10:08,840 --> 00:10:10,720
click Show Bio Field,
it's going to make

238
00:10:10,720 --> 00:10:14,910
that field appear.

239
00:10:14,910 --> 00:10:18,425
Here's a reminder of the CSS we
saw a second ago that bio

240
00:10:18,425 --> 00:10:21,790
field is going to start
out as invisible.

241
00:10:21,790 --> 00:10:23,720
And let's write the jQuery
first, not the

242
00:10:23,720 --> 00:10:24,510
CoffeeScript first.

243
00:10:24,510 --> 00:10:26,990
Let's write the jQuery first
to make this work.

244
00:10:26,990 --> 00:10:30,190
So on document ready, we're
going to add code so that when

245
00:10:30,190 --> 00:10:33,420
the show-bio link is clicked,
it's going to prevent the

246
00:10:33,420 --> 00:10:36,170
default action, so it's not
going to follow the link.

247
00:10:36,170 --> 00:10:40,720
Then we want to hide the link,
and then finally, we want to

248
00:10:40,720 --> 00:10:42,810
show the text area.

249
00:10:42,810 --> 00:10:46,550
So this would work just as it
is, but now let's take that

250
00:10:46,550 --> 00:10:50,780
jQuery and let's convert
it into CoffeeScript.

251
00:10:50,780 --> 00:10:55,500
So there's our document
ready, on click event.

252
00:10:55,500 --> 00:11:00,370
We want to prevent default,
hide this, and

253
00:11:00,370 --> 00:11:03,370
then show the bio.

254
00:11:03,370 --> 00:11:04,990
It's nice to compare the two
side by side isn't it?

255
00:11:04,990 --> 00:11:06,350
You can see some of the
benefits of using

256
00:11:06,350 --> 00:11:07,010
CoffeeScript.

257
00:11:07,010 --> 00:11:10,240
We no longer have any
of the brackets.

258
00:11:10,240 --> 00:11:12,380
And in that interest, you want
to make sure you're using

259
00:11:12,380 --> 00:11:16,450
either two spaces or
tabs to indent.

260
00:11:16,450 --> 00:11:18,220
And we don't have any
of those semicolons.

261
00:11:18,220 --> 00:11:22,900
But it's still very readable
as jQuery.

262
00:11:22,900 --> 00:11:25,380
Remember back in level one, we
created a scaffold, and it

263
00:11:25,380 --> 00:11:27,330
generated a bunch
of files for us?

264
00:11:27,330 --> 00:11:28,970
Well, we have a couple files
that it created that

265
00:11:28,970 --> 00:11:30,060
I didn't show you.

266
00:11:30,060 --> 00:11:34,100
We've got a CoffeeScript file
and a SASSY CSS file.

267
00:11:34,100 --> 00:11:35,960
Pretty cool.

268
00:11:35,960 --> 00:11:38,630
Now, if you didn't want to run
SASSY CSS or CoffeeScript in

269
00:11:38,630 --> 00:11:41,280
your Rails application, all
you'd have to do to remove it,

270
00:11:41,280 --> 00:11:43,530
is take out those lines
from your Gemfile and

271
00:11:43,530 --> 00:11:45,690
rerun bundle install.

272
00:11:45,690 --> 00:11:47,700
That's all there is to it, and
the files that would get

273
00:11:47,700 --> 00:11:50,110
generated wouldn't have those
extensions that you see there.

274
00:11:53,080 --> 00:11:55,860
So every time we run scaffold,
it's going to create for us

275
00:11:55,860 --> 00:11:58,630
another one of these
CoffeeScript files, and that's

276
00:11:58,630 --> 00:12:01,040
where you would put all the
CoffeeScript for those

277
00:12:01,040 --> 00:12:03,530
particular actions.

278
00:12:03,530 --> 00:12:06,160
But do you then have to include
these in your Rails

279
00:12:06,160 --> 00:12:06,740
application?

280
00:12:06,740 --> 00:12:09,410
Maybe write something
like this?

281
00:12:09,410 --> 00:12:12,560
You might think you do, but
you actually don't.

282
00:12:12,560 --> 00:12:15,340
You see, the application.js
that was created with your

283
00:12:15,340 --> 00:12:18,510
application when we created it
in the first place, uses

284
00:12:18,510 --> 00:12:22,170
something called sprockets to
include all these files.

285
00:12:22,170 --> 00:12:25,460
See, in the application.js,
there's a manifest of all the

286
00:12:25,460 --> 00:12:27,600
JavaScript libraries we're
going to be using.

287
00:12:27,600 --> 00:12:31,010
So let's take a look inside of
our application.js file.

288
00:12:31,010 --> 00:12:33,360
In there, we're going
to see a new syntax.

289
00:12:33,360 --> 00:12:35,610
You see that / / equals?

290
00:12:35,610 --> 00:12:38,400
That's sprockets, and what
that's telling our application

291
00:12:38,400 --> 00:12:42,740
is go grab the jQuery framework
and include it all

292
00:12:42,740 --> 00:12:44,860
right here at this point
in this file.

293
00:12:44,860 --> 00:12:47,220
It's kind of like
a Ruby include.

294
00:12:47,220 --> 00:12:50,360
Then we have require jquery_ujs
to include all the

295
00:12:50,360 --> 00:12:53,610
unobtrusive JavaScript that our
Rail application needs,

296
00:12:53,610 --> 00:12:56,370
unobtrusive JavaScript that
does all of our Ajax.

297
00:12:56,370 --> 00:12:58,700
It also does those form
conversions for the put and

298
00:12:58,700 --> 00:13:00,910
delete methods.

299
00:13:00,910 --> 00:13:02,830
Then we have require_tree.

300
00:13:02,830 --> 00:13:07,280
That's going to require all
other JavaScript files in this

301
00:13:07,280 --> 00:13:11,260
directory, in this assets
JavaScript directory.

302
00:13:11,260 --> 00:13:14,270
That's how all those files with
scaffold created for us

303
00:13:14,270 --> 00:13:15,920
getting included right here.

304
00:13:15,920 --> 00:13:18,720
So all these JavaScript files
get put into this one file

305
00:13:18,720 --> 00:13:22,990
called application.js, And in
production, have a look.

306
00:13:22,990 --> 00:13:25,620
It's going to add that
fingerprint for us again so

307
00:13:25,620 --> 00:13:28,740
that if our JavaScript files
don't change, the client

308
00:13:28,740 --> 00:13:32,590
doesn't have to re-download
our JavaScripts.

309
00:13:32,590 --> 00:13:33,520
Two more quick things.

310
00:13:33,520 --> 00:13:36,365
There's a new rake task called
rake assets precompile.

311
00:13:36,365 --> 00:13:38,570
You're going to want to run that
in production, and that's

312
00:13:38,570 --> 00:13:40,460
going to precompile all these
assets, all of your

313
00:13:40,460 --> 00:13:43,230
JavaScript, all your style
sheets, and images, so that

314
00:13:43,230 --> 00:13:45,660
way the first request doesn't
have to do it.

315
00:13:45,660 --> 00:13:48,150
And also in production,
it's going to minify

316
00:13:48,150 --> 00:13:49,180
all your code.

317
00:13:49,180 --> 00:13:51,320
So it's going to compress all
the JavaScript and all the

318
00:13:51,320 --> 00:13:54,690
CSS, turn them into small file
names, take out all line

319
00:13:54,690 --> 00:13:57,200
breaks so that it can
load really fast

320
00:13:57,200 --> 00:13:59,470
on the client side.

321
00:13:59,470 --> 00:14:01,700
But what about when you have
JavaScript in some of the

322
00:14:01,700 --> 00:14:04,720
other asset directories, like in
the lib asset directory or

323
00:14:04,720 --> 00:14:06,390
the vendor asset directory?

324
00:14:06,390 --> 00:14:09,880
How do you include those
in your application.js?

325
00:14:09,880 --> 00:14:13,260
Well, in this case, you can just
do required shared, and

326
00:14:13,260 --> 00:14:14,630
require friend.

327
00:14:14,630 --> 00:14:16,860
And these can be used to
specify order as well.

328
00:14:16,860 --> 00:14:19,310
So whatever order these are in,
that's the order in which

329
00:14:19,310 --> 00:14:22,510
they're going to be
appended together.

330
00:14:22,510 --> 00:14:24,190
Not only are we using
sprockets now in our

331
00:14:24,190 --> 00:14:26,710
JavaScripts file, we're
also using it in our

332
00:14:26,710 --> 00:14:28,220
stylesheets file.

333
00:14:28,220 --> 00:14:31,240
So let's take a look inside
of our application.css.

334
00:14:31,240 --> 00:14:35,100
In here, we have require_self
and require_tree.

335
00:14:35,100 --> 00:14:37,330
You already saw require_tree.

336
00:14:37,330 --> 00:14:39,730
Require_self specifies
where to insert the

337
00:14:39,730 --> 00:14:40,880
content in this file.

338
00:14:40,880 --> 00:14:43,550
So if we had some style sheets
in here, this is going to get

339
00:14:43,550 --> 00:14:46,530
included before everything
else.

340
00:14:46,530 --> 00:14:47,980
Where is this really useful?

341
00:14:47,980 --> 00:14:52,330
Well, if we had a reset style
sheet, we might want to make

342
00:14:52,330 --> 00:14:54,560
that the first thing
that gets included.

343
00:14:54,560 --> 00:14:57,330
So let's do the reset, then the
stuff in this file, and

344
00:14:57,330 --> 00:14:58,910
then everything else.

345
00:14:58,910 --> 00:15:00,710
This again, is going to compile
everything into the

346
00:15:00,710 --> 00:15:04,180
application.css, and in
production, it's going to add

347
00:15:04,180 --> 00:15:05,430
that fingerprint.

348
00:15:09,310 --> 00:15:11,580
For more information on the
asset pipeline, there's a

349
00:15:11,580 --> 00:15:14,400
great Rails guide on the topic,
which will walk you

350
00:15:14,400 --> 00:15:18,870
through everything that I
talked about and more.

351
00:15:18,870 --> 00:15:21,400
That about wraps it
up for Level 4.

352
00:15:21,400 --> 00:15:23,450
But be sure to go do the
challenges and come right

353
00:15:23,450 --> 00:15:26,220
back, because we've got some
really cool stuff in Level 5.

354
00:15:26,220 --> 00:15:29,750
We've got some AJAX flying
around and JSON.

355
00:15:29,750 --> 00:15:31,550
And we're going to be talking
about building APIs, and

356
00:15:31,550 --> 00:15:33,950
really valuable stuff bringing
it all together.

357
00:15:33,950 --> 00:15:36,175
So stay tuned and good luck
on the challenges.