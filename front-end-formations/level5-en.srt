1
00:00:02,040 --> 00:00:02,710
Welcome back.

2
00:00:02,710 --> 00:00:08,100
We finally made it to Level
Five: Fonts and Interactions.

3
00:00:08,100 --> 00:00:11,690
In this level, we're going to
cover font face, transforms,

4
00:00:11,690 --> 00:00:14,420
transitions, and finally, we'll
wrap things up with

5
00:00:14,420 --> 00:00:16,140
progressive enhancement.

6
00:00:16,140 --> 00:00:19,320
Now let's start by talking
about font face.

7
00:00:19,320 --> 00:00:22,160
Using font face, we actually
have the ability to provide

8
00:00:22,160 --> 00:00:24,135
online fonts for use
on our websites.

9
00:00:26,920 --> 00:00:29,880
Now, let's jump right into
an example of font face.

10
00:00:29,880 --> 00:00:32,710
First, we specify the font
family property to be the name

11
00:00:32,710 --> 00:00:35,170
that we want to call this
font, and in our case,

12
00:00:35,170 --> 00:00:36,680
OpenSansRegular.

13
00:00:36,680 --> 00:00:39,980
Next, we specify the source
attribute to be the URLs to

14
00:00:39,980 --> 00:00:42,460
the local versions
of those fonts.

15
00:00:42,460 --> 00:00:44,910
It's important to note that
we'll have to specify multiple

16
00:00:44,910 --> 00:00:48,480
font types here which can be
added as additional URLs to

17
00:00:48,480 --> 00:00:50,600
the source attribute.

18
00:00:50,600 --> 00:00:53,540
Next, we specify the font style
to be normal, and then

19
00:00:53,540 --> 00:00:58,220
we specify the font weight
property to be normal as well.

20
00:00:58,220 --> 00:01:01,030
To use our new font in our style
sheet, we set the font

21
00:01:01,030 --> 00:01:03,200
family attribute to be the
same name as the one

22
00:01:03,200 --> 00:01:05,190
that we just set.

23
00:01:05,190 --> 00:01:07,930
Now with font face fonts,
just like any other font

24
00:01:07,930 --> 00:01:10,860
declaration that we use in our
styles, we should specify

25
00:01:10,860 --> 00:01:14,460
fallback fonts in case that
font isn't supported.

26
00:01:14,460 --> 00:01:17,370
So here, in addition to the
OpenSansRegular font

27
00:01:17,370 --> 00:01:20,900
family, we're also specifying
three different fonts that can

28
00:01:20,900 --> 00:01:23,425
be used as fallbacks if that
one is not available.

29
00:01:26,330 --> 00:01:28,990
We can also use varying weights
of font face fonts.

30
00:01:28,990 --> 00:01:32,190
Like here in this example,
we're using OpenSansBold,

31
00:01:32,190 --> 00:01:35,870
which is a bold version
of the previous font.

32
00:01:35,870 --> 00:01:38,530
Now in our style sheet, in
order to use this bold

33
00:01:38,530 --> 00:01:41,230
version, all we have to do is
change the font family, which

34
00:01:41,230 --> 00:01:44,650
was previously OpenSansRegular,
to OpenSansBold.

35
00:01:44,650 --> 00:01:46,330
And now we're using
the bold version.

36
00:01:48,860 --> 00:01:51,330
We can alter our font face
call In order to use the

37
00:01:51,330 --> 00:01:55,040
font-style and font-weight
properties as we normally do

38
00:01:55,040 --> 00:01:58,540
when we're using varying weights
of a specific font.

39
00:01:58,540 --> 00:02:01,900
Now to do this, we need to make
some changes to the bold

40
00:02:01,900 --> 00:02:04,120
version that we were referencing
earlier.

41
00:02:04,120 --> 00:02:07,290
We start by changing the font
family property to be the same

42
00:02:07,290 --> 00:02:09,210
name as the regular weight
version that

43
00:02:09,210 --> 00:02:10,889
we referenced earlier.

44
00:02:10,889 --> 00:02:14,140
We keep the source attribute the
same, referencing the bold

45
00:02:14,140 --> 00:02:17,070
version of the font because
that's the one we want here.

46
00:02:17,070 --> 00:02:21,710
We change the font-weight
from normal to bold.

47
00:02:21,710 --> 00:02:24,260
And then in our style sheet, we
can use this bold version

48
00:02:24,260 --> 00:02:26,980
by now changing the font-weight
to bold rather

49
00:02:26,980 --> 00:02:28,240
than changing the font family.

50
00:02:30,980 --> 00:02:34,580
Next up, we're going to talk
about CSS transforms.

51
00:02:34,580 --> 00:02:38,050
Now using the transform property
in CSS3, we can

52
00:02:38,050 --> 00:02:44,940
translate, rotate, scale, and
skew various elements in CSS.

53
00:02:44,940 --> 00:02:47,700
First up, we have translate,
which allows you to create a

54
00:02:47,700 --> 00:02:51,110
2D translation using the
transform property.

55
00:02:51,110 --> 00:02:54,350
You can see here that we're
setting a 20-pixel x-axis

56
00:02:54,350 --> 00:02:58,260
value and a 30-pixel y-axis
value, which moves our element

57
00:02:58,260 --> 00:03:01,370
20 pixels to the right
and 30 pixels down.

58
00:03:01,370 --> 00:03:02,790
Let's see what that
looks like.

59
00:03:02,790 --> 00:03:04,960
So here, we can see our element
move 20 pixels to the

60
00:03:04,960 --> 00:03:09,440
right and 30 pixels down
as we specified.

61
00:03:09,440 --> 00:03:12,800
The translate function, as we
just saw, takes two arguments,

62
00:03:12,800 --> 00:03:15,580
the translation value for the
x-axis, which can either be a

63
00:03:15,580 --> 00:03:18,650
length or a percentage, and the
translation value for the

64
00:03:18,650 --> 00:03:22,100
y-axis, which can either be
a length or a percentage.

65
00:03:22,100 --> 00:03:24,180
If we don't specify
this value, the

66
00:03:24,180 --> 00:03:25,950
value is set to zero.

67
00:03:25,950 --> 00:03:28,990
You can use the translateX and
translateY functions to

68
00:03:28,990 --> 00:03:32,610
translate the x and y values
individually as seen here.

69
00:03:35,110 --> 00:03:38,280
Our first element is using the
translateX function to move

70
00:03:38,280 --> 00:03:41,630
the element 20 pixels to the
right along the x-axis.

71
00:03:41,630 --> 00:03:44,640
Our second element is using
the translateY function to

72
00:03:44,640 --> 00:03:49,030
move the element down 30 pixels
along the y-axis.

73
00:03:49,030 --> 00:03:51,750
The translateX function takes
a translation value for the

74
00:03:51,750 --> 00:03:54,890
x-axis, and the translateY
function takes a transition

75
00:03:54,890 --> 00:03:56,140
value for the y-axis.

76
00:03:58,820 --> 00:04:01,630
Next up, we have the rotate
transform, which allows you to

77
00:04:01,630 --> 00:04:04,780
rotate an element clockwise
around its origin by a

78
00:04:04,780 --> 00:04:06,660
specified angle.

79
00:04:06,660 --> 00:04:08,460
Let's look at an example here.

80
00:04:08,460 --> 00:04:11,010
We're using the transform
property and the rotate

81
00:04:11,010 --> 00:04:15,080
function to rotate an
element 45 degrees.

82
00:04:15,080 --> 00:04:18,560
We can see the output here, and
as you might expect, our

83
00:04:18,560 --> 00:04:20,490
element is rotated 45 degrees.

84
00:04:23,130 --> 00:04:26,180
With the scale transform, you
can do a 2D scale by a

85
00:04:26,180 --> 00:04:28,420
specified, unitless number.

86
00:04:28,420 --> 00:04:30,860
So here, we're performing
a scale transform to

87
00:04:30,860 --> 00:04:33,800
the value of 1.2.

88
00:04:33,800 --> 00:04:35,790
And we can see our output
looks like this.

89
00:04:35,790 --> 00:04:40,930
Our element scales up by a
unitless number of 1.2.

90
00:04:40,930 --> 00:04:44,510
Our scale transform takes two
arguments, the value for the

91
00:04:44,510 --> 00:04:47,610
x-axis, which again is a
unitless number, and the value

92
00:04:47,610 --> 00:04:50,830
for the y-axis, which is a
unitless number as well.

93
00:04:50,830 --> 00:04:54,220
If you don't specify the y-axis
value, it'll default to

94
00:04:54,220 --> 00:04:58,190
what you specified in
the first argument.

95
00:04:58,190 --> 00:05:01,580
Here, we can see we're using
both the scaleX and scaleY

96
00:05:01,580 --> 00:05:04,680
like we did with translate to
scale the x and y values

97
00:05:04,680 --> 00:05:05,780
individually.

98
00:05:05,780 --> 00:05:08,590
In our first example, we're
scaling our element along the

99
00:05:08,590 --> 00:05:12,090
x-axis to a unitless
number of 1.2.

100
00:05:12,090 --> 00:05:15,100
In our second example we're
scaling our element to the

101
00:05:15,100 --> 00:05:19,550
value of 0.3 along the y-axis.

102
00:05:19,550 --> 00:05:22,420
Just like translate, you can
use the scaleX and scaleY

103
00:05:22,420 --> 00:05:27,660
functions to scale the x and
y values individually.

104
00:05:27,660 --> 00:05:30,470
Lastly, we have the skew
transform, which allows you to

105
00:05:30,470 --> 00:05:33,370
skew an element around
the x or y-axis

106
00:05:33,370 --> 00:05:35,070
by a specified angle.

107
00:05:35,070 --> 00:05:38,940
Unlike translate and scale, the
skew transform only allows

108
00:05:38,940 --> 00:05:41,870
you to skew the x and y
values individually

109
00:05:41,870 --> 00:05:44,850
using skewX and skewY.

110
00:05:44,850 --> 00:05:48,800
Here, we're using skewX to skew
an element negative 25

111
00:05:48,800 --> 00:05:51,330
degrees along the x-axis.

112
00:05:51,330 --> 00:05:52,740
Here's what that looks like.

113
00:05:52,740 --> 00:05:55,280
We can see our element
skewed negative 25

114
00:05:55,280 --> 00:05:58,550
degrees along the x-axis.

115
00:05:58,550 --> 00:06:02,990
SkewX takes in an angle for
the x-axis, and the skewY

116
00:06:02,990 --> 00:06:04,873
function takes in an angle
for the y-axis.

117
00:06:07,630 --> 00:06:10,170
We can see here that we're
using the skewX and skewY

118
00:06:10,170 --> 00:06:12,170
transforms on each
of our elements.

119
00:06:12,170 --> 00:06:15,540
In the first example, we're
skewing x 25 degrees, and in

120
00:06:15,540 --> 00:06:20,350
the second example, we're
skewing y negative 85 degrees.

121
00:06:20,350 --> 00:06:22,060
And here's what those
skews look like.

122
00:06:22,060 --> 00:06:24,940
The first one is using the skewX
function, and the second

123
00:06:24,940 --> 00:06:26,410
one is using the
skewY function.

124
00:06:30,210 --> 00:06:33,850
Next, let's talk about
CSS transitions.

125
00:06:33,850 --> 00:06:37,770
CSS3 provides transitions, which
allow you to transition

126
00:06:37,770 --> 00:06:41,470
between two states of
a given element.

127
00:06:41,470 --> 00:06:44,030
Let's look at an example
of a transition.

128
00:06:44,030 --> 00:06:45,450
Let's say we have this
element that has a

129
00:06:45,450 --> 00:06:47,190
background color of black.

130
00:06:47,190 --> 00:06:48,830
When we hover over that
element, we want it

131
00:06:48,830 --> 00:06:50,290
to change to blue.

132
00:06:50,290 --> 00:06:53,380
But we don't want this to be a
jarring, immediate change.

133
00:06:53,380 --> 00:06:56,280
We want to do it over
a slow duration.

134
00:06:56,280 --> 00:06:58,340
We do this by using the
transition property.

135
00:06:58,340 --> 00:07:01,000
In here, we're transitioning
the background color from

136
00:07:01,000 --> 00:07:05,500
black to blue over the period
of 0.2 seconds.

137
00:07:05,500 --> 00:07:07,700
And here, we can see how that
change takes effect.

138
00:07:07,700 --> 00:07:10,410
The background color transitions
from black to blue

139
00:07:10,410 --> 00:07:14,690
over the course of
0.2 seconds.

140
00:07:14,690 --> 00:07:17,160
The transition property takes
a few different values.

141
00:07:17,160 --> 00:07:19,440
Let's go through each
of these in turn.

142
00:07:19,440 --> 00:07:22,260
The first of which is the CSS
property that you actually

143
00:07:22,260 --> 00:07:24,390
want to transition
like we just did

144
00:07:24,390 --> 00:07:25,980
with background color.

145
00:07:25,980 --> 00:07:28,340
The next is the duration value,
which is the amount of

146
00:07:28,340 --> 00:07:31,820
time that you want the
transition to take place.

147
00:07:31,820 --> 00:07:34,660
Next, we specify the timing
function value, which is the

148
00:07:34,660 --> 00:07:37,260
timing of the transition itself,
and this takes a few

149
00:07:37,260 --> 00:07:38,530
different key words.

150
00:07:38,530 --> 00:07:43,140
We have ease, ease-in,
ease-in-out, linear,

151
00:07:43,140 --> 00:07:47,380
cubic-bezier, step-start and
step-end, and then steps().

152
00:07:47,380 --> 00:07:49,670
We'll give you some resources
for learning more about these

153
00:07:49,670 --> 00:07:53,090
transitions after the course.

154
00:07:53,090 --> 00:07:55,890
Finally, we specify the delay
value, which is the amount of

155
00:07:55,890 --> 00:07:58,570
time you want to wait, if at
all, until the transition

156
00:07:58,570 --> 00:08:01,510
should take place.

157
00:08:01,510 --> 00:08:03,950
Instead of setting those
transition values all on one

158
00:08:03,950 --> 00:08:07,410
line like we just did, we can
do that individually.

159
00:08:07,410 --> 00:08:09,970
We first set the transition
property using the

160
00:08:09,970 --> 00:08:12,640
transition-property to
background color.

161
00:08:12,640 --> 00:08:17,100
Next, we set the transition
duration to 0.2 seconds.

162
00:08:17,100 --> 00:08:19,560
Then, we set the transition
timing function to be

163
00:08:19,560 --> 00:08:20,920
ease-in-out.

164
00:08:20,920 --> 00:08:22,370
And finally, we set
the transition

165
00:08:22,370 --> 00:08:24,240
delay to be 0.1 seconds.

166
00:08:27,590 --> 00:08:30,480
We can transition multiple
properties at once using the

167
00:08:30,480 --> 00:08:33,159
all keyword for the transition
property.

168
00:08:33,159 --> 00:08:34,809
Let's look at an example.

169
00:08:34,809 --> 00:08:37,325
So on our element, we now not
only have a background color

170
00:08:37,325 --> 00:08:40,070
of black, but we have
a color of white.

171
00:08:40,070 --> 00:08:42,240
When you hover over that
element, we change the

172
00:08:42,240 --> 00:08:45,300
background color to gray,
and the color to black.

173
00:08:45,300 --> 00:08:48,150
We then set a transition to
transition both of those

174
00:08:48,150 --> 00:08:50,930
properties, the background color
and the color, over the

175
00:08:50,930 --> 00:08:54,940
period of 0.2 seconds.

176
00:08:54,940 --> 00:08:57,690
And now we can see when we hover
over our element, both the

177
00:08:57,690 --> 00:09:00,550
background color and the color
properties are transitioned

178
00:09:00,550 --> 00:09:04,540
because we used the
all keyword.

179
00:09:04,540 --> 00:09:05,860
That's it for transitions.

180
00:09:05,860 --> 00:09:07,800
Let's wrap things up by talking
about progressive

181
00:09:07,800 --> 00:09:09,710
enhancement.

182
00:09:09,710 --> 00:09:12,210
The term progressive enhancement
refers to the use

183
00:09:12,210 --> 00:09:14,960
of newer features that add to
the experience in modern

184
00:09:14,960 --> 00:09:18,140
browsers that support those
features, but doesn't detract

185
00:09:18,140 --> 00:09:20,820
from the experience in older
browsers that don't support

186
00:09:20,820 --> 00:09:23,640
those features.

187
00:09:23,640 --> 00:09:25,500
Let's look at an example here.

188
00:09:25,500 --> 00:09:28,360
Let's say we had an element
with a gray background, a

189
00:09:28,360 --> 00:09:31,610
border radius of 10 pixels,
and a box shadow.

190
00:09:31,610 --> 00:09:34,680
That element, in browsers that
support the border radius and

191
00:09:34,680 --> 00:09:37,660
box shadow properties,
would look like this.

192
00:09:37,660 --> 00:09:39,990
Now if a browser did not support
those border radius

193
00:09:39,990 --> 00:09:43,260
and box shadow properties, we
would get this gray box that

194
00:09:43,260 --> 00:09:46,730
contains no border radius or
box shadow, but it's still

195
00:09:46,730 --> 00:09:48,720
usable, which is what
progressive

196
00:09:48,720 --> 00:09:50,900
enhancement is all about.

197
00:09:50,900 --> 00:09:53,420
Progressive enhancement is
important to keep in mind

198
00:09:53,420 --> 00:09:55,150
because we want to make sure
that we're creating

199
00:09:55,150 --> 00:09:58,390
experiences that degrade
gracefully for browsers that

200
00:09:58,390 --> 00:10:00,710
don't support a lot of the
features we've covered.

201
00:10:03,310 --> 00:10:05,350
And that's it for Front-end
Formations.

202
00:10:05,350 --> 00:10:07,030
I hope you enjoyed
this course.

203
00:10:07,030 --> 00:10:09,010
Now head over to the challenges
because they're the

204
00:10:09,010 --> 00:10:10,420
last ones you're going to get.

205
00:10:10,420 --> 00:10:12,351
See you soon.

206
00:10:12,351 --> 00:10:14,370
I'm in their failure,
because I finally made them fail.

207
00:10:14,370 --> 00:10:16,570
[IN BACKGROUND] Yeah, you caused
their failure.

208
00:10:16,570 --> 00:10:18,220
We can alter our font face -

209
00:10:18,220 --> 00:10:20,310
font face.

210
00:10:20,310 --> 00:10:23,222
We can alter our font f -

211
00:10:23,222 --> 00:10:25,080
Get out of here, font face.

212
00:10:25,080 --> 00:10:27,030
Head over to the challenges,
because they're the last ones

213
00:10:27,030 --> 00:10:28,280
you'll get. [LAUGHING]

