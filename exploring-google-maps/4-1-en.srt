1
00:00:00,500 --> 00:00:04,040
[SINGING] The SDK for iOS
has really got my back.

2
00:00:04,040 --> 00:00:06,000
There's places, modes
and, sweet controls

3
00:00:06,000 --> 00:00:07,550
to make the perfect app.

4
00:00:07,550 --> 00:00:11,580
From polylines and
polygons and geocoded lats,

5
00:00:11,580 --> 00:00:15,510
I delegate the methods to
create the perfect map.

6
00:00:15,510 --> 00:00:19,010
Directions and street views,
these are the very best.

7
00:00:19,010 --> 00:00:21,410
I must confess
it's time to start

8
00:00:21,410 --> 00:00:23,990
exploring Google Maps for iOS.

9
00:00:27,180 --> 00:00:28,930
Displaying strings
in an info window

10
00:00:28,930 --> 00:00:31,194
is one of the simple things
you can do with markers.

11
00:00:31,194 --> 00:00:32,610
So in this level,
we'll be looking

12
00:00:32,610 --> 00:00:34,390
at how we can enrich
some of that data

13
00:00:34,390 --> 00:00:38,990
by using Google's geocoder
and directions API services.

14
00:00:38,990 --> 00:00:41,430
First, let's look at how
we can use a geocoder

15
00:00:41,430 --> 00:00:45,770
to fill in the address and
city of the user-created marker

16
00:00:45,770 --> 00:00:46,570
when it's tapped.

17
00:00:49,740 --> 00:00:51,380
So there's two
kinds of geocoders

18
00:00:51,380 --> 00:00:52,680
that we can work with.

19
00:00:52,680 --> 00:00:55,440
The first one, called
the forward geocoder,

20
00:00:55,440 --> 00:00:59,232
takes an address and turns it
into a latitude and longitude.

21
00:00:59,232 --> 00:01:00,940
But for each of these
markers, we already

22
00:01:00,940 --> 00:01:02,930
have a latitude and
longitude, so that's not

23
00:01:02,930 --> 00:01:04,989
going to be really
helpful for us.

24
00:01:04,989 --> 00:01:07,950
The second geocoder is
called a reverse geocoder.

25
00:01:07,950 --> 00:01:10,460
And there, we'll be able to
take an existing latitude

26
00:01:10,460 --> 00:01:13,744
and longitude point and
turn it into an address.

27
00:01:13,744 --> 00:01:15,910
So that's the one we're
going to build into our app.

28
00:01:18,540 --> 00:01:21,490
We're going to add this geocoder
into our long press delegate

29
00:01:21,490 --> 00:01:24,910
method, since that's where
we're creating our marker.

30
00:01:24,910 --> 00:01:28,580
So we'll start by creating
a GMSGeocoder object,

31
00:01:28,580 --> 00:01:30,360
using this initializer.

32
00:01:30,360 --> 00:01:33,200
And then we'll send it the
reverseGeocodeCoordinate

33
00:01:33,200 --> 00:01:35,760
completionHandler
message, passing

34
00:01:35,760 --> 00:01:39,120
in the coordinate where
the long press happened.

35
00:01:39,120 --> 00:01:40,934
Inside of this
completionHandler method,

36
00:01:40,934 --> 00:01:42,850
we're going to have
access to some of the data

37
00:01:42,850 --> 00:01:44,466
that the geocoder returns.

38
00:01:44,466 --> 00:01:46,090
So that's where we're
going to now want

39
00:01:46,090 --> 00:01:49,510
to create our marker, inside
of this completionHandler.

40
00:01:49,510 --> 00:01:51,840
Here you can see we've moved
the marker creation code

41
00:01:51,840 --> 00:01:53,700
inside of the completionHandler.

42
00:01:53,700 --> 00:01:56,180
We're using data from
the geocoder response

43
00:01:56,180 --> 00:01:58,610
for the title and
snippet of the marker.

44
00:01:58,610 --> 00:02:00,500
Now this specific
configuration will give us

45
00:02:00,500 --> 00:02:02,640
a street address and city name.

46
00:02:02,640 --> 00:02:05,750
Let's look at what the
different options are.

47
00:02:05,750 --> 00:02:07,990
First there's
administrativeArea.

48
00:02:07,990 --> 00:02:11,740
And that's basically
a state or region.

49
00:02:11,740 --> 00:02:14,400
Country is the country.

50
00:02:14,400 --> 00:02:17,870
Locality is the city.

51
00:02:17,870 --> 00:02:22,090
subLocality is a subdivision,
district, or park,

52
00:02:22,090 --> 00:02:25,570
if that level of detail exists
in the geocode response.

53
00:02:25,570 --> 00:02:28,120
And the thoroughfare is
actually just the street number

54
00:02:28,120 --> 00:02:29,360
and name.

55
00:02:29,360 --> 00:02:33,270
If we were to reverse geocode
the Envy Labs office location,

56
00:02:33,270 --> 00:02:38,270
the response's thoroughfare
would be 618 East South Street.

57
00:02:38,270 --> 00:02:41,607
And the response's locality
would be the city, Orlando.

58
00:02:41,607 --> 00:02:43,940
This is the data that we're
going to use for our marker.

59
00:02:46,570 --> 00:02:48,960
So now if we run this
again and tap on our marker

60
00:02:48,960 --> 00:02:50,780
so we can see the
Info window, you

61
00:02:50,780 --> 00:02:52,880
see that the address of
the places that we're

62
00:02:52,880 --> 00:02:56,150
creating with our user created
marker are automatically

63
00:02:56,150 --> 00:02:59,140
being filled in our info window.

64
00:02:59,140 --> 00:03:01,510
This means the
geocoder's working.

65
00:03:01,510 --> 00:03:02,910
Another powerful
service that you

66
00:03:02,910 --> 00:03:05,950
have access to when you're
using the Google Maps SDK

67
00:03:05,950 --> 00:03:08,526
is the Google Directions API.

68
00:03:08,526 --> 00:03:10,400
We're going to be able
to use that Directions

69
00:03:10,400 --> 00:03:14,320
API to get a step by step
list of route directions

70
00:03:14,320 --> 00:03:18,300
from our current location
to any tapped marker.

71
00:03:18,300 --> 00:03:20,370
And each new marker
that we tap will

72
00:03:20,370 --> 00:03:22,120
update the directions
that are shown

73
00:03:22,120 --> 00:03:24,760
and a new table view controller.

74
00:03:24,760 --> 00:03:27,740
So let's look at
how to set that up.

75
00:03:27,740 --> 00:03:29,370
Since we want to
calculate directions

76
00:03:29,370 --> 00:03:32,520
between our current location
and a tapped marker,

77
00:03:32,520 --> 00:03:35,570
we can detect when a marker
is tapped using the delegate

78
00:03:35,570 --> 00:03:37,090
method mapView didTapMarker.

79
00:03:39,640 --> 00:03:41,580
Another thing we
want to do in here

80
00:03:41,580 --> 00:03:43,730
is to have this check
at the start that

81
00:03:43,730 --> 00:03:47,600
says if mapView
myLocation is not nil,

82
00:03:47,600 --> 00:03:50,287
then we can calculate
the directions.

83
00:03:50,287 --> 00:03:51,870
We don't want to try
to get directions

84
00:03:51,870 --> 00:03:54,060
between our location
and a marker

85
00:03:54,060 --> 00:03:56,640
if our location
is not available.

86
00:03:56,640 --> 00:03:59,670
Next, we'll want to create
an NSURL in the format

87
00:03:59,670 --> 00:04:02,920
that the directions API
wants, using our current user

88
00:04:02,920 --> 00:04:06,300
location and the tapped
marker's location.

89
00:04:06,300 --> 00:04:09,090
Then we'll use that URL
to make a network request

90
00:04:09,090 --> 00:04:11,570
and again we'll get
a JSON response back.

91
00:04:11,570 --> 00:04:13,860
Now this is a different
JSON response than before,

92
00:04:13,860 --> 00:04:15,209
but it's still JSON.

93
00:04:15,209 --> 00:04:16,709
And finally, we
want to do something

94
00:04:16,709 --> 00:04:18,690
with that JSON response.

95
00:04:18,690 --> 00:04:22,310
So we'll talk about
that when we get there.

96
00:04:22,310 --> 00:04:25,129
Since the directions
API is URL based,

97
00:04:25,129 --> 00:04:27,420
it's going to help to look
at some of the options we're

98
00:04:27,420 --> 00:04:29,930
going to need to
pass in that URL.

99
00:04:29,930 --> 00:04:32,320
This is the base
URL for all requests

100
00:04:32,320 --> 00:04:35,070
made for the Directions API.

101
00:04:35,070 --> 00:04:36,720
And there's a few
required parameters

102
00:04:36,720 --> 00:04:39,160
that have to be at the end.

103
00:04:39,160 --> 00:04:43,550
The origin is a latitude and
longitude separated by a comma -

104
00:04:43,550 --> 00:04:45,160
that's the start
location where you're

105
00:04:45,160 --> 00:04:47,650
looking for directions from.

106
00:04:47,650 --> 00:04:49,230
For the origin,
we're going to use

107
00:04:49,230 --> 00:04:52,660
the user's current location.

108
00:04:52,660 --> 00:04:55,560
The destination parameter also
takes a latitude and longitude

109
00:04:55,560 --> 00:04:58,630
number separated by comma
and this is the location

110
00:04:58,630 --> 00:05:00,380
that you're driving to.

111
00:05:00,380 --> 00:05:02,900
The third parameter
called "sensor."

112
00:05:02,900 --> 00:05:05,220
And since we're intending
for our app to ultimately

113
00:05:05,220 --> 00:05:09,350
be installed on an iOS device
that has a GPS tracker in it,

114
00:05:09,350 --> 00:05:11,340
we want to set that
property to true.

115
00:05:11,340 --> 00:05:13,950
It's a requirement
of the Directions API

116
00:05:13,950 --> 00:05:18,060
to have the sensor property set
to true if the device making

117
00:05:18,060 --> 00:05:21,540
the directions request
has a GPS in it.

118
00:05:21,540 --> 00:05:23,930
Finally, we'll need to
have a key property.

119
00:05:23,930 --> 00:05:27,540
And its value should be
our "browser app" API key.

120
00:05:27,540 --> 00:05:29,270
Note that this is
a different API

121
00:05:29,270 --> 00:05:32,850
key than the one we originally
included in our AppDelegate.

122
00:05:32,850 --> 00:05:35,890
That iOS app key and
bundle identifier

123
00:05:35,890 --> 00:05:39,070
allowed us to register our
app with the Google Maps SDK

124
00:05:39,070 --> 00:05:43,340
for iOS to display a
Google map in our app.

125
00:05:43,340 --> 00:05:46,950
But since the directions
API is a web service and not

126
00:05:46,950 --> 00:05:51,150
specific to just iOS apps, it
uses a different browser app

127
00:05:51,150 --> 00:05:51,690
API key.

128
00:05:54,580 --> 00:05:57,285
So we can look at the code used
to build that URL string now

129
00:05:57,285 --> 00:05:59,420
that we know the
different parts of it.

130
00:05:59,420 --> 00:06:02,360
We can use NSString
format placeholders

131
00:06:02,360 --> 00:06:04,460
to make this a
little more readable.

132
00:06:04,460 --> 00:06:07,700
We'll start by
applying the base URL,

133
00:06:07,700 --> 00:06:11,080
then the start location's
latitude and longitude, then

134
00:06:11,080 --> 00:06:13,680
our end location, which is
the currently tapped marker's

135
00:06:13,680 --> 00:06:14,940
position.

136
00:06:14,940 --> 00:06:17,630
And finally, our
browser app API key.

137
00:06:22,640 --> 00:06:25,580
We'll use that URL string
to make an NSURL object.

138
00:06:29,190 --> 00:06:31,700
And then we'll use that
URL to make a request

139
00:06:31,700 --> 00:06:33,900
and get a JSON response.

140
00:06:33,900 --> 00:06:36,319
Now the JSON this time is
a little bit different.

141
00:06:36,319 --> 00:06:38,360
We're going to look at
the structure in a second,

142
00:06:38,360 --> 00:06:40,484
but I'll start by telling
you that this is actually

143
00:06:40,484 --> 00:06:45,310
an NSDictionary that's
returned, not an NSArray.

144
00:06:45,310 --> 00:06:49,840
So we'll store our JSON
in an NSDictionary.

145
00:06:49,840 --> 00:06:51,620
This response has
a deep structure

146
00:06:51,620 --> 00:06:54,260
with multiple arrays and
dictionaries nested inside

147
00:06:54,260 --> 00:06:55,300
of each other.

148
00:06:55,300 --> 00:06:58,220
But the part we want right
now, the array of steps,

149
00:06:58,220 --> 00:07:01,990
can be accessed with this code.

150
00:07:01,990 --> 00:07:03,904
So we've got those
steps and we want

151
00:07:03,904 --> 00:07:05,820
to be able to access
them from different parts

152
00:07:05,820 --> 00:07:07,300
of our application.

153
00:07:07,300 --> 00:07:11,460
So we've created an NSArray
property called "steps."

154
00:07:11,460 --> 00:07:14,470
And we're assigning it
to that JSON response.

155
00:07:18,320 --> 00:07:21,320
So now that we've isolated
just the array of steps,

156
00:07:21,320 --> 00:07:23,140
let's look at what's
inside of there.

157
00:07:23,140 --> 00:07:25,414
There's actually quite a bit
of data in there as well,

158
00:07:25,414 --> 00:07:27,080
but fortunately we're
going to only look

159
00:07:27,080 --> 00:07:29,920
at one part in the
examples in this level.

160
00:07:29,920 --> 00:07:33,390
And that part is the
HTML instructions field.

161
00:07:33,390 --> 00:07:37,290
HTML instructions
contains a string of HTML

162
00:07:37,290 --> 00:07:41,330
that has the directions for each
step inside the steps array.

163
00:07:41,330 --> 00:07:45,460
So this makes it really easy
to create a UI tableview

164
00:07:45,460 --> 00:07:47,820
and then in each
UITableViewCell,

165
00:07:47,820 --> 00:07:52,110
we can display UI webview that
uses the HTML instructions

166
00:07:52,110 --> 00:07:54,990
string to show the text.

167
00:07:54,990 --> 00:07:58,160
Now that's not a Google
Maps specific thing,

168
00:07:58,160 --> 00:08:01,149
so we're not going to show you
that code here in the slides.

169
00:08:01,149 --> 00:08:02,690
But we'll give you
all that code when

170
00:08:02,690 --> 00:08:05,460
you're working on
the challenges.

171
00:08:05,460 --> 00:08:08,720
We look at how to link to that
table view from our mapView,

172
00:08:08,720 --> 00:08:10,150
though.

173
00:08:10,150 --> 00:08:12,650
We've gone ahead and
created a UI button that's

174
00:08:12,650 --> 00:08:14,770
going to call the
directions tapped method

175
00:08:14,770 --> 00:08:17,390
whenever the button is tapped.

176
00:08:17,390 --> 00:08:19,750
And inside of that
directionsTapped method,

177
00:08:19,750 --> 00:08:23,070
we'll include our
DirectionsListVC,

178
00:08:23,070 --> 00:08:24,950
which is our table view.

179
00:08:24,950 --> 00:08:29,200
And since the DirectionsListVC
accepts an array of steps,

180
00:08:29,200 --> 00:08:31,830
we'll send it that array of
steps, which we can access

181
00:08:31,830 --> 00:08:35,159
from our self.steps
object, and then we'll

182
00:08:35,159 --> 00:08:36,870
just present the ViewController.

183
00:08:36,870 --> 00:08:38,770
Notice also that
in the completion

184
00:08:38,770 --> 00:08:41,700
block of
presentViewController, we're

185
00:08:41,700 --> 00:08:45,430
going to set our
self.steps array to nil

186
00:08:45,430 --> 00:08:46,900
and we're going
to set our mapView

187
00:08:46,900 --> 00:08:49,160
selected marker to nil as well.

188
00:08:49,160 --> 00:08:52,170
This is because as soon as
the directions window closes,

189
00:08:52,170 --> 00:08:54,210
we don't want to have
any directions lingering.

190
00:08:54,210 --> 00:08:55,960
We've already
closed that window.

191
00:08:55,960 --> 00:08:57,900
We need to nil out
that object so we

192
00:08:57,900 --> 00:09:00,180
don't keep a reference around.

193
00:09:00,180 --> 00:09:03,300
And we'll deselect the
marker because again, we've

194
00:09:03,300 --> 00:09:04,460
closed those directions.

195
00:09:04,460 --> 00:09:06,590
We're done interacting
with that marker.

196
00:09:06,590 --> 00:09:08,800
We want it to have
the effect of closing

197
00:09:08,800 --> 00:09:10,200
as soon as the table view closes.

198
00:09:14,180 --> 00:09:16,550
So here's what our app looks
like as our code stands

199
00:09:16,550 --> 00:09:17,430
right now.

200
00:09:17,430 --> 00:09:19,225
You can see that
we can tap a marker

201
00:09:19,225 --> 00:09:20,975
and we have a directions
button on screen.

202
00:09:20,975 --> 00:09:22,516
And we can tap that
directions button

203
00:09:22,516 --> 00:09:24,120
and get a list of directions.

204
00:09:24,120 --> 00:09:26,890
We can hit Back, but the
directions button never

205
00:09:26,890 --> 00:09:27,640
goes away.

206
00:09:27,640 --> 00:09:29,671
And that doesn't
seem quite right.

207
00:09:29,671 --> 00:09:31,920
Seems like we probably only
want the directions button

208
00:09:31,920 --> 00:09:34,840
to appear whenever
the marker is tapped.

209
00:09:34,840 --> 00:09:36,910
And as soon as the
marker's not selected,

210
00:09:36,910 --> 00:09:39,970
we want the directions
button to go away.

211
00:09:39,970 --> 00:09:41,970
The way we're going to
show and hide that button

212
00:09:41,970 --> 00:09:45,090
is to set it as a property
in our ViewController

213
00:09:45,090 --> 00:09:48,180
and then adjust the alpha
property of it between zero

214
00:09:48,180 --> 00:09:49,480
and one.

215
00:09:49,480 --> 00:09:51,830
One meaning the
button is showing,

216
00:09:51,830 --> 00:09:53,670
zero meaning the
button is hidden.

217
00:09:53,670 --> 00:09:56,000
We'll create the
button in viewDidLoad,

218
00:09:56,000 --> 00:09:58,400
but we'll immediately
set its alpha to zero.

219
00:09:58,400 --> 00:10:00,550
And that means that when
the map view first loads,

220
00:10:00,550 --> 00:10:03,270
the button is
nowhere to be found.

221
00:10:03,270 --> 00:10:08,200
Then, inside of our mapView
didTapMarker delegate method,

222
00:10:08,200 --> 00:10:12,940
inside of our Directions API
request completionHandler,

223
00:10:12,940 --> 00:10:14,610
we're already
capturing the steps

224
00:10:14,610 --> 00:10:17,800
we need in the self.steps array.

225
00:10:17,800 --> 00:10:20,150
And as soon we have some
steps for each of one

226
00:10:20,150 --> 00:10:22,640
of our direction routes,
we can be pretty sure

227
00:10:22,640 --> 00:10:24,870
that we want to show
that directions button.

228
00:10:24,870 --> 00:10:26,570
Because as soon as
we have those steps,

229
00:10:26,570 --> 00:10:29,220
our users might
want to access them.

230
00:10:29,220 --> 00:10:33,150
So we'll set our directionsButton
alpha to one.

231
00:10:33,150 --> 00:10:36,370
And notice how we're doing
this inside of the main queue,

232
00:10:36,370 --> 00:10:41,280
just like we did before to
avoid any kind of thread issues.

233
00:10:41,280 --> 00:10:43,270
In our directionsTapped
method, we'll

234
00:10:43,270 --> 00:10:46,220
set the directionsButton
alpha to zero inside

235
00:10:46,220 --> 00:10:47,920
of the completion block.

236
00:10:47,920 --> 00:10:50,220
Because we're setting
self.steps to nil,

237
00:10:50,220 --> 00:10:52,480
meaning there's no more
directions that we need,

238
00:10:52,480 --> 00:10:56,944
we also want to hide the button
that accesses those directions.

239
00:10:56,944 --> 00:10:58,360
When we run the
app again, you can

240
00:10:58,360 --> 00:11:00,980
see that we don't get a
directions button on screen

241
00:11:00,980 --> 00:11:03,660
until a marker is tapped and
as soon as we hit our Back

242
00:11:03,660 --> 00:11:05,280
button from the table
view controller,

243
00:11:05,280 --> 00:11:08,010
the directions button goes away.

244
00:11:08,010 --> 00:11:10,140
But now if we just tap
somewhere on the map

245
00:11:10,140 --> 00:11:13,300
or drag and move the map,
the directions button

246
00:11:13,300 --> 00:11:14,900
is still there.

247
00:11:14,900 --> 00:11:16,310
And that's not ideal either.

248
00:11:16,310 --> 00:11:21,830
We don't want it to be on screen
unless a marker was tapped.

249
00:11:21,830 --> 00:11:24,890
To fix this here, we're using
the mapView didTapAtCoordinate

250
00:11:24,890 --> 00:11:25,659
method.

251
00:11:25,659 --> 00:11:27,700
We're basically saying if
the button is currently

252
00:11:27,700 --> 00:11:32,030
showing when the map is
tapped, then hide it.

253
00:11:32,030 --> 00:11:35,310
Likewise, in the mapView
willMove method,

254
00:11:35,310 --> 00:11:38,200
we're saying if the map
the scrolled at all, then

255
00:11:38,200 --> 00:11:40,910
hide the directions button
if it's currently showing

256
00:11:40,910 --> 00:11:42,850
and go ahead and
deselect the marker, too.

257
00:11:42,850 --> 00:11:44,390
We don't want a
marker's info window

258
00:11:44,390 --> 00:11:47,600
to stay up while we're
dragging the map.

259
00:11:47,600 --> 00:11:50,120
With these simple settings
of showing and hiding

260
00:11:50,120 --> 00:11:53,522
buttons and marker Info
windows at the right time,

261
00:11:53,522 --> 00:11:55,230
we're going to provide
a much better user

262
00:11:55,230 --> 00:11:58,650
experience in our app.

263
00:11:58,650 --> 00:12:00,965
And here we can see everything's
working as expected.

264
00:12:10,250 --> 00:12:12,570
Now it's time for you to
practice geocoding and getting

265
00:12:12,570 --> 00:12:14,204
directions in the challenges.

266
00:12:14,204 --> 00:12:16,370
If you're not watching this
video on CodeSchool.com,

267
00:12:16,370 --> 00:12:19,220
you can visit this
URL to get access

268
00:12:19,220 --> 00:12:21,930
to all the free challenges
for this course.

269
00:12:21,930 --> 00:12:25,510
Or you can learn more about
the Google Maps SDK for iOS

270
00:12:25,510 --> 00:12:28,480
by visiting Google's
developer documentation.

