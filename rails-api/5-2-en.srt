1
00:00:02,050 --> 00:00:02,900
Welcome back.

2
00:00:02,900 --> 00:00:05,130
We're now going to look
at another option we

3
00:00:05,130 --> 00:00:10,750
can use to version our API, this
time using the Accept header.

4
00:00:10,750 --> 00:00:12,620
As we've seen before,
the Accept header

5
00:00:12,620 --> 00:00:15,800
is used to request
specific media types.

6
00:00:15,800 --> 00:00:17,490
So, media types
that we've worked

7
00:00:17,490 --> 00:00:20,610
are application/json
for the JSON format,

8
00:00:20,610 --> 00:00:23,400
and application/xml for XML.

9
00:00:23,400 --> 00:00:25,910
We're now going to create
a customize MIME type where

10
00:00:25,910 --> 00:00:29,040
the API version is
going to be part of it.

11
00:00:29,040 --> 00:00:31,830
We're going to call our custom
media type, "apocalypse."

12
00:00:31,830 --> 00:00:33,790
And here's what is
going to look like.

13
00:00:33,790 --> 00:00:36,140
Let's break it down, and go
over the different parts.

14
00:00:36,140 --> 00:00:38,710
The application part
means that the payload

15
00:00:38,710 --> 00:00:41,440
is application-specific.

16
00:00:41,440 --> 00:00:44,790
The vnd.apocalypse means
that the media type

17
00:00:44,790 --> 00:00:49,920
is vendor-specific, so it's not
part of the official HTTP spec.

18
00:00:49,920 --> 00:00:52,710
Then, followed by the
version that we want to use,

19
00:00:52,710 --> 00:00:56,200
and finally, +json means
that the response format

20
00:00:56,200 --> 00:00:59,680
for discussing media
type should be JSON.

21
00:00:59,680 --> 00:01:03,505
Before we implement any of
this, let's write a test.

22
00:01:03,505 --> 00:01:05,630
So we're going to reuse
the test that we just wrote

23
00:01:05,630 --> 00:01:07,710
in the previous
section, but adapt it

24
00:01:07,710 --> 00:01:09,860
to use a custom media type.

25
00:01:09,860 --> 00:01:13,010
In our test for version one,
instead of a get request,

26
00:01:13,010 --> 00:01:17,950
as /v1/zombies, we're going to
issue a get request to, simply,

27
00:01:17,950 --> 00:01:19,810
/zombies.

28
00:01:19,810 --> 00:01:23,860
We'll specify the API version
by populating the Accept header

29
00:01:23,860 --> 00:01:30,000
with the value application,
vmdb.apocalypse.v1+json.

30
00:01:30,840 --> 00:01:34,130
We check for a 200 status
back, for our string containing

31
00:01:34,130 --> 00:01:37,420
the value for the IP,
followed by version one.

32
00:01:37,420 --> 00:01:39,180
Finally, we check
that the response's

33
00:01:39,180 --> 00:01:42,860
content type JSON instead
of our custom media type.

34
00:01:42,860 --> 00:01:45,320
This makes it easier for
different API clients

35
00:01:45,320 --> 00:01:47,370
to work with,
especially in regards

36
00:01:47,370 --> 00:01:48,985
to parsing the response back.

37
00:01:51,760 --> 00:01:54,520
Our test for version two
is pretty much the same,

38
00:01:54,520 --> 00:01:58,510
except that the MIME
type now specifies v2.

39
00:01:58,510 --> 00:02:01,550
With our test failing, we
move on to the implementation.

40
00:02:01,550 --> 00:02:04,240
We're going to create a
route constraint class that's

41
00:02:04,240 --> 00:02:06,200
going to look into
the Accept header

42
00:02:06,200 --> 00:02:09,699
and determine what version
the client is specifying.

43
00:02:09,699 --> 00:02:12,440
Our API version class is
going to be initialized

44
00:02:12,440 --> 00:02:14,470
with the specific
version that we want,

45
00:02:14,470 --> 00:02:17,490
and whether that's the
default version or not.

46
00:02:17,490 --> 00:02:20,140
we'll implement the matches
question mark method,

47
00:02:20,140 --> 00:02:24,150
which states a request as an
argument and returns a Boolean.

48
00:02:24,150 --> 00:02:26,330
If this happens to be
the default version,

49
00:02:26,330 --> 00:02:28,090
we return right away.

50
00:02:28,090 --> 00:02:31,000
Otherwise, we need to
check the Request header.

51
00:02:31,000 --> 00:02:32,760
So we check the
Accept header to see

52
00:02:32,760 --> 00:02:34,510
that the media type
contained there

53
00:02:34,510 --> 00:02:37,090
matches a specific
version number.

54
00:02:37,090 --> 00:02:40,460
Let's see how we can use this
class from our routes file.

55
00:02:40,460 --> 00:02:44,560
The API version class
lives under the Lib folder.

56
00:02:44,560 --> 00:02:47,610
Back in our routes file, the
first thing that we have to do

57
00:02:47,610 --> 00:02:51,010
is to require our
API version class.

58
00:02:51,010 --> 00:02:53,530
Because we're now passing
a constraint object,

59
00:02:53,530 --> 00:02:56,070
the syntax is going to look
a little bit different.

60
00:02:56,070 --> 00:02:59,160
First, we call the scope
method, passing module v1

61
00:02:59,160 --> 00:03:00,870
as the first argument.

62
00:03:00,870 --> 00:03:02,840
Then, the constraint
for that scope

63
00:03:02,840 --> 00:03:07,470
is going to be an API
version object set to v1.

64
00:03:07,470 --> 00:03:10,710
For v2, we do the
same, but instead we

65
00:03:10,710 --> 00:03:14,200
create an API version
object that's set to v2.

66
00:03:14,200 --> 00:03:17,300
We also pass true as the
second argument, which

67
00:03:17,300 --> 00:03:20,670
means that v2 will be
the default version.

68
00:03:20,670 --> 00:03:22,240
Last thing, because
we're not going

69
00:03:22,240 --> 00:03:24,630
to be dealing with
content negotiation,

70
00:03:24,630 --> 00:03:28,310
we need to set a default
format to respond with,

71
00:03:28,310 --> 00:03:31,100
which in this case
is going to be JSON.

72
00:03:31,100 --> 00:03:33,320
This applies to v1
and v2, so we need

73
00:03:33,320 --> 00:03:36,105
to make sure that our JSON
format wraps both of them.

74
00:03:36,105 --> 00:03:39,900
With these changes, our
tests are partially passing.

75
00:03:39,900 --> 00:03:43,930
We need to make one last
change to our routes test.

76
00:03:43,930 --> 00:03:47,330
Because we are no longer
including the API version

77
00:03:47,330 --> 00:03:51,080
as part of the URI, there is
really only one test that we

78
00:03:51,080 --> 00:03:55,030
can write in our routes test,
which is to make sure that

79
00:03:55,030 --> 00:03:58,860
/zombies defaults to version two.

80
00:03:58,860 --> 00:04:02,990
So using assert_generates,
we make sure that /zombies is

81
00:04:02,990 --> 00:04:08,850
routed to v2/zombies
controller in the index action.

82
00:04:08,850 --> 00:04:12,710
Our API version class is a
very basic implementation

83
00:04:12,710 --> 00:04:16,339
of checking the Accept header
for proper API version.

84
00:04:16,339 --> 00:04:19,329
If you need a more robust
solution with more features,

85
00:04:19,329 --> 00:04:21,570
you might want to check
out the Versionist gem.

86
00:04:24,690 --> 00:04:26,850
We've reached the
end of this level,

87
00:04:26,850 --> 00:04:29,010
so get ready for more
challenges on API

88
00:04:29,010 --> 00:04:32,000
versioning using
the Accept header.

