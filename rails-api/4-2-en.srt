1
00:00:01,950 --> 00:00:02,880
Welcome back.

2
00:00:02,880 --> 00:00:07,050
In this level, we're going to
be looking at PUT and PATCH.

3
00:00:07,050 --> 00:00:10,930
PUT and PATCH are used
for updating resources.

4
00:00:10,930 --> 00:00:14,320
But what's the difference
between one and the other?

5
00:00:14,320 --> 00:00:17,100
According to HTTP
spec, we're supposed

6
00:00:17,100 --> 00:00:20,980
to use the PUT method to
send along the resource that

7
00:00:20,980 --> 00:00:26,160
will replace the current
resource under a specific URI.

8
00:00:26,160 --> 00:00:28,750
The problem with that
is that in Rails, we

9
00:00:28,750 --> 00:00:32,280
use the PUT method
for partial updates.

10
00:00:32,280 --> 00:00:34,930
Up until version 3,
Rails didn't quite

11
00:00:34,930 --> 00:00:41,620
follow along with HTTP spec and
used PUT for partial updates.

12
00:00:41,620 --> 00:00:44,610
Starting in version
4, Rails added support

13
00:00:44,610 --> 00:00:48,090
for the PATCH method, which
according to the HTTP spec,

14
00:00:48,090 --> 00:00:51,800
is used for requests that
contain a list of differences

15
00:00:51,800 --> 00:00:55,190
between the resource that's on
the server and the one that's

16
00:00:55,190 --> 00:00:57,380
being sent along
with the request.

17
00:00:57,380 --> 00:00:59,790
There's still support
for the old PUT method.

18
00:00:59,790 --> 00:01:02,260
And both PUT and
PATCH are routed

19
00:01:02,260 --> 00:01:06,610
to the update action
of a given resource.

20
00:01:06,610 --> 00:01:10,550
Let's add support for updating
our episodes resource.

21
00:01:10,550 --> 00:01:13,460
The first thing we're going
to do is write a test.

22
00:01:13,460 --> 00:01:16,590
In our setup block, we're
going to create an episode.

23
00:01:16,590 --> 00:01:18,580
We'll then use the
PATCH method and use

24
00:01:18,580 --> 00:01:21,630
that episodes ID in the URI.

25
00:01:21,630 --> 00:01:24,650
We'll pass along an episode
hash with the new title

26
00:01:24,650 --> 00:01:26,570
as the second argument.

27
00:01:26,570 --> 00:01:28,680
As a third argument,
we're going to specify

28
00:01:28,680 --> 00:01:32,360
that we're expecting JSON back
and that the content that we're

29
00:01:32,360 --> 00:01:34,890
sending is also JSON.

30
00:01:34,890 --> 00:01:37,570
We check back
for 200 response.

31
00:01:37,570 --> 00:01:39,610
Lastly, we called
the reload method

32
00:01:39,610 --> 00:01:43,280
on episode, which causes it to
be reloaded from the database

33
00:01:43,280 --> 00:01:46,000
and populated with
the latest data.

34
00:01:46,000 --> 00:01:47,480
Now, that we have
a failing test.

35
00:01:47,480 --> 00:01:48,980
Let's move on to
the implementation.

36
00:01:51,580 --> 00:01:54,290
In the update action on
our episodes controller,

37
00:01:54,290 --> 00:01:56,960
we first grab the record
from the database.

38
00:01:56,960 --> 00:01:58,760
Then we call
the update method

39
00:01:58,760 --> 00:02:02,280
with the params that were
passed in from the client.

40
00:02:02,280 --> 00:02:04,180
The update method,
which is formerly

41
00:02:04,180 --> 00:02:06,960
known as update
attributes, only updates

42
00:02:06,960 --> 00:02:09,770
values that differed
from the existing record.

43
00:02:09,770 --> 00:02:13,740
We then return the JSON
representation of the episode

44
00:02:13,740 --> 00:02:17,250
along with the 200 status code,
which makes our test pass.

45
00:02:19,840 --> 00:02:24,400
Now, let's write a test for
an unsuccessful PATCH request.

46
00:02:24,400 --> 00:02:26,980
We want to prevent our
API from updating episodes

47
00:02:26,980 --> 00:02:29,390
when the title is too short.

48
00:02:29,390 --> 00:02:30,930
So similar to our
previous test, we

49
00:02:30,930 --> 00:02:33,465
call the PATCH method
using that episode's ID

50
00:02:33,465 --> 00:02:35,040
as part of the URI,

51
00:02:35,040 --> 00:02:38,370
we pass the episode content
as the second argument,

52
00:02:38,370 --> 00:02:41,340
this test block looks very
similar to the previous one,

53
00:02:41,340 --> 00:02:45,400
except that now we're passing
in an invalid title, short.

54
00:02:45,400 --> 00:02:48,610
We check for 422
status code back.

55
00:02:48,610 --> 00:02:51,420
That test doesn't pass, we
move on to the implementation.

56
00:02:54,020 --> 00:02:56,530
Next thing we do, in
our episode model,

57
00:02:56,530 --> 00:02:58,244
we add a validation
for the title,

58
00:02:58,244 --> 00:02:59,660
and we need to
make sure that it's

59
00:02:59,660 --> 00:03:02,010
at least 10 characters long.

60
00:03:02,010 --> 00:03:04,670
Now in the update action
in our episodes controller,

61
00:03:04,670 --> 00:03:08,430
we return the episodes error
along with the 422 status

62
00:03:08,430 --> 00:03:12,780
code, which makes our test pass.

63
00:03:12,780 --> 00:03:15,000
The last method that we're
going to be looking at

64
00:03:15,000 --> 00:03:16,890
is the DELETE method.

65
00:03:16,890 --> 00:03:19,920
The DELETE method is used
when the client is not

66
00:03:19,920 --> 00:03:22,340
Interested in the
resource anymore.

67
00:03:22,340 --> 00:03:24,210
We start by writing a test.

68
00:03:24,210 --> 00:03:27,420
In our setup block, we
create a new episode.

69
00:03:27,420 --> 00:03:29,150
And then, we're
going to test that we

70
00:03:29,150 --> 00:03:31,820
were able to delete
that existing episode.

71
00:03:31,820 --> 00:03:34,840
We use the DELETE method
and that episode's ID

72
00:03:34,840 --> 00:03:36,420
as part of the URI.

73
00:03:36,420 --> 00:03:39,010
Then, we check for
a 204 status code,

74
00:03:39,010 --> 00:03:41,490
which means that we're
expecting a successful response.

75
00:03:41,490 --> 00:03:44,920
But we're not expecting
a response body back.

76
00:03:44,920 --> 00:03:46,250
So our tests failed.

77
00:03:46,250 --> 00:03:48,560
Now, there's a
couple different ways

78
00:03:48,560 --> 00:03:51,690
that the server can
implement the DELETE method.

79
00:03:51,690 --> 00:03:55,710
The first one is by destroying
the record from the database.

80
00:03:55,710 --> 00:03:58,630
So we create a destroy action
in our episode's controller.

81
00:03:58,630 --> 00:04:01,020
We fetch the record
from the database.

82
00:04:01,020 --> 00:04:02,960
And we call the DESTROY method.

83
00:04:02,960 --> 00:04:07,030
Using the HEAD method, we
return a 204 response back.

84
00:04:07,030 --> 00:04:11,500
Our test passed, and this record
was removed from the database.

85
00:04:11,500 --> 00:04:15,256
If you try fetching it again,
we run into an ActiveRecord,

86
00:04:15,256 --> 00:04:16,640
RecordNotFound error.

87
00:04:20,930 --> 00:04:23,670
Another way that we can
implement the DELETE method

88
00:04:23,670 --> 00:04:26,380
is instead of destroying the
record from the database,

89
00:04:26,380 --> 00:04:29,360
we'll simply flag
it as archived.

90
00:04:29,360 --> 00:04:30,860
This is useful
when we don't want

91
00:04:30,860 --> 00:04:33,010
to delete records
from the database.

92
00:04:33,010 --> 00:04:35,150
Perhaps for auditing
purposes, we

93
00:04:35,150 --> 00:04:37,940
need to go back and
look at old data.

94
00:04:37,940 --> 00:04:39,520
In our episode
model we'll create

95
00:04:39,520 --> 00:04:41,564
a new method called archive.

96
00:04:41,564 --> 00:04:42,980
Inside of this
method, we're going

97
00:04:42,980 --> 00:04:46,870
to set an attribute archived to
true and then save the record.

98
00:04:46,870 --> 00:04:50,740
We'll also create a new finder
method called find_unarchived,

99
00:04:50,740 --> 00:04:55,520
which takes an ID and, inside of
that, uses the find_by method.

100
00:04:55,520 --> 00:04:57,230
And inside of that
method, we look

101
00:04:57,230 --> 00:05:01,950
for the record with that ID
but with archived set to false.

102
00:05:01,950 --> 00:05:07,270
This way, we'll return records
only if they are not archived.

103
00:05:07,270 --> 00:05:08,960
Going back to our
destroy action,

104
00:05:08,960 --> 00:05:11,390
we now use the new
find_unarchive method

105
00:05:11,390 --> 00:05:13,570
to fetch the record
from the database

106
00:05:13,570 --> 00:05:17,140
and archive it using
the new archive method.

107
00:05:17,140 --> 00:05:20,710
Archive does not call
destroy, so that record still

108
00:05:20,710 --> 00:05:21,650
lives in the database.

109
00:05:21,650 --> 00:05:24,460
And we can have access to
it if we really need to.

110
00:05:24,460 --> 00:05:27,610
And finally, we return
a headers only response

111
00:05:27,610 --> 00:05:34,340
with the 204 status code,
and our test still passed.

112
00:05:34,340 --> 00:05:36,310
We need to remember
to use the new finders

113
00:05:36,310 --> 00:05:37,750
from other controller actions.

114
00:05:37,750 --> 00:05:39,850
For example, the
show action needs

115
00:05:39,850 --> 00:05:42,840
to use the new
find_unarchived method,

116
00:05:42,840 --> 00:05:45,930
and index action needs to
fetch only the records that

117
00:05:45,930 --> 00:05:46,680
were not archived.

118
00:05:49,190 --> 00:05:51,340
You've reached the
end of this level,

119
00:05:51,340 --> 00:05:53,930
so get ready for
some more challenges.

