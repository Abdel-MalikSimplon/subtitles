1
00:00:00,074 --> 00:00:01,740
[SINGING] She will
clone and fork

2
00:00:01,740 --> 00:00:04,660
your repos faster than you
can blink and then tag, push,

3
00:00:04,660 --> 00:00:06,850
and pull requests
while pouring a drink.

4
00:00:06,850 --> 00:00:09,427
She's studied wikis and
pages to promote her skills.

5
00:00:09,427 --> 00:00:11,010
But it's the branching
and the merging

6
00:00:11,010 --> 00:00:12,960
which will pay all the bills.

7
00:00:12,960 --> 00:00:15,820
Your only chance to find
her is to use her workflow.

8
00:00:15,820 --> 00:00:18,190
Commit to her release,
and you can access control.

9
00:00:18,190 --> 00:00:21,800
You'll be pushing past security
to join her at the club,

10
00:00:21,800 --> 00:00:24,040
just to catch a glimpse
of her Mastering GitHub.

11
00:00:29,070 --> 00:00:31,250
Welcome back to
"Mastering GitHub."

12
00:00:31,250 --> 00:00:35,370
In this level, we're going to
be looking at tags and releases.

13
00:00:35,370 --> 00:00:37,390
So far, we've talked
a lot about how

14
00:00:37,390 --> 00:00:40,930
we can use feature branches
to build new functionality.

15
00:00:40,930 --> 00:00:42,530
But we haven't talked
at all about how

16
00:00:42,530 --> 00:00:46,360
we can use tags or
release branches to manage

17
00:00:46,360 --> 00:00:49,180
moving that functionality
to production.

18
00:00:49,180 --> 00:00:51,730
Let's start by looking at tags.

19
00:00:51,730 --> 00:00:53,280
The first question
people often ask

20
00:00:53,280 --> 00:00:55,880
is, when should I create a tag.

21
00:00:55,880 --> 00:00:59,630
And the answer is, every
time you push to production,

22
00:00:59,630 --> 00:01:02,400
you should tag that commit.

23
00:01:02,400 --> 00:01:05,290
The only exception to this is if
you have a continuous delivery

24
00:01:05,290 --> 00:01:09,180
environment, where every single
Commit on your master branch

25
00:01:09,180 --> 00:01:10,770
ends up in production.

26
00:01:10,770 --> 00:01:13,920
It's important to tag
every production release,

27
00:01:13,920 --> 00:01:16,970
so that you know
exactly what code

28
00:01:16,970 --> 00:01:19,690
has gone to production
at what time.

29
00:01:19,690 --> 00:01:22,250
There are three
different types of tags.

30
00:01:22,250 --> 00:01:24,060
Lightweight tags
allow you to create

31
00:01:24,060 --> 00:01:28,230
a simple, human-readable
title for pointing

32
00:01:28,230 --> 00:01:30,640
to a particular commit hash.

33
00:01:30,640 --> 00:01:34,710
Signed tags allow you to
cryptographically sign a tag,

34
00:01:34,710 --> 00:01:38,170
so you can prove that it
was you that made the tag.

35
00:01:38,170 --> 00:01:41,500
But most of the time you're
going to use annotated tags.

36
00:01:41,500 --> 00:01:43,990
What they allow
you to do is give

37
00:01:43,990 --> 00:01:48,060
a name to a particular
commit but also to capture

38
00:01:48,060 --> 00:01:51,790
who created the tag, when
they created the tag,

39
00:01:51,790 --> 00:01:54,180
and in the description
field, explain

40
00:01:54,180 --> 00:01:55,365
why they created the tag.

41
00:01:56,470 --> 00:01:59,095
So let's look at how
we'd use annotated tags.

42
00:02:00,120 --> 00:02:04,780
The command you use is git
tag -a, to make it annotated.

43
00:02:04,780 --> 00:02:09,580
And then you give it a
name, in this case, v1.3.2,

44
00:02:09,580 --> 00:02:16,600
which is version 1.3.2 with a
-m message of whatever the tag

45
00:02:16,600 --> 00:02:18,050
message should be.

46
00:02:18,050 --> 00:02:20,200
If you leave off
the -m, it will just

47
00:02:20,200 --> 00:02:22,300
throw you into you
default text editor,

48
00:02:22,300 --> 00:02:25,542
and you'll be able to create
a more comprehensive message

49
00:02:25,542 --> 00:02:26,042
there.

50
00:02:27,470 --> 00:02:29,150
Once you've created
the tag, you then

51
00:02:29,150 --> 00:02:31,040
want to push it up to GitHub.

52
00:02:31,040 --> 00:02:33,430
This doesn't happen
automatically with a push.

53
00:02:33,430 --> 00:02:36,530
So you have to do
git push --tags,

54
00:02:36,530 --> 00:02:40,950
to upload any or all of the
tags you've created locally

55
00:02:40,950 --> 00:02:42,225
to your GitHub repository.

56
00:02:44,620 --> 00:02:47,300
A common best practice
for naming tags

57
00:02:47,300 --> 00:02:49,290
is to use semantic versioning.

58
00:02:49,290 --> 00:02:51,490
So you might start
with a v and then

59
00:02:51,490 --> 00:02:55,680
follow it by three
numbers - the major release,

60
00:02:55,680 --> 00:02:58,970
the minor release,
and the patch version.

61
00:02:58,970 --> 00:03:03,270
The major release is to
identify substantial changes

62
00:03:03,270 --> 00:03:05,340
to the application,
often ones that

63
00:03:05,340 --> 00:03:07,550
will break backwards
compatibility.

64
00:03:07,550 --> 00:03:11,670
Minor releases are to capture
new user-valued functionality.

65
00:03:11,670 --> 00:03:14,800
And patch releases are
used for simple bug fixes.

66
00:03:14,800 --> 00:03:16,460
Well, let's look
at this in action.

67
00:03:16,460 --> 00:03:19,380
If we go to the terminal window
and check out our git log,

68
00:03:19,380 --> 00:03:21,975
we can see that there was
a previous release - ccbc2.

69
00:03:24,085 --> 00:03:26,955
And let's say that we
wanted to tag that.

70
00:03:30,160 --> 00:03:33,570
So the first thing we do
is we would git checkout,

71
00:03:33,570 --> 00:03:36,110
to check out that SHA1 hash.

72
00:03:36,110 --> 00:03:38,770
And of course, we're in
a detached head state,

73
00:03:38,770 --> 00:03:42,400
because we are not
on a commit that

74
00:03:42,400 --> 00:03:45,240
has a branch associated with it.

75
00:03:45,240 --> 00:03:48,300
Then what we can now do
is create a tag here.

76
00:03:48,300 --> 00:03:52,160
So we just git tag
-a, give it a name.

77
00:03:52,160 --> 00:03:54,840
And then we can either
-m to give it a message,

78
00:03:54,840 --> 00:03:58,060
or in this case, go
into a text editor,

79
00:03:58,060 --> 00:04:01,660
to create a more comprehensive
message for the tag.

80
00:04:05,340 --> 00:04:07,230
When we go back to
the log, we can now

81
00:04:07,230 --> 00:04:09,570
see that tag against
the SHA1 hash.

82
00:04:10,630 --> 00:04:13,000
But when we go up
to releases and look

83
00:04:13,000 --> 00:04:15,860
at the list of releases,
the tag isn't there.

84
00:04:15,860 --> 00:04:18,089
That's because we've
not pushed it up yet.

85
00:04:18,089 --> 00:04:22,300
So we go back to the command
line, git push --tags,

86
00:04:22,300 --> 00:04:25,970
to upload any of
our tags to GitHub.

87
00:04:25,970 --> 00:04:28,040
And now when we
look in GitHub, we

88
00:04:28,040 --> 00:04:32,020
can see that tag under
the "releases" tab.

89
00:04:32,020 --> 00:04:35,060
If you want more information
on naming your tags,

90
00:04:35,060 --> 00:04:38,510
a great place to go
is the semver.org,

91
00:04:38,510 --> 00:04:42,990
SemanticVersioning.org website,
that has a lot of information

92
00:04:42,990 --> 00:04:46,314
on best practices for
using semantic versions

93
00:04:46,314 --> 00:04:47,355
for your version numbers.

94
00:04:50,600 --> 00:04:54,110
Time for you to go
start tagging some code.

