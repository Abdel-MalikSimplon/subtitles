1
00:00:00,270 --> 00:00:02,270
[SINGING] She'll clone
and fork your repos

2
00:00:02,270 --> 00:00:03,920
faster than you
can blink, and then

3
00:00:03,920 --> 00:00:06,850
tag, push, and pull
requests while pouring a drink.

4
00:00:06,850 --> 00:00:09,427
She's studied wikis and
pages to promote her skills,

5
00:00:09,427 --> 00:00:11,010
but it's the branching
and the merging

6
00:00:11,010 --> 00:00:12,960
which will pay all the bills.

7
00:00:12,960 --> 00:00:15,980
Your only chance to find
her is to use her workflow.

8
00:00:15,980 --> 00:00:19,030
Commit to her release and
you can access control.

9
00:00:19,030 --> 00:00:20,440
You'll be pushing
passed security

10
00:00:20,440 --> 00:00:22,065
to join her at the
club just to catch

11
00:00:22,065 --> 00:00:24,040
a glimpse of her
Mastering Github.

12
00:00:28,760 --> 00:00:30,254
Welcome back.

13
00:00:30,254 --> 00:00:31,670
In this level,
we're going to look

14
00:00:31,670 --> 00:00:35,570
at hub, which is a command-line
tool that allows you to access

15
00:00:35,570 --> 00:00:37,642
a lot of the
functionality of GitHub

16
00:00:37,642 --> 00:00:38,975
without having to use a browser.

17
00:00:40,360 --> 00:00:42,690
GitHub's great,
but it's a website.

18
00:00:42,690 --> 00:00:45,310
And so because of that, every
time you want to do something,

19
00:00:45,310 --> 00:00:47,980
you're testing your
hand-eye coordination

20
00:00:47,980 --> 00:00:50,730
by using a mouse
to click through.

21
00:00:50,730 --> 00:00:53,426
Whether you're working with
issues or pull requests,

22
00:00:53,426 --> 00:00:55,050
wouldn't it be great
if there was a way

23
00:00:55,050 --> 00:00:58,720
that you could create those and
work with them from the command-

24
00:00:58,720 --> 00:00:59,980
line?

25
00:00:59,980 --> 00:01:03,110
Well, that's exactly what
hub allows you to do.

26
00:01:03,110 --> 00:01:06,350
And it also gives you
a number of superpowers

27
00:01:06,350 --> 00:01:11,280
to get so that you can more
easily clone, fork, and work

28
00:01:11,280 --> 00:01:13,095
with various GitHub-based
repositories.

29
00:01:15,150 --> 00:01:19,000
So the first thing you'll need
to do is get hub installed.

30
00:01:19,000 --> 00:01:20,970
On a Mac, the
easiest way to do it

31
00:01:20,970 --> 00:01:24,720
is to use the Homebrew package
manager and just brew update

32
00:01:24,720 --> 00:01:26,670
to make sure it has
the latest recipes,

33
00:01:26,670 --> 00:01:29,350
and then brew install hub.

34
00:01:29,350 --> 00:01:31,390
If you're on another
operating system,

35
00:01:31,390 --> 00:01:35,425
you're going to want to clone
the GitHub hub repository.

36
00:01:36,520 --> 00:01:39,610
cd into that, and then you're
going to have to rake install.

37
00:01:40,620 --> 00:01:43,070
So you're going to have to
make sure that you have Ruby

38
00:01:43,070 --> 00:01:45,250
installed on your machine
to make this work.

39
00:01:47,000 --> 00:01:49,570
There are two ways of using hub.

40
00:01:49,570 --> 00:01:53,400
The first way is you can use
the hub commands directly.

41
00:01:53,400 --> 00:01:56,720
So if you want to use the
clone or fork functionality,

42
00:01:56,720 --> 00:01:59,310
you can type hub
clone or hub fork.

43
00:02:00,380 --> 00:02:04,590
The second option is
to alias hub as a git.

44
00:02:04,590 --> 00:02:09,759
You can literally just type $
alias hub=git, or more likely,

45
00:02:09,759 --> 00:02:14,020
you're going to want to add
this to your terminal profile.

46
00:02:14,020 --> 00:02:18,690
Then, you can run commands
like git clone or git fork,

47
00:02:18,690 --> 00:02:22,560
and it's going to start by
using the hub functionality

48
00:02:22,560 --> 00:02:26,210
and then just degrade naturally
to using git functionality

49
00:02:26,210 --> 00:02:27,840
if you don't need hub.

50
00:02:27,840 --> 00:02:29,360
There's a couple
of important points

51
00:02:29,360 --> 00:02:31,590
to bear in mind when
working with hub.

52
00:02:31,590 --> 00:02:33,160
The first is, if
you're on Windows

53
00:02:33,160 --> 00:02:36,660
and you're using msysGit,
which is what I'd recommend,

54
00:02:36,660 --> 00:02:39,920
you do not want to
alias hub as git.

55
00:02:39,920 --> 00:02:43,340
It will slow down your
command prompt way too much.

56
00:02:43,340 --> 00:02:47,210
The second, is if you use
Bash or Oh-My-Zsh shell,

57
00:02:47,210 --> 00:02:50,150
you're going to want to
implement tab completion.

58
00:02:50,150 --> 00:02:52,380
I've added a couple
of links to the slide

59
00:02:52,380 --> 00:02:55,690
here that you can use to
download those scripts.

60
00:02:56,922 --> 00:02:59,010
So let's try the basics here.

61
00:02:59,010 --> 00:03:02,350
Let's say we wanted to
create a repo using hub.

62
00:03:02,350 --> 00:03:04,080
How would we do that?

63
00:03:04,080 --> 00:03:06,530
Well, we would git
init, as we usually

64
00:03:06,530 --> 00:03:08,825
would to create a local
repository on our laptops.

65
00:03:09,860 --> 00:03:13,330
Then, create some content
and add and commit that

66
00:03:13,330 --> 00:03:15,030
to the local git repository.

67
00:03:15,030 --> 00:03:17,190
But now here's
where things change.

68
00:03:17,190 --> 00:03:20,200
Instead of having to go
to a browser, go to GitHub

69
00:03:20,200 --> 00:03:23,850
and add a new repo, you
can just type git create

70
00:03:23,850 --> 00:03:28,030
to create a new repository
for this project on GitHub.

71
00:03:29,060 --> 00:03:34,230
Then, just git push -u to set
the default upstream origin

72
00:03:34,230 --> 00:03:39,320
master, and you can even use
git browse to open up a browser

73
00:03:39,320 --> 00:03:41,660
and see this
repository in GitHub.

74
00:03:43,740 --> 00:03:46,900
So let's say we wanted to
create a pull request using hub.

75
00:03:46,900 --> 00:03:50,820
Well, we'd git checkout -b to
create a new branch locally,

76
00:03:50,820 --> 00:03:54,740
create some new code, add
and commit that, and then git

77
00:03:54,740 --> 00:04:00,380
push -u origin new branch
name to push the new branch up

78
00:04:00,380 --> 00:04:01,200
to GitHub.

79
00:04:01,200 --> 00:04:05,000
We need to have a branch before
we can create a pull request.

80
00:04:05,000 --> 00:04:07,560
But then again, instead of
having to go to the browser,

81
00:04:07,560 --> 00:04:09,490
all we need to do is
type git pull-request.

82
00:04:10,670 --> 00:04:12,830
It will throw us into
our default text editor

83
00:04:12,830 --> 00:04:16,260
and allows us to create a title
and description for that pull

84
00:04:16,260 --> 00:04:19,049
request, and it will generate
it for us automatically.

85
00:04:20,769 --> 00:04:23,180
Even cloning is easier with hub.

86
00:04:23,180 --> 00:04:26,090
Instead of having
to type git clone,

87
00:04:26,090 --> 00:04:30,760
HTTPS://github.c
om/username/project,

88
00:04:30,760 --> 00:04:36,040
we can just git clone repo
name if it's our repository.

89
00:04:36,040 --> 00:04:38,490
If it's a repository
owned by somebody else,

90
00:04:38,490 --> 00:04:43,320
we just git clone, username,
or organization , slash repo,

91
00:04:43,320 --> 00:04:46,050
and that will clone the
repository automatically.

92
00:04:48,110 --> 00:04:51,070
Forking a repo is also
much easier using hub.

93
00:04:52,190 --> 00:04:55,220
We would start by cloning
the repository so that we

94
00:04:55,220 --> 00:04:56,940
have a copy of the repo locally.

95
00:04:56,940 --> 00:05:00,130
So let's take the
deadlyvipers/dojo_rules

96
00:05:00,130 --> 00:05:01,870
and clone that.

97
00:05:01,870 --> 00:05:06,600
Then you cd into the directory
and just run git fork.

98
00:05:06,600 --> 00:05:11,851
And that will create your own
fork of this project on GitHub.

99
00:05:11,851 --> 00:05:13,350
Now, the only problem
is if you want

100
00:05:13,350 --> 00:05:16,950
to use things like git
pull-request, at the moment,

101
00:05:16,950 --> 00:05:19,120
origin is still set to
the deadlyvipers fork.

102
00:05:20,250 --> 00:05:25,500
So what you have to do is go in
and edit your .git/config file

103
00:05:25,500 --> 00:05:29,650
to change origin and
the fork of the repo -

104
00:05:29,650 --> 00:05:31,540
to change those names around.

105
00:05:31,540 --> 00:05:34,295
And let's see all of
this in a screencast.

106
00:05:37,300 --> 00:05:40,250
Let's start by creating
a new repository.

107
00:05:40,250 --> 00:05:48,270
We'll initialize it,
create some content,

108
00:05:48,270 --> 00:05:49,830
add, and commit that locally.

109
00:05:52,540 --> 00:05:56,760
And now we can use hub to
create a repository on GitHub.

110
00:05:56,760 --> 00:05:58,940
And then we can push our
changes up to that repo.

111
00:06:13,730 --> 00:06:22,180
Now, let's create a new
branch, and some code to it,

112
00:06:22,180 --> 00:06:25,160
and push that branch
remotely as well,

113
00:06:25,160 --> 00:06:27,480
setting a default upstream.

114
00:06:27,480 --> 00:06:32,780
Now we can use hub here
to git or hub pull-request

115
00:06:32,780 --> 00:06:34,810
to create a pull request.

116
00:06:34,810 --> 00:06:36,885
We enter the title
and description.

117
00:06:40,070 --> 00:06:44,530
And now, if we run hub
browse, we can go to the repo

118
00:06:44,530 --> 00:06:47,430
and see that under
"Pull Requests,"

119
00:06:47,430 --> 00:06:49,720
there is a new
pull request that's

120
00:06:49,720 --> 00:06:54,320
been added and associated to
the branch we just created.

121
00:06:54,320 --> 00:06:57,690
We can also easily
clone a repo just

122
00:06:57,690 --> 00:07:02,050
by entering either the name of
the repo - if it's one of ours -

123
00:07:02,050 --> 00:07:05,847
or the username organization
name and the name of the repo

124
00:07:05,847 --> 00:07:07,180
if it's somebody else's project.

125
00:07:08,260 --> 00:07:10,265
Let's say we want to
fork that project.

126
00:07:11,610 --> 00:07:15,940
Well, if we do that, then pull
request isn't going to work,

127
00:07:15,940 --> 00:07:17,920
because the remotes
are going to be wrong.

128
00:07:21,630 --> 00:07:26,570
So the easiest way to fix this
is just to rename the remotes

129
00:07:26,570 --> 00:07:32,810
in the dot.git/config.

130
00:07:32,810 --> 00:07:33,870
We could create a branch.

131
00:07:36,990 --> 00:07:40,030
Let's add some content
and commit that.

132
00:07:43,510 --> 00:07:47,820
And now we can push
the branch successfully

133
00:07:47,820 --> 00:07:57,320
and we can use git pull-request
to create a pull request,

134
00:07:57,320 --> 00:08:04,390
enter a title and description,
and git browse to see that

135
00:08:04,390 --> 00:08:06,490
on our fork of the repository.

136
00:08:15,210 --> 00:08:18,460
So hub allows you to
do a lot more than just

137
00:08:18,460 --> 00:08:22,160
cloning, forking, and creating
pull requests more quickly.

138
00:08:22,929 --> 00:08:24,720
Let's have a look at
some of the other ways

139
00:08:24,720 --> 00:08:27,580
that you can use hub to
more effectively collaborate

140
00:08:27,580 --> 00:08:29,060
with your team.

141
00:08:29,060 --> 00:08:33,140
Let's say that you're using a
fork-based collaboration model,

142
00:08:33,140 --> 00:08:35,659
and you've got a new
collaborator on your team

143
00:08:35,659 --> 00:08:38,230
that you want to pull
some changes from.

144
00:08:38,230 --> 00:08:43,559
Well now, all you need to do
is git remote add username,

145
00:08:43,559 --> 00:08:46,730
or even just git
fetch username, and it

146
00:08:46,730 --> 00:08:50,577
will add them as a remote
and fetch their changes

147
00:08:50,577 --> 00:08:52,410
so you can see what
they've been working on.

148
00:08:54,160 --> 00:08:56,120
Let's say that there's
a fork of a repository

149
00:08:56,120 --> 00:08:59,870
that you're working on
has a commit you need,

150
00:08:59,870 --> 00:09:01,960
but you're not
collaborating with that fork

151
00:09:01,960 --> 00:09:02,880
on a regular basis.

152
00:09:04,290 --> 00:09:05,240
No problems.

153
00:09:05,240 --> 00:09:10,335
Now you can use git cherry
pick to cherry pick any SHA-1

154
00:09:10,335 --> 00:09:15,390
hash for a commit from any fork
of a project you're working on.

155
00:09:15,390 --> 00:09:19,110
All you do is type $ git
cherry-pick username @ SHA-1

156
00:09:19,110 --> 00:09:24,910
hash, and it will pull down that
commit from that fork and apply

157
00:09:24,910 --> 00:09:26,160
it to your local branch.

158
00:09:29,100 --> 00:09:30,820
Another common
problem is when you

159
00:09:30,820 --> 00:09:32,840
want to check out
a pull request,

160
00:09:32,840 --> 00:09:35,244
but it's a fork that you've
not worked with before.

161
00:09:35,244 --> 00:09:36,785
You don't have it
set up as a remote.

162
00:09:37,840 --> 00:09:39,940
With hub, that's
no problem at all.

163
00:09:39,940 --> 00:09:44,830
You just git checkout, the
URL of the pull request,

164
00:09:44,830 --> 00:09:46,660
and then the name
of the custom brunch

165
00:09:46,660 --> 00:09:48,340
you'd like to create locally.

166
00:09:48,340 --> 00:09:52,580
And it will go find the
fork, find the branch,

167
00:09:52,580 --> 00:09:55,370
and create that as a
custom branch for you

168
00:09:55,370 --> 00:09:59,970
locally that you can then run
the tests and see how it works.

169
00:10:01,850 --> 00:10:05,140
Let's say that somebody
has created a pull request

170
00:10:05,140 --> 00:10:07,210
and you want to merge it in.

171
00:10:07,210 --> 00:10:10,290
But again, you don't have
their fork set up as a remote.

172
00:10:11,480 --> 00:10:13,000
No problem at all.

173
00:10:13,000 --> 00:10:16,900
With hub, all you need to do
is type $ git merge and give

174
00:10:16,900 --> 00:10:20,850
the URL of the pull request,
and it will automatically handle

175
00:10:20,850 --> 00:10:24,020
the process of finding
the appropriate branch

176
00:10:24,020 --> 00:10:27,030
on the necessary fork
and merging it in.

177
00:10:27,030 --> 00:10:29,880
Once you've done the merge,
you've then got two Options.

178
00:10:29,880 --> 00:10:33,390
If you like what you see,
you can push the merge

179
00:10:33,390 --> 00:10:35,190
back up to GitHub.

180
00:10:35,190 --> 00:10:37,380
If it was just for
test integration -

181
00:10:37,380 --> 00:10:39,820
maybe you were just trying
to test what it would be like

182
00:10:39,820 --> 00:10:43,290
to integrate somebody else's
feature banch with your own -

183
00:10:43,290 --> 00:10:49,980
you can just $ git reset --hard
HEAD~1 to throw away the merge

184
00:10:49,980 --> 00:10:51,260
and continue with your work.

185
00:10:52,550 --> 00:10:54,690
So let's try a
couple of scenarios

186
00:10:54,690 --> 00:10:56,510
right here on the command line.

187
00:10:56,510 --> 00:10:59,550
Let's first start
by using git fetch

188
00:10:59,550 --> 00:11:02,490
username to pull from
a fork and to view

189
00:11:02,490 --> 00:11:04,760
what somebody else on our
team's been working on.

190
00:11:12,110 --> 00:11:14,350
We could even cherry pick.

191
00:11:14,350 --> 00:11:16,720
How about we look
at a fork that we

192
00:11:16,720 --> 00:11:19,120
don't have a copy
of locally and that

193
00:11:19,120 --> 00:11:21,180
we don't have set
up as a remote?

194
00:11:21,180 --> 00:11:24,370
And let's find a commit on it
that we'd like to work with.

195
00:11:25,910 --> 00:11:30,100
So now we can just git
cherry-pick with the username

196
00:11:30,100 --> 00:11:32,400
and the SHA-1 hash
for that commit,

197
00:11:32,400 --> 00:11:35,380
and it will pull that down
and add it to our branch.

198
00:11:44,499 --> 00:11:46,040
And let's say we
want to merge a pull

199
00:11:46,040 --> 00:11:48,160
request from
somebody else's fork.

200
00:11:49,270 --> 00:11:53,190
We can just git merge
and then provide

201
00:11:53,190 --> 00:11:56,690
the URL for the pull request,
and it will merge it,

202
00:11:56,690 --> 00:12:00,250
creating a merge commit,
on our local master branch.

203
00:12:00,250 --> 00:12:02,830
And then if we're happy with
that and the tests run well,

204
00:12:02,830 --> 00:12:06,150
we can push those
changes back up to GitHub

205
00:12:06,150 --> 00:12:07,690
to close the pull request.

206
00:12:26,050 --> 00:12:27,897
Why don't you have
a play with hub?

207
00:12:27,897 --> 00:12:29,480
We've created some
challenges that you

208
00:12:29,480 --> 00:12:32,690
can use to get some hands-on
experience working with this.

209
00:12:34,147 --> 00:12:35,480
I'll see you in the outro video.

210
00:12:37,690 --> 00:12:40,838
Let's start with just
a little bit of theory.

211
00:12:40,838 --> 00:12:41,826
Let's not do that.

212
00:12:41,826 --> 00:12:44,300
[LAUGHTER]

213
00:12:44,300 --> 00:12:46,810
Let's imagine there's an
impossibly complex diagram

214
00:12:46,810 --> 00:12:48,703
with way too many
lines and arrows.

215
00:12:48,703 --> 00:12:49,630
[LAUGHTER]

216
00:12:49,630 --> 00:12:50,713
--called deadlyviper.com--

217
00:12:51,212 --> 00:12:51,787
[LAUGHTER]

218
00:12:51,787 --> 00:12:53,995
If you had a whole bunch of
people moving [MUMBLING].

219
00:12:56,085 --> 00:12:56,700
[LAUGHTER]

220
00:12:56,700 --> 00:12:58,700
That have ever been in
made within a repository.

221
00:13:00,090 --> 00:13:00,590
Yeah.

222
00:13:00,590 --> 00:13:01,340
Ever been in made.

223
00:13:01,340 --> 00:13:02,980
Ever been made.

