1
00:00:01,700 --> 00:00:03,200
In this section,
we're going to look

2
00:00:03,200 --> 00:00:06,610
at some of the authentication
and authorization options

3
00:00:06,610 --> 00:00:07,110
in GitHub.

4
00:00:08,130 --> 00:00:11,920
It's important to realize
that other than signed tags,

5
00:00:11,920 --> 00:00:15,430
Git doesn't have a native
concept of authentication

6
00:00:15,430 --> 00:00:16,840
at all.

7
00:00:16,840 --> 00:00:20,820
You have to identify yourself as
an author based upon your name

8
00:00:20,820 --> 00:00:24,810
and email, but you can put
any strings into those fields

9
00:00:24,810 --> 00:00:25,530
that you want.

10
00:00:26,640 --> 00:00:28,910
GitHub doesn't do much
about authentication either.

11
00:00:29,920 --> 00:00:34,010
For example, what GitHub does
is it identifies committers

12
00:00:34,010 --> 00:00:36,450
based on their email address.

13
00:00:36,450 --> 00:00:39,260
So let's say you wanted
to get David Heinemeier

14
00:00:39,260 --> 00:00:41,170
Hansson to commit to your repo.

15
00:00:41,170 --> 00:00:41,720
It's easy.

16
00:00:41,720 --> 00:00:44,634
All you need to do is configure
your global user email

17
00:00:44,634 --> 00:00:45,550
to david@basecamp.com.

18
00:00:47,390 --> 00:00:51,590
Make a change, add it, commit
it, push it to your repo,

19
00:00:51,590 --> 00:00:53,140
and as you see on
the screen here,

20
00:00:53,140 --> 00:00:55,990
you too can get David to
contribute to your open source

21
00:00:55,990 --> 00:00:56,490
project.

22
00:00:58,930 --> 00:01:01,100
GitHub follows
the Git philosophy

23
00:01:01,100 --> 00:01:02,879
of trusting your team.

24
00:01:02,879 --> 00:01:04,670
And because of that,
there's fairly limited

25
00:01:04,670 --> 00:01:08,030
access control functionality
built into GitHub,

26
00:01:08,030 --> 00:01:09,170
deliberately.

27
00:01:09,170 --> 00:01:12,320
Owners on a repository
can do anything they want.

28
00:01:12,320 --> 00:01:14,310
And if you add somebody
as a collaborator,

29
00:01:14,310 --> 00:01:17,690
they have full read and
write access to the repo.

30
00:01:17,690 --> 00:01:21,010
They can make any changes
they want to any branches,

31
00:01:21,010 --> 00:01:23,502
and there's nothing you
can do to stop them.

32
00:01:23,502 --> 00:01:24,960
There are, however,
easy things you

33
00:01:24,960 --> 00:01:28,650
can do to undo any changes
that they chose to make.

34
00:01:28,650 --> 00:01:31,380
If you've really got people
working with your project

35
00:01:31,380 --> 00:01:35,060
that you don't want to provide
full read and write access to,

36
00:01:35,060 --> 00:01:36,910
just ask them to create a fork.

37
00:01:36,910 --> 00:01:39,570
Folks are effectively
the main unit

38
00:01:39,570 --> 00:01:42,266
of access control on GitHub.

39
00:01:42,266 --> 00:01:43,640
Another common
pattern is to have

40
00:01:43,640 --> 00:01:46,860
all of you developers working
on the same code base,

41
00:01:46,860 --> 00:01:50,520
but then have a
separate repo that you

42
00:01:50,520 --> 00:01:55,280
send pull requests to that only
your operations manager or team

43
00:01:55,280 --> 00:01:56,445
lead can accept.

44
00:01:58,000 --> 00:02:00,550
Even though permissions
in GitHub are very

45
00:02:00,550 --> 00:02:03,550
coarse-grained - you either
have access to a repo or you

46
00:02:03,550 --> 00:02:08,479
don't - with Git, you often have
a large number of repositories.

47
00:02:08,479 --> 00:02:10,860
And if you also have a
large number of developers,

48
00:02:10,860 --> 00:02:13,720
it can be hard to
manage that mapping.

49
00:02:13,720 --> 00:02:16,230
As you hire a new
developer, making sure

50
00:02:16,230 --> 00:02:18,110
that they have access
to the 30 repos

51
00:02:18,110 --> 00:02:21,350
they should can be
a chore to maintain.

52
00:02:21,350 --> 00:02:27,560
So what you will often do is
use organizations to own code,

53
00:02:27,560 --> 00:02:30,980
either for a company or
for an open source project.

54
00:02:30,980 --> 00:02:34,860
And then, use teams to
provide easier management

55
00:02:34,860 --> 00:02:38,310
of permissions, because you
can add a developer to a team,

56
00:02:38,310 --> 00:02:42,660
and then give team access
to the 30 repos it requires.

57
00:02:44,200 --> 00:02:47,190
It used to be that SSH was the
preferred way of connecting

58
00:02:47,190 --> 00:02:47,690
to GitHub.

59
00:02:48,820 --> 00:02:52,760
Now, both HTTPS and
SSH work just fine,

60
00:02:52,760 --> 00:02:55,230
but generally
HTTPS is preferred.

61
00:02:55,652 --> 00:02:57,360
The only thing you're
going to want to do

62
00:02:57,360 --> 00:02:59,620
is make sure to use
a credential helper,

63
00:02:59,620 --> 00:03:02,740
so you don't have to keep
typing your password every time

64
00:03:02,740 --> 00:03:03,604
you connect.

65
00:03:03,604 --> 00:03:05,020
The other thing
that's worth doing

66
00:03:05,020 --> 00:03:08,100
is upgrading to two
factor authentication.

67
00:03:08,100 --> 00:03:12,090
So every once in a while,
you'll get a text message

68
00:03:12,090 --> 00:03:14,840
from GitHub giving
you an access code

69
00:03:14,840 --> 00:03:17,510
to make sure that if somebody
else gets your password,

70
00:03:17,510 --> 00:03:20,475
they can't access and
change all of your repos.

71
00:03:22,190 --> 00:03:25,190
Access tokens can be
used instead of passwords

72
00:03:25,190 --> 00:03:27,930
for working with Git over HTTPS.

73
00:03:29,360 --> 00:03:31,720
They can also be used to
authenticate to the GitHub

74
00:03:31,720 --> 00:03:33,830
API over basic authentication.

75
00:03:35,120 --> 00:03:36,830
There's a number
reasons why you would

76
00:03:36,830 --> 00:03:39,410
choose to use access tokens.

77
00:03:39,410 --> 00:03:42,780
Firstly, if you've configured
two factor authentication,

78
00:03:42,780 --> 00:03:47,040
your password won't be
enough to connect over HTTPS,

79
00:03:47,040 --> 00:03:49,630
and it won't ask you
for the second factor.

80
00:03:49,630 --> 00:03:53,360
So you need to create
a personal access token

81
00:03:53,360 --> 00:03:57,290
to be able to connect
to GitHub over HTTPS.

82
00:03:57,290 --> 00:03:59,300
And make sure to enable
password caching,

83
00:03:59,300 --> 00:04:02,130
so you don't need to remember
the contents of that password

84
00:04:02,130 --> 00:04:03,200
token.

85
00:04:03,200 --> 00:04:05,805
The second reason you might
want to create an access token

86
00:04:05,805 --> 00:04:09,590
is if you have an application
that you want to provide access

87
00:04:09,590 --> 00:04:13,952
to your GitHub repos, either by
pulling and pushing using Git,

88
00:04:13,952 --> 00:04:16,329
or via the GitHub API.

89
00:04:16,329 --> 00:04:19,220
If that's your use case, you
should create an access token

90
00:04:19,220 --> 00:04:20,529
for that application.

91
00:04:20,529 --> 00:04:22,630
You should treat those
access tokens the same way

92
00:04:22,630 --> 00:04:25,080
as you would passwords,
and make sure never

93
00:04:25,080 --> 00:04:27,370
to commit them to
your code base.

94
00:04:27,370 --> 00:04:29,160
To create an access
token, just go

95
00:04:29,160 --> 00:04:33,120
to Edit Profile, Applications,
and click on Generate New

96
00:04:33,120 --> 00:04:36,280
Token in the Personal
access tokens section.

97
00:04:36,280 --> 00:04:38,360
Give the token a name
that will make it clear

98
00:04:38,360 --> 00:04:41,490
why you created it, command-
line interface for my Mac

99
00:04:41,490 --> 00:04:44,160
or access for the
widget generator.

100
00:04:44,160 --> 00:04:47,060
And you're going to limit
the scope for those tokens.

101
00:04:47,060 --> 00:04:51,500
By default, they have
repo, public repo, user,

102
00:04:51,500 --> 00:04:52,900
and gist scopes.

103
00:04:52,900 --> 00:04:55,870
So that allows you to access
private and public repos,

104
00:04:55,870 --> 00:04:58,077
update user information,
and create gists.

105
00:04:58,077 --> 00:04:59,910
There are a number of
other scopes available

106
00:04:59,910 --> 00:05:01,960
though, depending upon
what you want to do.

107
00:05:01,960 --> 00:05:06,010
So take the time to learn
and see what the scopes are,

108
00:05:06,010 --> 00:05:09,100
and which ones necessary for
the application you're building.

109
00:05:10,680 --> 00:05:14,550
There are a number of different
strategies for connecting

110
00:05:14,550 --> 00:05:19,220
deployment scripts and automated
scripts to your GitHub repo.

111
00:05:19,220 --> 00:05:23,210
There are four common approaches
to providing deployment scripts

112
00:05:23,210 --> 00:05:25,240
with access to your GitHub repo.

113
00:05:25,240 --> 00:05:29,050
You can use SSH agent
forwarding, OAuth access

114
00:05:29,050 --> 00:05:32,465
tokens, deploy keys,
or machine users.

115
00:05:33,540 --> 00:05:35,720
With SSH agent
forwarding, you log

116
00:05:35,720 --> 00:05:38,590
in to the machine that
is running the script,

117
00:05:38,590 --> 00:05:40,405
and you can configure
forwarding so it

118
00:05:40,405 --> 00:05:42,850
will use your SSH credentials.

119
00:05:42,850 --> 00:05:44,870
That's fine, but it
doesn't work if you

120
00:05:44,870 --> 00:05:47,370
want the script to run
when you're not there.

121
00:05:47,370 --> 00:05:51,260
OAuth access tokens can
be a good next step.

122
00:05:51,260 --> 00:05:54,314
They allow you to create
a personal access token

123
00:05:54,314 --> 00:05:55,605
and provide that to the script.

124
00:05:56,820 --> 00:06:00,010
This allows the script to
have the same access you do.

125
00:06:00,010 --> 00:06:02,780
So the good news is it's
very easy to configure.

126
00:06:02,780 --> 00:06:05,820
The bad news is it will have
access to all of your Git

127
00:06:05,820 --> 00:06:09,260
repos, not just the one
you're working with.

128
00:06:09,260 --> 00:06:12,212
The next step is to
create a deploy key.

129
00:06:12,212 --> 00:06:13,670
This allows you to
create something

130
00:06:13,670 --> 00:06:16,560
like a personal
access token, but just

131
00:06:16,560 --> 00:06:20,020
for a single repository,
reducing your security

132
00:06:20,020 --> 00:06:21,025
footprint.

133
00:06:21,025 --> 00:06:23,490
And then, the final
option is, let's

134
00:06:23,490 --> 00:06:26,900
say that you've got a script
that needs access to 20 Git

135
00:06:26,900 --> 00:06:29,800
repos, but you've got
access to 60 Git repos

136
00:06:29,800 --> 00:06:31,500
and you don't want
to share that.

137
00:06:31,500 --> 00:06:34,860
You can just create a
new username on GitHub

138
00:06:34,860 --> 00:06:37,020
just for that
script, and give it

139
00:06:37,020 --> 00:06:40,370
access to only the
repositories that it needs.

140
00:06:41,520 --> 00:06:44,590
Under Edit Ppofile,
security, it's also worth

141
00:06:44,590 --> 00:06:47,120
looking at the Sessions section.

142
00:06:47,120 --> 00:06:49,430
It will show you the
different devices that

143
00:06:49,430 --> 00:06:54,100
have connected to GitHub
as you, and the last times

144
00:06:54,100 --> 00:06:55,270
they connected.

145
00:06:55,270 --> 00:06:57,580
As you scroll down
the page, you can also

146
00:06:57,580 --> 00:07:00,830
see a security history
of the important things

147
00:07:00,830 --> 00:07:02,080
you've done on GitHub.

148
00:07:02,080 --> 00:07:04,050
And it's worth logging
in here every once

149
00:07:04,050 --> 00:07:06,910
in a while to make sure
that somebody else hasn't

150
00:07:06,910 --> 00:07:09,270
been making changes
to your account.

151
00:07:11,220 --> 00:07:12,720
One of the most
important things you

152
00:07:12,720 --> 00:07:15,716
can do to improve the security
of your GitHub account

153
00:07:15,716 --> 00:07:17,340
is to enable two
factor authentication.

154
00:07:18,720 --> 00:07:22,290
So I'd recommend you go
ahead and do that now,

155
00:07:22,290 --> 00:07:24,840
and then we'll see
you in the next level.

