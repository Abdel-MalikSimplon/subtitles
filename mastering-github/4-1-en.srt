1
00:00:00,557 --> 00:00:02,890
[SINGING] She will clone and
fork your repos faster than

2
00:00:02,890 --> 00:00:03,647
you can blink.

3
00:00:03,647 --> 00:00:05,230
And then tag, push,
and pull requests,

4
00:00:05,230 --> 00:00:06,850
while pouring a drink.

5
00:00:06,850 --> 00:00:09,570
She's studied wikis and
pages to promote her skills,

6
00:00:09,570 --> 00:00:11,260
but it's the branching
and the merging

7
00:00:11,260 --> 00:00:12,950
which will pay all the bills.

8
00:00:12,950 --> 00:00:15,820
Your only chance to find
her is the use her workflow.

9
00:00:15,820 --> 00:00:18,770
Commit to her release and
you can access control.

10
00:00:18,770 --> 00:00:21,800
You'll be pushing past security
to join her at the club.

11
00:00:21,800 --> 00:00:24,050
Just to catch a glimpse
of her Mastering GitHub.

12
00:00:29,010 --> 00:00:31,880
You're watching Level
Four of Mastering GitHub.

13
00:00:31,880 --> 00:00:35,260
In this level, we're going to
cover GitHub issues, the GitHub

14
00:00:35,260 --> 00:00:37,985
wiki functionality,
and GitHub Pages.

15
00:00:39,050 --> 00:00:41,015
Let's look first
at GitHub Issues.

16
00:00:42,254 --> 00:00:43,670
There are a couple
of main reasons

17
00:00:43,670 --> 00:00:46,695
why you might choose to use
the issues functionality that's

18
00:00:46,695 --> 00:00:50,020
built into GitHub. The first
common reason is if you've

19
00:00:50,020 --> 00:00:51,764
got bugs that you
want to keep track of,

20
00:00:51,764 --> 00:00:53,180
it often makes
sense to keep track

21
00:00:53,180 --> 00:00:55,195
of those right in the
repository with the code

22
00:00:55,195 --> 00:00:57,020
and with everything else.

23
00:00:57,020 --> 00:00:59,550
The other use case is
it often makes sense

24
00:00:59,550 --> 00:01:04,410
to use GitHub Issues to track
stories or units of work

25
00:01:04,410 --> 00:01:06,300
that you need to deliver.

26
00:01:06,300 --> 00:01:08,040
And in fact, some
teams even put both

27
00:01:08,040 --> 00:01:10,720
of those into GitHub
issues, just using labels

28
00:01:10,720 --> 00:01:13,205
to differentiate new
features from bugs.

29
00:01:14,360 --> 00:01:17,130
If you want to enable issues for
a project, it's really simple.

30
00:01:17,130 --> 00:01:20,080
Just go to Settings,
Options, and you'll

31
00:01:20,080 --> 00:01:22,510
notice that there are
three check boxes.

32
00:01:22,510 --> 00:01:24,950
And the last one is a
check box to allow you

33
00:01:24,950 --> 00:01:27,500
to enable or disable Issues.

34
00:01:27,500 --> 00:01:28,595
By default, it's enabled.

35
00:01:29,880 --> 00:01:31,710
Don't worry if you've
got a bunch of issues

36
00:01:31,710 --> 00:01:34,810
and you uncheck the box
and save it by accident.

37
00:01:34,810 --> 00:01:36,440
GitHub still keeps
the issues, it just

38
00:01:36,440 --> 00:01:38,400
doesn't allow you
to access them.

39
00:01:38,400 --> 00:01:41,594
So just re-enable the check
box, and all of your issues

40
00:01:41,594 --> 00:01:43,510
and all of their comments
will still be there.

41
00:01:45,200 --> 00:01:48,100
If you're working on a project
that's publicly accessible,

42
00:01:48,100 --> 00:01:52,040
anybody can create new issues
or comment on the issues.

43
00:01:52,040 --> 00:01:54,440
If you're creating a
private repository just

44
00:01:54,440 --> 00:01:56,330
for the members of
your team, it'll

45
00:01:56,330 --> 00:01:58,270
only be collaborators
with access

46
00:01:58,270 --> 00:02:01,910
to the project that can
view and create issues.

47
00:02:04,490 --> 00:02:07,500
Click on the Issues tab
in the right-hand nav bar,

48
00:02:07,500 --> 00:02:09,539
and you'll see a list
of any issues that

49
00:02:09,539 --> 00:02:12,510
are being set up for
a particular project.

50
00:02:12,510 --> 00:02:14,750
If you want to see what
work's outstanding,

51
00:02:14,750 --> 00:02:16,567
have a look at the
list of open issues.

52
00:02:16,567 --> 00:02:18,900
If you'd like to get a sense
of what the developers have

53
00:02:18,900 --> 00:02:22,225
delivered recently, look at
the recently closed issues.

54
00:02:23,721 --> 00:02:25,220
When you look at
the list of issues,

55
00:02:25,220 --> 00:02:28,070
you'll see that you can see
everyone's issues, issues that

56
00:02:28,070 --> 00:02:30,610
have been assigned
for you to work on,

57
00:02:30,610 --> 00:02:33,600
issues that you created for
other people to work on,

58
00:02:33,600 --> 00:02:35,840
and issues that have
mentioned you; either

59
00:02:35,840 --> 00:02:38,690
in the original issue, or
somewhere in the comments,

60
00:02:38,690 --> 00:02:41,680
with an 'at' mention of
your GitHub user name.

61
00:02:41,680 --> 00:02:45,280
There's also the ability
to filter issues by labels.

62
00:02:45,280 --> 00:02:49,080
One common pattern is to have
labels for features and bugs,

63
00:02:49,080 --> 00:02:51,300
so you can quickly
see what functionality

64
00:02:51,300 --> 00:02:53,060
needs to be built,
and what issues

65
00:02:53,060 --> 00:02:55,810
you have with the functionality
you've already delivered.

66
00:02:55,810 --> 00:02:57,700
You can even filter
by multiple labels.

67
00:02:59,760 --> 00:03:01,920
Let's say you find
a bug in a project.

68
00:03:01,920 --> 00:03:04,640
You can create a
new issue to notify

69
00:03:04,640 --> 00:03:06,810
the team that there's a problem.

70
00:03:06,810 --> 00:03:09,770
Just go to the Issues page, and
in the top right-hand corner,

71
00:03:09,770 --> 00:03:12,550
click on the "New issue" button.

72
00:03:12,550 --> 00:03:15,290
When you do that, you're
going to get a form.

73
00:03:15,290 --> 00:03:17,750
The form first asks for
a title for the issue,

74
00:03:17,750 --> 00:03:20,520
to briefly describe
what it's about.

75
00:03:20,520 --> 00:03:22,620
It also gives you
a larger area where

76
00:03:22,620 --> 00:03:25,330
you can give a more
comprehensive description.

77
00:03:25,330 --> 00:03:27,790
And then, if you know who
should be working on it,

78
00:03:27,790 --> 00:03:31,180
you could also select from
a drop down list or type

79
00:03:31,180 --> 00:03:34,550
in any GitHub user name
to assign the issue

80
00:03:34,550 --> 00:03:36,290
to a particular person.

81
00:03:36,290 --> 00:03:38,540
There's also the option
to assign the issue

82
00:03:38,540 --> 00:03:41,945
to a milestone, if it needs to
be done for your 2.0 release.

83
00:03:42,990 --> 00:03:45,620
And you have the ability
to add one or more labels

84
00:03:45,620 --> 00:03:48,140
to determine, is this
a feature or a bug?

85
00:03:48,140 --> 00:03:50,250
And what functionality
does it relate to?

86
00:03:51,520 --> 00:03:54,360
If an issue is assigned
to you, or if you

87
00:03:54,360 --> 00:03:57,710
get mentioned in an
issue, either in the body

88
00:03:57,710 --> 00:04:00,690
of the original issue or
in any of the comments,

89
00:04:00,690 --> 00:04:02,930
you're going to start
getting notified

90
00:04:02,930 --> 00:04:06,470
of any other changes
that occur on that issue.

91
00:04:06,470 --> 00:04:08,640
Any other comments that
are made, or any other

92
00:04:08,640 --> 00:04:11,330
commits that
reference that issue.

93
00:04:11,330 --> 00:04:14,320
Sometimes that can be annoying,
if it's a long running issue

94
00:04:14,320 --> 00:04:17,670
that you don't have any
ongoing relationship with.

95
00:04:17,670 --> 00:04:22,190
So if you use the button towards
the bottom right-hand corner,

96
00:04:22,190 --> 00:04:24,500
you can unsubscribe
from an issue,

97
00:04:24,500 --> 00:04:26,210
to make sure that you
don't keep getting

98
00:04:26,210 --> 00:04:28,542
notified about what's going on.

99
00:04:28,542 --> 00:04:31,490
Equally, if there's an issue
you haven't been mentioned in,

100
00:04:31,490 --> 00:04:35,480
you can just click on the
Subscribe link on any issue,

101
00:04:35,480 --> 00:04:38,270
and you will start getting
notified anytime there's

102
00:04:38,270 --> 00:04:40,380
activity on that issue.

103
00:04:40,380 --> 00:04:42,350
You can also respond
to an issue just

104
00:04:42,350 --> 00:04:44,560
by replying to any
email notification

105
00:04:44,560 --> 00:04:46,600
that you get about that issue.

106
00:04:46,600 --> 00:04:48,895
So it's really easy to
respond to issues, even

107
00:04:48,895 --> 00:04:49,770
from a mobile device.

108
00:04:51,650 --> 00:04:55,810
Issues integrate really well
with commits and pull requests.

109
00:04:55,810 --> 00:04:58,270
You could reference
an issue in a commit,

110
00:04:58,270 --> 00:05:01,710
and that will make the commit
appear in the issue history.

111
00:05:01,710 --> 00:05:04,180
And it will notify anyone
who's subscribed to the issue.

112
00:05:05,610 --> 00:05:09,100
Also, if you use
certain words like fixes

113
00:05:09,100 --> 00:05:12,760
or closes or resolves,
and follow that

114
00:05:12,760 --> 00:05:15,520
by an issue number, a
pound sign, and the number

115
00:05:15,520 --> 00:05:18,860
of the issue - if you put that
in a commit message, when that

116
00:05:18,860 --> 00:05:22,280
commit is merged into
your default branch -

117
00:05:22,280 --> 00:05:24,580
for most people, the
master branch - that

118
00:05:24,580 --> 00:05:26,290
will close the
issue automatically.

119
00:05:28,060 --> 00:05:31,020
Issues also support a wide
range of keyboard commands

120
00:05:31,020 --> 00:05:32,515
for navigating quickly.

121
00:05:32,515 --> 00:05:34,890
So especially if you're dealing
with a lot of bug reports

122
00:05:34,890 --> 00:05:37,440
on a regular basis, you
can use the keyboard

123
00:05:37,440 --> 00:05:40,060
to speed up your workflow,
using GitHub issues.

124
00:05:41,520 --> 00:05:43,150
So let's see this
work in practice.

125
00:05:44,754 --> 00:05:46,420
We're going into this
project, and we're

126
00:05:46,420 --> 00:05:50,040
going to create a new issue.

127
00:05:50,040 --> 00:05:51,810
We click on the
New issue button,

128
00:05:51,810 --> 00:05:55,970
and we put in some kind of
title to concisely describe

129
00:05:55,970 --> 00:05:57,780
the issue that we're having.

130
00:05:57,780 --> 00:06:00,470
We can select from a drop down
list of developers, which,

131
00:06:00,470 --> 00:06:03,670
by default, will be anybody
who has been involved

132
00:06:03,670 --> 00:06:05,470
with the project to date.

133
00:06:05,470 --> 00:06:08,280
And we can either select
from an existing milestone,

134
00:06:08,280 --> 00:06:11,650
or if we wanted to, we
could create a new milestone

135
00:06:11,650 --> 00:06:13,600
to assign this issue to.

136
00:06:13,600 --> 00:06:17,560
So in this case, let's create
a new milestone for the issue.

137
00:06:17,560 --> 00:06:19,890
And then, let's take a
moment to put a little more

138
00:06:19,890 --> 00:06:22,650
of a description, so whoever
needs to work on this

139
00:06:22,650 --> 00:06:24,770
understands what
we want them to do.

140
00:06:24,770 --> 00:06:27,730
And then we submit the issue.

141
00:06:27,730 --> 00:06:30,420
Now let's go into
a terminal window

142
00:06:30,420 --> 00:06:32,760
and see how we could
work with that issue.

143
00:06:32,760 --> 00:06:38,520
Let's open up the file, make
the change that was requested,

144
00:06:38,520 --> 00:06:42,155
and then we're going to add
and commit those changes.

145
00:06:42,917 --> 00:06:44,500
But in the commit
message, we're going

146
00:06:44,500 --> 00:06:48,170
to make sure to say that
it fixes number 9, which

147
00:06:48,170 --> 00:06:50,590
is the issue number
we just created.

148
00:06:50,590 --> 00:06:53,550
Then we can push those
changes up to GitHub,

149
00:06:53,550 --> 00:06:55,290
and go look at the issue.

150
00:06:55,290 --> 00:06:57,620
And we see that it's
automatically been closed,

151
00:06:57,620 --> 00:07:00,250
because it automatically
identified that there

152
00:07:00,250 --> 00:07:02,950
was a commit on
the default branch

153
00:07:02,950 --> 00:07:05,260
that mentioned the issue.

154
00:07:05,260 --> 00:07:07,910
And because it used
the word fixes,

155
00:07:07,910 --> 00:07:10,450
it knows that the issue should
be closed automatically.

156
00:07:11,900 --> 00:07:13,280
Up to this point,
we've just been

157
00:07:13,280 --> 00:07:15,300
looking at issues
on a small project.

158
00:07:15,300 --> 00:07:17,010
But sometimes it's
good to see how

159
00:07:17,010 --> 00:07:20,250
issues are used by large
open source projects.

160
00:07:20,250 --> 00:07:24,270
Let's go look at Rails, and
see how they use GitHub issues.

161
00:07:24,270 --> 00:07:26,350
As we go to the
Rails project, we

162
00:07:26,350 --> 00:07:29,670
can see that in the
Issues tab, there's

163
00:07:29,670 --> 00:07:32,510
a list of outstanding issues.

164
00:07:32,510 --> 00:07:34,980
We can filter the
issues by milestone,

165
00:07:34,980 --> 00:07:37,770
so that we just see the issues
for an upcoming milestone.

166
00:07:37,770 --> 00:07:40,470
It looks like the latest
milestone had no issues.

167
00:07:40,470 --> 00:07:43,090
But as we go to a milestone
further in the future,

168
00:07:43,090 --> 00:07:45,650
we can see there are a
number of outstanding issues

169
00:07:45,650 --> 00:07:48,630
to resolve before
that goes live.

170
00:07:48,630 --> 00:07:51,030
We can also filter by labels.

171
00:07:51,030 --> 00:07:52,820
Let's say that we
just wanted to see

172
00:07:52,820 --> 00:07:56,270
the issues that related
to active record.

173
00:07:56,270 --> 00:07:57,500
We can do that as well.

174
00:07:57,500 --> 00:08:00,840
So we can filter, for
example, by the issues

175
00:08:00,840 --> 00:08:04,490
within a particular milestone
that relate to active record.

176
00:08:06,517 --> 00:08:08,100
Now it's your chance
in the challenges

177
00:08:08,100 --> 00:08:11,020
to work with issues on GitHub.

