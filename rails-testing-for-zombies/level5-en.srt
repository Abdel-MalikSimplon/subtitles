1
00:00:00,000 --> 00:00:00,866


2
00:00:00,866 --> 00:00:26,070
[MUSIC PLAYING]

3
00:00:26,070 --> 00:00:28,700
You're watching Rails
Testing for Zombies.

4
00:00:28,700 --> 00:00:30,350
I'm Nathaniel Bibler,
and this is Level

5
00:00:30,350 --> 00:00:32,840
Five, Integration Testing.

6
00:00:32,840 --> 00:00:35,190
Greg just walked you through the
first few levels talking

7
00:00:35,190 --> 00:00:37,880
about unit testing and isolation
testing, and the

8
00:00:37,880 --> 00:00:40,220
problem there is that when
you're testing little pieces

9
00:00:40,220 --> 00:00:42,160
it's hard to tell if the
whole thing works.

10
00:00:42,160 --> 00:00:43,950
That's where integration
testing comes in.

11
00:00:43,950 --> 00:00:46,600
So let's get started.

12
00:00:46,600 --> 00:00:49,670
Integration testing tests your
full application stack.

13
00:00:49,670 --> 00:00:52,610
Now in a Rails context, that
generally means from the rack

14
00:00:52,610 --> 00:00:54,960
level down into Rails
and then back out.

15
00:00:54,960 --> 00:00:58,470
It could be said that it tests
from the outside in.

16
00:00:58,470 --> 00:01:01,330
It could also be called
black box testing.

17
00:01:01,330 --> 00:01:04,360
It's basically testing what the
end user's going to see

18
00:01:04,360 --> 00:01:06,800
and how your application
is going to respond.

19
00:01:06,800 --> 00:01:09,330
Now it should be noted here that
integration tests don't

20
00:01:09,330 --> 00:01:12,560
actually spin up your entire
server stack, so if you need

21
00:01:12,560 --> 00:01:14,860
to test something like Nginx
or a caching layer or

22
00:01:14,860 --> 00:01:18,530
something else, this isn't quite
the place to do that.

23
00:01:18,530 --> 00:01:20,870
So if you've ever done any Rails
development in the past

24
00:01:20,870 --> 00:01:22,900
or ever used the scaffold in
the past, you might have

25
00:01:22,900 --> 00:01:25,340
noticed that Rails will actually
generate controller

26
00:01:25,340 --> 00:01:27,530
and view tests for you
automatically just like they

27
00:01:27,530 --> 00:01:29,250
do with the model tests.

28
00:01:29,250 --> 00:01:31,060
Why are we talking about
the controller

29
00:01:31,060 --> 00:01:31,920
and view tests here?

30
00:01:31,920 --> 00:01:33,460
Why did we jump straight
from unit tests

31
00:01:33,460 --> 00:01:35,420
into integration tests?

32
00:01:35,420 --> 00:01:38,430
And the reasoning there is that
views and controllers

33
00:01:38,430 --> 00:01:41,690
really shouldn't have logic to
them, and in the case that

34
00:01:41,690 --> 00:01:44,610
maybe they do, those should be
isolated tests which aren't

35
00:01:44,610 --> 00:01:46,490
considered integration tests.

36
00:01:46,490 --> 00:01:48,830
Integration tests should
ultimately completely have you

37
00:01:48,830 --> 00:01:51,030
covered because they test your
full stack, they're going to

38
00:01:51,030 --> 00:01:53,010
touch the view, the controller,
your business

39
00:01:53,010 --> 00:01:54,940
objects, and back out.

40
00:01:54,940 --> 00:01:56,870
There are some people out there
that do test their full

41
00:01:56,870 --> 00:01:59,690
application at every level,
isolating the view,

42
00:01:59,690 --> 00:02:01,650
controller, model and
then having a

43
00:02:01,650 --> 00:02:03,140
full integration stack.

44
00:02:03,140 --> 00:02:06,700
At Envy Labs, we've found that
we can pretty much get by with

45
00:02:06,700 --> 00:02:09,550
testing our models in isolation
and then having a

46
00:02:09,550 --> 00:02:13,010
full integration suite
on top of it.

47
00:02:13,010 --> 00:02:14,740
Now let's talk about some of
the things that Rails gives

48
00:02:14,740 --> 00:02:16,830
you to help you with your
integration tests.

49
00:02:16,830 --> 00:02:20,970
First of all, it gives you web
browserish-like queries to be

50
00:02:20,970 --> 00:02:24,110
able to actually call into your
application, acting like

51
00:02:24,110 --> 00:02:25,580
the end users' web browser.

52
00:02:25,580 --> 00:02:28,050
You'll see that these are really
low level calls, such

53
00:02:28,050 --> 00:02:30,900
as get, post, put, and delete.

54
00:02:30,900 --> 00:02:33,550
These aren't clicking on links,
these aren't filling

55
00:02:33,550 --> 00:02:34,540
out a form, right.

56
00:02:34,540 --> 00:02:36,880
These are very, very low level,
and what they do is

57
00:02:36,880 --> 00:02:39,330
they send a request and they
get back a response, and at

58
00:02:39,330 --> 00:02:41,160
that point, your tests
are against

59
00:02:41,160 --> 00:02:43,400
those particular responses.

60
00:02:43,400 --> 00:02:46,720
So because these are very low
level requests, it's not going

61
00:02:46,720 --> 00:02:49,050
to do things like follow
redirects for you.

62
00:02:49,050 --> 00:02:51,920
So, Rails also gives you
some other helpers like

63
00:02:51,920 --> 00:02:54,470
follow_redirect, where it will
look to see if the last

64
00:02:54,470 --> 00:02:56,620
response was a redirect
response, follow that

65
00:02:56,620 --> 00:02:59,280
redirect, make a get request to
whatever the location is,

66
00:02:59,280 --> 00:03:01,260
and let you continue
with your testing.

67
00:03:01,260 --> 00:03:03,810
I should also note here that if
you call follow_redirect or

68
00:03:03,810 --> 00:03:06,040
any of the other redirect
helpers that Rails provides

69
00:03:06,040 --> 00:03:08,610
and the last response wasn't a
redirect, it's going to throw

70
00:03:08,610 --> 00:03:09,860
an exception.

71
00:03:09,860 --> 00:03:13,100


72
00:03:13,100 --> 00:03:15,310
So now that we've seen how to
act like a web browser and

73
00:03:15,310 --> 00:03:18,190
kind of make those external
calls into your application,

74
00:03:18,190 --> 00:03:20,350
we need to come back again
to assertions.

75
00:03:20,350 --> 00:03:23,390
You know, we saw that Ruby
gives you some level of

76
00:03:23,390 --> 00:03:24,010
assertions.

77
00:03:24,010 --> 00:03:26,680
We saw that Rails adds some
extra assertions to that at

78
00:03:26,680 --> 00:03:29,520
the modeling unit level, but
at the integration level,

79
00:03:29,520 --> 00:03:32,130
Rails gives you even more
custom assertions, such

80
00:03:32,130 --> 00:03:33,710
assert_response.

81
00:03:33,710 --> 00:03:35,720
And again, this is going to
look at your last response

82
00:03:35,720 --> 00:03:39,220
coming in and assert_response
is going to check the status

83
00:03:39,220 --> 00:03:40,250
code of that response.

84
00:03:40,250 --> 00:03:41,750
So in this case, we're checking
that the last

85
00:03:41,750 --> 00:03:45,410
response was a success,
which equates to 200.

86
00:03:45,410 --> 00:03:47,930
So you could either use the
success symbol or you could

87
00:03:47,930 --> 00:03:50,850
use the numeric 200 and
get the same result.

88
00:03:50,850 --> 00:03:53,350
Rails also provides you a few
other helpers for the

89
00:03:53,350 --> 00:03:57,120
assert_response such as
redirect, missing, or error

90
00:03:57,120 --> 00:04:00,500
where it will check for a three
anything response, a 404

91
00:04:00,500 --> 00:04:03,750
in the case of missing, or a
five anything response for a

92
00:04:03,750 --> 00:04:05,260
server error.

93
00:04:05,260 --> 00:04:07,770
Rails also gives you access
to all of the rack defined

94
00:04:07,770 --> 00:04:11,330
symbols that represent status
code, such as move permanently

95
00:04:11,330 --> 00:04:16,829
with HTTP 301, or accepted
with 202.

96
00:04:16,829 --> 00:04:20,440
So along with assert_response,
Rails also gives us

97
00:04:20,440 --> 00:04:21,980
assert_redirected_to.

98
00:04:21,980 --> 00:04:23,670
What that's going to do is check
that the last response

99
00:04:23,670 --> 00:04:26,310
is a redirect and it's going
to test that the location

100
00:04:26,310 --> 00:04:28,780
header in that response
is what we expected--

101
00:04:28,780 --> 00:04:31,040
in theory, that the end users'
web browser is going to go

102
00:04:31,040 --> 00:04:32,680
where we think it's
going to go.

103
00:04:32,680 --> 00:04:35,250
It also gives you assert_tag,
where you can test against the

104
00:04:35,250 --> 00:04:36,980
contents of the DOM returned.

105
00:04:36,980 --> 00:04:39,040
So what it's going to do is
look at the last response,

106
00:04:39,040 --> 00:04:41,960
look at the body, make sure that
it's an HTML document,

107
00:04:41,960 --> 00:04:44,400
and then you can basically
define what elements you're

108
00:04:44,400 --> 00:04:45,080
looking for.

109
00:04:45,080 --> 00:04:47,330
So in this case, maybe we're
looking for an anchor tag that

110
00:04:47,330 --> 00:04:49,390
has an href to the root URL.

111
00:04:49,390 --> 00:04:52,600
We could also conversely say it
does not have a tag, so we

112
00:04:52,600 --> 00:04:55,540
could say it doesn't have a
div with an ID of zombie.

113
00:04:55,540 --> 00:04:57,750
Rails also gives us the
assert_select, where unlike

114
00:04:57,750 --> 00:05:00,340
the tag assertions where we talk
about DOM elements like a

115
00:05:00,340 --> 00:05:02,830
and div, we can use
a CSS selector.

116
00:05:02,830 --> 00:05:05,450
And it actually takes an
optional parameter after that

117
00:05:05,450 --> 00:05:08,460
where we can even specify the
content that we're looking for

118
00:05:08,460 --> 00:05:11,850
in that particular element.

119
00:05:11,850 --> 00:05:14,370
So how do we actually create
an integration test?

120
00:05:14,370 --> 00:05:17,380
Well, Rails actually has an
integration test generator

121
00:05:17,380 --> 00:05:19,130
that can be used like this.

122
00:05:19,130 --> 00:05:22,310
You can say Rails generate
integration_test and

123
00:05:22,310 --> 00:05:23,380
then give it a name.

124
00:05:23,380 --> 00:05:25,690
That name can be anything you
want, it doesn't have to match

125
00:05:25,690 --> 00:05:26,930
a model that exists, it doesn't

126
00:05:26,930 --> 00:05:28,510
have to match anything.

127
00:05:28,510 --> 00:05:30,560
In this case, we're saying
zombies so that's going to

128
00:05:30,560 --> 00:05:33,200
create an integration test
called zombies_test, and

129
00:05:33,200 --> 00:05:36,230
inside it it's going to make
a new class, zombies_test.

130
00:05:36,230 --> 00:05:39,170
When it gets run, you're going
to see it creates a test

131
00:05:39,170 --> 00:05:41,570
integration zombies_test file.

132
00:05:41,570 --> 00:05:43,490
At the top, you're going to see
the require test_helper,

133
00:05:43,490 --> 00:05:45,770
which is what we saw in the
models, and then you're going

134
00:05:45,770 --> 00:05:48,350
to see class ZombiesTest.

135
00:05:48,350 --> 00:05:50,310
But in this case, you're going
to see that it's inheriting

136
00:05:50,310 --> 00:05:52,860
from ActionDispatch
IntegrationTest, whereas

137
00:05:52,860 --> 00:05:55,820
before it was coming from Active
Support Test Case.

138
00:05:55,820 --> 00:05:58,620
And then you're also going to
see fixtures all, which is a

139
00:05:58,620 --> 00:06:01,460
call to tell Rails to load
all of the fixtures.

140
00:06:01,460 --> 00:06:03,410
But again, Rails isn't actually
going to generate any

141
00:06:03,410 --> 00:06:05,530
tests for us, there's just going
to put in a stub to tell

142
00:06:05,530 --> 00:06:07,760
us where they want us to put the
test and it's up to us to

143
00:06:07,760 --> 00:06:10,310
define them.

144
00:06:10,310 --> 00:06:13,310
So let's write our first
integration test.

145
00:06:13,310 --> 00:06:15,540
To do so, we're probably going
to have to know a little bit

146
00:06:15,540 --> 00:06:18,000
about the response coming back
because we want to know what

147
00:06:18,000 --> 00:06:20,170
we're going to say
is happening.

148
00:06:20,170 --> 00:06:23,080
So over here, you can see what
the response might look like

149
00:06:23,080 --> 00:06:24,460
for the Zombie Show page.

150
00:06:24,460 --> 00:06:27,560
And in this case, what's
important is that we're

151
00:06:27,560 --> 00:06:31,020
showing a page for Ash, and
we're dictating that by saying

152
00:06:31,020 --> 00:06:33,690
in the header the zombie's
name-- in this case, Ash--

153
00:06:33,690 --> 00:06:34,660
is present.

154
00:06:34,660 --> 00:06:36,970
So how do we test or something
like that?

155
00:06:36,970 --> 00:06:39,830
Back in our zombies_test
integration test file, we're

156
00:06:39,830 --> 00:06:44,010
going to add a new test that
says anyone can view zombie

157
00:06:44,010 --> 00:06:45,630
information.

158
00:06:45,630 --> 00:06:48,240
And what we're going to do here
is load a zombie from the

159
00:06:48,240 --> 00:06:51,660
fixture, we're going to get
the zombie URL for that

160
00:06:51,660 --> 00:06:54,520
particular zombie, and then
we're going to assert that

161
00:06:54,520 --> 00:06:56,250
response was successful.

162
00:06:56,250 --> 00:06:58,650
This will give us an early
indication if we have a typo

163
00:06:58,650 --> 00:07:01,750
on the view page, a typo in the
controller, or some other

164
00:07:01,750 --> 00:07:05,900
blatant issue here where we
would see a 500 response.

165
00:07:05,900 --> 00:07:07,520
Next, we're going to
call assert_select.

166
00:07:07,520 --> 00:07:09,600
We're going to look for the h1
element, and we're going to

167
00:07:09,600 --> 00:07:12,580
test that the contents of it are
Ash, in this case, which

168
00:07:12,580 --> 00:07:14,090
is what we're looking for.

169
00:07:14,090 --> 00:07:17,020
I should note here that unlike
earlier when Greg taught us

170
00:07:17,020 --> 00:07:19,610
that you should generally have
one assertion per test, you're

171
00:07:19,610 --> 00:07:21,140
seeing that we're doing two.

172
00:07:21,140 --> 00:07:23,370
The reason for that is because
now that we're at

173
00:07:23,370 --> 00:07:26,370
integration test, it takes a
little bit longer to run down

174
00:07:26,370 --> 00:07:28,910
the entire stack and make the
fake request and check the

175
00:07:28,910 --> 00:07:31,900
response, so it's a little bit
of a tradeoff between time to

176
00:07:31,900 --> 00:07:33,870
run the test versus what
we're testing.

177
00:07:33,870 --> 00:07:36,530
I should also note that because
we have two assertions

178
00:07:36,530 --> 00:07:39,060
in one test, if the first
assertion fails, we're not

179
00:07:39,060 --> 00:07:40,920
going to have any clue as to
whether or not the second

180
00:07:40,920 --> 00:07:42,520
assertion passes or fails.

181
00:07:42,520 --> 00:07:43,820
That's the benefit
of splitting it

182
00:07:43,820 --> 00:07:46,520
into separate tests.

183
00:07:46,520 --> 00:07:48,510
Now that we've seen what Rails
gives us to aid with

184
00:07:48,510 --> 00:07:51,540
integration testing, you've
probably noticed that there

185
00:07:51,540 --> 00:07:53,900
could be some issues with it.

186
00:07:53,900 --> 00:07:56,280
You know, how do you navigate
multiple pages?

187
00:07:56,280 --> 00:07:58,830
Do you make 30 get requests?

188
00:07:58,830 --> 00:08:01,100
How do you exercise
forms and buttons?

189
00:08:01,100 --> 00:08:03,460
We haven't even talked
about that yet.

190
00:08:03,460 --> 00:08:06,270
And at the end of the day,
wouldn't it be better if it

191
00:08:06,270 --> 00:08:09,020
acted more like a web browser
where it followed redirects

192
00:08:09,020 --> 00:08:10,870
automatically and kind
of handled some of

193
00:08:10,870 --> 00:08:12,690
those things for us?

194
00:08:12,690 --> 00:08:16,270
So I want to introduce you to
Capybara, which is going to be

195
00:08:16,270 --> 00:08:18,390
another external gem.

196
00:08:18,390 --> 00:08:21,400
It was written by Jonas
Nicholas, and it simulates

197
00:08:21,400 --> 00:08:24,300
user activity and the
user's browser.

198
00:08:24,300 --> 00:08:27,750
And with it, you could do things
like visit login_path,

199
00:08:27,750 --> 00:08:29,860
so this is different
from the get, put,

200
00:08:29,860 --> 00:08:31,680
post that we saw earlier.

201
00:08:31,680 --> 00:08:35,100
You can say within a particular
element on the page

202
00:08:35,100 --> 00:08:37,980
we would like to fill in the
login field with a value, we'd

203
00:08:37,980 --> 00:08:40,900
like to fill in the password
with another value, maybe we'd

204
00:08:40,900 --> 00:08:43,770
like to check a remember me
button, and we'd like to click

205
00:08:43,770 --> 00:08:45,410
on a login button.

206
00:08:45,410 --> 00:08:48,500
And unlike the original Rails
integration tests, it acts

207
00:08:48,500 --> 00:08:50,990
like the browser, so redirects
are automatically followed.

208
00:08:50,990 --> 00:08:53,600


209
00:08:53,600 --> 00:08:56,050
So how do we install Capybara?

210
00:08:56,050 --> 00:08:58,660
Well, just like with the other
gems, we're going to open our

211
00:08:58,660 --> 00:09:00,540
Gemfile inside of
the test group.

212
00:09:00,540 --> 00:09:02,870
We're going to say gem Capybara,
we're going to

213
00:09:02,870 --> 00:09:05,500
rebundle to make sure it gets
installed, and then we're

214
00:09:05,500 --> 00:09:07,660
going to open our test helper.

215
00:09:07,660 --> 00:09:09,490
In our test helper, at the
top we're going to add a

216
00:09:09,490 --> 00:09:12,920
requirement that says require
capybara/rails.

217
00:09:12,920 --> 00:09:15,010
That's going to tell Capybara
to place whatever hooks are

218
00:09:15,010 --> 00:09:17,760
necessary to tie into the
integration test suite that

219
00:09:17,760 --> 00:09:19,080
Rails that already provides
that knows

220
00:09:19,080 --> 00:09:20,350
where things are at.

221
00:09:20,350 --> 00:09:23,170
We're also going to open
up the ActionDispatch

222
00:09:23,170 --> 00:09:26,035
IntegrationTest class that we
saw earlier being inherited in

223
00:09:26,035 --> 00:09:28,470
our test, and we're now
going to include the

224
00:09:28,470 --> 00:09:31,080
Capybara DSL module.

225
00:09:31,080 --> 00:09:34,040
We're also going to define a
teardown at this level that

226
00:09:34,040 --> 00:09:37,560
instructs Capybara to reset its
sessions because, again,

227
00:09:37,560 --> 00:09:40,395
it acts like a web browser, so
it actually has a session, it

228
00:09:40,395 --> 00:09:42,510
has cookies, it has a history.

229
00:09:42,510 --> 00:09:45,750
And then we're also going to
tell Capybara to use the

230
00:09:45,750 --> 00:09:46,760
default driver.

231
00:09:46,760 --> 00:09:48,880
We're not going to touch much
on drivers, but what they

232
00:09:48,880 --> 00:09:53,310
allow you to do is things like
exercise end user JavaScript,

233
00:09:53,310 --> 00:09:55,540
access third party websites,
et cetera.

234
00:09:55,540 --> 00:09:57,850
There's multiple drivers out
there, but for the purposes of

235
00:09:57,850 --> 00:09:59,965
this course, the default is
perfectly acceptable.

236
00:09:59,965 --> 00:10:02,920


237
00:10:02,920 --> 00:10:05,240
So we touched a little bit on
some of the methods that

238
00:10:05,240 --> 00:10:08,450
Capybara provides to allow us
to act like an end user and

239
00:10:08,450 --> 00:10:09,520
their web browser.

240
00:10:09,520 --> 00:10:11,140
Let's look into a little
bit more detail at

241
00:10:11,140 --> 00:10:12,380
what they might be.

242
00:10:12,380 --> 00:10:14,230
You can see here we
get click_link,

243
00:10:14,230 --> 00:10:16,230
click_button, or click_on.

244
00:10:16,230 --> 00:10:19,490
So click_link looks for an
anchor tag with an href,

245
00:10:19,490 --> 00:10:22,020
click_button looks for a button
element, or click_on

246
00:10:22,020 --> 00:10:23,410
looks for either of the two.

247
00:10:23,410 --> 00:10:26,760
In all cases, you can provide
a parameter to the methods

248
00:10:26,760 --> 00:10:29,620
that have either text, which is
the text the end user would

249
00:10:29,620 --> 00:10:33,550
see on the page, or
the element's ID.

250
00:10:33,550 --> 00:10:37,060
Next, Capybara gives us a bunch
of form interaction

251
00:10:37,060 --> 00:10:41,950
methods, such as fill_in element
with value, choose a

252
00:10:41,950 --> 00:10:46,440
radio button, check a check
box, uncheck a check box,

253
00:10:46,440 --> 00:10:50,050
attach a file, or select a
particular element from an

254
00:10:50,050 --> 00:10:51,310
option group.

255
00:10:51,310 --> 00:10:54,600
These fields can be looked up
from their form label, from

256
00:10:54,600 --> 00:10:57,610
their element name, or
from the element ID.

257
00:10:57,610 --> 00:11:00,990
And finally, Capybara gives us a
couple of helper methods, if

258
00:11:00,990 --> 00:11:04,140
you will, called current_path
and current_url.

259
00:11:04,140 --> 00:11:06,180
Because Capybara acts like
a web browser, it's

260
00:11:06,180 --> 00:11:08,770
automatically following
redirects so sometimes it's

261
00:11:08,770 --> 00:11:11,260
nice to know exactly where we
are because it might not be

262
00:11:11,260 --> 00:11:12,510
the last place that
we requested.

263
00:11:12,510 --> 00:11:14,960


264
00:11:14,960 --> 00:11:17,490
Let's look at the integration
test that we wrote earlier and

265
00:11:17,490 --> 00:11:20,040
see how we might write
it using Capybara.

266
00:11:20,040 --> 00:11:22,100
So in this case we've got
anyone can view zombie

267
00:11:22,100 --> 00:11:23,990
information, we're
still loading our

268
00:11:23,990 --> 00:11:26,010
zombie from the fixtures.

269
00:11:26,010 --> 00:11:29,150
In this case, we are now going
to visit instead of get the

270
00:11:29,150 --> 00:11:30,870
zombie URL.

271
00:11:30,870 --> 00:11:32,770
We're going to assert on that
we're on the page that we

272
00:11:32,770 --> 00:11:35,800
expect to be on, and we can use
another Capybara method

273
00:11:35,800 --> 00:11:39,210
called within to say within h1,
which will isolate where

274
00:11:39,210 --> 00:11:42,510
it looks on the page to say that
within that h1, we want

275
00:11:42,510 --> 00:11:45,080
to make sure the zombie's name
is present using the

276
00:11:45,080 --> 00:11:46,890
has_content method.

277
00:11:46,890 --> 00:11:48,730
So what is this has_content
method?

278
00:11:48,730 --> 00:11:51,610
Well, just like everything else,
has_content is a method

279
00:11:51,610 --> 00:11:55,150
provided by Capybara to help
us with our testing.

280
00:11:55,150 --> 00:11:57,970
In this case, has_content takes
a parameter which is

281
00:11:57,970 --> 00:11:59,810
text that we're trying
to check to

282
00:11:59,810 --> 00:12:01,170
make sure is on the page.

283
00:12:01,170 --> 00:12:03,680
It's going to return true or
false, and it's going to make

284
00:12:03,680 --> 00:12:06,240
sure that it's visible text
on the page, as well.

285
00:12:06,240 --> 00:12:10,250
Along with has_content, there's
has_no_content.

286
00:12:10,250 --> 00:12:13,350
And since this is such a widely
scoped thing to say,

287
00:12:13,350 --> 00:12:16,360
like Ash should be somewhere
on the page, a lot of times

288
00:12:16,360 --> 00:12:18,810
it's nice to be able to
constrain that using the

289
00:12:18,810 --> 00:12:20,880
within call.

290
00:12:20,880 --> 00:12:23,690
Along with has_content, Capybara
provides us with

291
00:12:23,690 --> 00:12:25,180
has_selector.

292
00:12:25,180 --> 00:12:28,205
In this case, rather than giving
it text we can give it

293
00:12:28,205 --> 00:12:30,780
a CSS selector and it can
find an element on the

294
00:12:30,780 --> 00:12:32,090
page by that selector.

295
00:12:32,090 --> 00:12:36,120
So here we have the ID of
zombie_1 with an h1.

296
00:12:36,120 --> 00:12:38,520
It also has_no_selector.

297
00:12:38,520 --> 00:12:41,920
And you can use has_selector
with optional parameters like

298
00:12:41,920 --> 00:12:46,170
text to say it should have a
zombie_1 element that has an

299
00:12:46,170 --> 00:12:49,070
h1 and that h1 should
have the text Ash.

300
00:12:49,070 --> 00:12:52,750
Or, you could say this page
has zombie class elements.

301
00:12:52,750 --> 00:12:54,780
There should be five of them
on the page and all five

302
00:12:54,780 --> 00:12:56,030
should be visible.

303
00:12:56,030 --> 00:12:58,430


304
00:12:58,430 --> 00:13:01,170
Along with has_content and
has_selector, we get something

305
00:13:01,170 --> 00:13:05,230
like has_link, has_field, where
we check for a hyperlink

306
00:13:05,230 --> 00:13:07,180
and we check for a form field.

307
00:13:07,180 --> 00:13:09,000
We also have even lower
level things

308
00:13:09,000 --> 00:13:11,900
like has_css or has_xpath.

309
00:13:11,900 --> 00:13:14,250
If that's what you need, it's
also there for you.

310
00:13:14,250 --> 00:13:17,720


311
00:13:17,720 --> 00:13:20,380
So getting back to our tests
with Capybara, we should talk

312
00:13:20,380 --> 00:13:23,460
about how Capybara tries to
enforce testing behavior.

313
00:13:23,460 --> 00:13:26,030
Because we're acting like the
end user, we want to test as

314
00:13:26,030 --> 00:13:28,370
if we were the end
user, right?

315
00:13:28,370 --> 00:13:31,070
So getting back to our earlier
test, we might load a zombie

316
00:13:31,070 --> 00:13:34,010
from the fixture file, load a
tweet for that zombie from the

317
00:13:34,010 --> 00:13:35,660
texture file, and browse
to the home

318
00:13:35,660 --> 00:13:39,140
page using visit root_url.

319
00:13:39,140 --> 00:13:43,420
We could say, well, within a
element with the ID of tweet

320
00:13:43,420 --> 00:13:46,360
one, for example, we want to
make sure that there's a link

321
00:13:46,360 --> 00:13:48,110
with the zombie's name on it.

322
00:13:48,110 --> 00:13:50,370
And when we click on that link,
we want to make sure

323
00:13:50,370 --> 00:13:52,620
that we end up on the
zombie's page.

324
00:13:52,620 --> 00:13:55,610
So rather than looking for
elements and text on the page

325
00:13:55,610 --> 00:13:58,840
that says I should have an href
that does this, we're now

326
00:13:58,840 --> 00:14:03,510
saying this is what we did
and this is where we are.

327
00:14:03,510 --> 00:14:07,220
Finally, let's write a more
interesting test and maybe

328
00:14:07,220 --> 00:14:09,570
test something like
a sign up form.

329
00:14:09,570 --> 00:14:12,200
So here, we'll make a
test called should

330
00:14:12,200 --> 00:14:13,640
create a new zombie.

331
00:14:13,640 --> 00:14:16,010
We're going to visit the
root_url, we're going to click

332
00:14:16,010 --> 00:14:18,130
on the link to sign up.

333
00:14:18,130 --> 00:14:20,310
On that page, maybe
there's a form.

334
00:14:20,310 --> 00:14:23,415
We're going to say, fill in Name
with Brains, we're going

335
00:14:23,415 --> 00:14:26,910
to say fill in Graveyard with
Brains, we're going to click

336
00:14:26,910 --> 00:14:29,990
the sign up button, and we're
going to now assert that we

337
00:14:29,990 --> 00:14:33,040
are on the zombie's page.

338
00:14:33,040 --> 00:14:36,050
So the idea is if it created the
zombie and redirected us

339
00:14:36,050 --> 00:14:38,960
to the page, it must've
been successful.

340
00:14:38,960 --> 00:14:41,510
Now for integration tests,
you'll find that signing up or

341
00:14:41,510 --> 00:14:44,540
signing in are something that
probably happens a lot.

342
00:14:44,540 --> 00:14:46,630
Just like in the first group of
unit test levels where we

343
00:14:46,630 --> 00:14:48,770
talk about refactoring your
code and refactoring your

344
00:14:48,770 --> 00:14:51,150
tests, since this is something
that's going to be used a lot,

345
00:14:51,150 --> 00:14:53,810
we might want to extract some of
that activity into a helper

346
00:14:53,810 --> 00:14:56,120
method such as sign_up_as.

347
00:14:56,120 --> 00:14:58,440
And what that will do is allow
us to rewrite our test once

348
00:14:58,440 --> 00:15:02,910
again to just say, visit the
root URL, sign_up_as Brains,

349
00:15:02,910 --> 00:15:06,800
assert that I have content,
welcome, Brains, in this case.

350
00:15:06,800 --> 00:15:07,790
So that's it.

351
00:15:07,790 --> 00:15:09,920
I know it was a lot
of content.

352
00:15:09,920 --> 00:15:12,690
Capybara and integration tests
are a little bit of a change

353
00:15:12,690 --> 00:15:15,140
of thinking against what we've
been doing up to this point.

354
00:15:15,140 --> 00:15:17,390
Up ahead are some challenges for
you to see how much you've

355
00:15:17,390 --> 00:15:20,430
learned writing your tests,
testing your assertions, and

356
00:15:20,430 --> 00:15:21,630
seeing how well you do.

357
00:15:21,630 --> 00:15:24,420
Again, if you need to look back
at the video, go ahead

358
00:15:24,420 --> 00:15:25,480
and do that.

359
00:15:25,480 --> 00:15:26,730
Good luck.

360
00:15:26,730 --> 00:15:30,005
