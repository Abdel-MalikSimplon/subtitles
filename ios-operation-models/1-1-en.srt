1
00:00:00,170 --> 00:00:00,370
[SINGING]

2
00:00:00,370 --> 00:00:03,460
He's got your data in his pocket
and a gun in his hand.

3
00:00:03,460 --> 00:00:06,555
He's got his finger on the
trigger and a secret plan.

4
00:00:06,555 --> 00:00:10,340
He'll take mutable arrays and
put them in formation using

5
00:00:10,340 --> 00:00:12,380
your view controllers for
his world domination.

6
00:00:12,380 --> 00:00:16,340
He'll take your data into models
before it explodes.

7
00:00:16,340 --> 00:00:20,318
The only secret agent who
encodes and decodes.

8
00:00:20,318 --> 00:00:21,713
He's Mr. Higgie.

9
00:00:28,610 --> 00:00:28,900
Hi.

10
00:00:28,900 --> 00:00:31,830
I'm Jon Friskics, and this
is iOS Operation Models.

11
00:00:31,830 --> 00:00:33,780
In this course, we're going to
be learning how to create

12
00:00:33,780 --> 00:00:36,790
models and use them to represent
data inside of your

13
00:00:36,790 --> 00:00:38,240
application.

14
00:00:38,240 --> 00:00:41,700
Now where we left off in Try
iOS, we were building an app

15
00:00:41,700 --> 00:00:44,040
called InstaPhoto, and
InstaPhoto had a couple views.

16
00:00:44,040 --> 00:00:46,620
It had a
FeedTableViewController.

17
00:00:46,620 --> 00:00:49,530
It had a PhotoViewController
that you could activate by

18
00:00:49,530 --> 00:00:52,840
tapping on one of the cells in
the FeedTableViewController.

19
00:00:52,840 --> 00:00:56,150
It had a favorites table view
controller, and it had a

20
00:00:56,150 --> 00:00:57,930
ProfileViewController
that stored

21
00:00:57,930 --> 00:01:00,630
information about Mr. Higgie.

22
00:01:00,630 --> 00:01:04,069
We're going to be updating
InstaPhoto to use models.

23
00:01:04,069 --> 00:01:06,630
Now if we think about MVC and
what each of those pieces

24
00:01:06,630 --> 00:01:09,630
represent, we've got our views,
which are used to

25
00:01:09,630 --> 00:01:11,880
display data inside
the application.

26
00:01:11,880 --> 00:01:14,830
We've got controllers, which are
used to tell the views how

27
00:01:14,830 --> 00:01:16,350
to display data.

28
00:01:16,350 --> 00:01:18,945
And we really should have all of
our data in models so that

29
00:01:18,945 --> 00:01:22,020
our controllers can read data
from those models and display

30
00:01:22,020 --> 00:01:23,190
it in the views.

31
00:01:23,190 --> 00:01:25,580
And models really just make it
very easy to organize and

32
00:01:25,580 --> 00:01:29,800
store data inside
an application.

33
00:01:29,800 --> 00:01:32,730
So the current approach that
we're using in InstaPhoto is

34
00:01:32,730 --> 00:01:34,460
we have a
FeedTableViewController that

35
00:01:34,460 --> 00:01:38,060
contains a UI table view
with a list of photos.

36
00:01:38,060 --> 00:01:40,960
When one of the cells is tapped
in that UI table view,

37
00:01:40,960 --> 00:01:43,980
a photo view controller is
displayed on screen that gives

38
00:01:43,980 --> 00:01:46,290
a little bit more detail
about each photo.

39
00:01:46,290 --> 00:01:48,450
That's no good!

40
00:01:48,450 --> 00:01:49,480
Mr. Higgie's right.

41
00:01:49,480 --> 00:01:52,100
This is not the best approach
because we have a controller

42
00:01:52,100 --> 00:01:54,960
that's drawing views using data
that comes from inside a

43
00:01:54,960 --> 00:01:57,760
controller rather than
from inside a model.

44
00:01:57,760 --> 00:02:00,220
So if we want to update this
approach to use an MVC

45
00:02:00,220 --> 00:02:02,640
architecture, we're going
to still have a

46
00:02:02,640 --> 00:02:06,040
FeedTableViewController and
PhotoViewController, except

47
00:02:06,040 --> 00:02:08,660
the data inside of our
FeedTableViewController is

48
00:02:08,660 --> 00:02:10,880
going to come from a model.

49
00:02:10,880 --> 00:02:13,350
And the way this works is that
the FeedTableViewController,

50
00:02:13,350 --> 00:02:17,150
when it loads, requests a model
template, and then the

51
00:02:17,150 --> 00:02:20,770
model template is returned to
the FeedTableViewController

52
00:02:20,770 --> 00:02:22,309
with a set of data.

53
00:02:25,981 --> 00:02:27,231
Hooray!

54
00:02:29,850 --> 00:02:31,890
Now, creating a model
is really easy.

55
00:02:31,890 --> 00:02:35,205
All you need to do is go into
Xcode and choose New File,

56
00:02:35,205 --> 00:02:37,110
give that file a name,
and make it

57
00:02:37,110 --> 00:02:39,780
a subclass of NSObject.

58
00:02:39,780 --> 00:02:42,850
NSObject is the base parent
class of almost everything in

59
00:02:42,850 --> 00:02:46,570
Objective C.

60
00:02:46,570 --> 00:02:49,070
So this is the code that Xcode
will create for you whenever

61
00:02:49,070 --> 00:02:52,960
you create a new model that's
a subclass of NSObject.

62
00:02:52,960 --> 00:02:55,150
If we look at the classes that
we've already been using, like

63
00:02:55,150 --> 00:02:58,750
UITabBarController and
UINavigationController, if we

64
00:02:58,750 --> 00:03:02,040
follow the class hierarchy up to
the top, we would see that

65
00:03:02,040 --> 00:03:04,670
UITabBar and
UINavigationController are

66
00:03:04,670 --> 00:03:07,210
subclasses of UIViewController.

67
00:03:07,210 --> 00:03:10,110
UIViewController, in turn, is
a subclass of a class called

68
00:03:10,110 --> 00:03:14,940
UIResponder, and UIResponder
is a subclass of NSObject.

69
00:03:14,940 --> 00:03:16,290
So even when we look
at something like a

70
00:03:16,290 --> 00:03:19,480
UITabBarController, we can see
that ultimately it inherits

71
00:03:19,480 --> 00:03:22,766
from NSObject, just like
our model will.

72
00:03:27,290 --> 00:03:29,850
To help you understand how
models work, we're going to

73
00:03:29,850 --> 00:03:33,050
use an app that Mr. Higgie ends
up using every day called

74
00:03:33,050 --> 00:03:36,570
Planet Hig, and planet Hig has
a similar feature set to

75
00:03:36,570 --> 00:03:39,310
InstaPhoto, so we'll be able
to learn a lot from each.

76
00:03:39,310 --> 00:03:41,400
There's a
PlacesTableViewController that

77
00:03:41,400 --> 00:03:43,830
contains a list of places that
Higgie visits while he's on

78
00:03:43,830 --> 00:03:47,030
his international travels, and
then if you click on one of

79
00:03:47,030 --> 00:03:49,680
those cells, a
PlaceViewController gets

80
00:03:49,680 --> 00:03:53,190
loaded that has more detailed
information about that place.

81
00:03:53,190 --> 00:03:56,035
There's an InterestingPlace
sTableViewController that Mr.

82
00:03:56,035 --> 00:03:58,610
Higgie can mark places as
interesting that he wants to

83
00:03:58,610 --> 00:04:01,200
go visit later, and then there's
a CityViewControler

84
00:04:01,200 --> 00:04:03,160
that contains information
about the city that he's

85
00:04:03,160 --> 00:04:05,200
currently visiting.

86
00:04:05,200 --> 00:04:09,020
Straight to the top
of the app store!

87
00:04:09,020 --> 00:04:11,250
And if we were to analyze the
structure of that app, it

88
00:04:11,250 --> 00:04:12,650
would look something
like this.

89
00:04:12,650 --> 00:04:16,000
We have an AppDelegate that runs
when the app first loads,

90
00:04:16,000 --> 00:04:18,980
and that AppDelegate loads the
individual controllers,

91
00:04:18,980 --> 00:04:21,374
PlacesTableViewController,
InterestingPlace

92
00:04:21,374 --> 00:04:23,890
sTableViewController, and
CityViewController.

93
00:04:27,460 --> 00:04:29,810
This is the code that Xcode will
create for you whenever

94
00:04:29,810 --> 00:04:33,520
you create a new model that's
a subclass of NSObject.

95
00:04:33,520 --> 00:04:36,700
First we import the foundation
library, as most header

96
00:04:36,700 --> 00:04:38,260
classes do.

97
00:04:38,260 --> 00:04:41,060
Then you can see that the
@inaterface declares the model

98
00:04:41,060 --> 00:04:43,970
name and the subclass of
that model, and then

99
00:04:43,970 --> 00:04:46,130
the header file ends.

100
00:04:46,130 --> 00:04:49,740
And then the implementation
file imports place.h to

101
00:04:49,740 --> 00:04:52,460
connect the two and declares
that there's going to be an

102
00:04:52,460 --> 00:04:56,130
implementation of the place
object, and then the

103
00:04:56,130 --> 00:04:58,100
implementation ends.

104
00:04:58,100 --> 00:05:00,580
Even though Planet Hig contains
multiple places,

105
00:05:00,580 --> 00:05:02,480
you'll notice that we're
naming our model class

106
00:05:02,480 --> 00:05:04,530
singular not plural.

107
00:05:04,530 --> 00:05:07,960
This is a common convention
when naming models.

108
00:05:07,960 --> 00:05:11,840
Inside of our place.h file,
we're going to need to declare

109
00:05:11,840 --> 00:05:14,190
some properties, and these will
hold the data that gets

110
00:05:14,190 --> 00:05:15,960
stored inside the model.

111
00:05:15,960 --> 00:05:19,530
In Planet Hig, the place model
has two NSString properties,

112
00:05:19,530 --> 00:05:21,890
one for the name of the
place and one for a

113
00:05:21,890 --> 00:05:25,040
description of the place.

114
00:05:25,040 --> 00:05:28,200
In place.m, we're going to need
to create a method called

115
00:05:28,200 --> 00:05:31,620
init that's responsible for
instantiating and returning a

116
00:05:31,620 --> 00:05:33,970
copy of a place object.

117
00:05:33,970 --> 00:05:37,870
Init returns type ID, and inside
of init, we have to set

118
00:05:37,870 --> 00:05:41,530
self equal to super init.

119
00:05:41,530 --> 00:05:45,370
Now, self refers to the class
that we're currently in, which

120
00:05:45,370 --> 00:05:48,730
in this case is place, and super
refers to the parent

121
00:05:48,730 --> 00:05:52,930
class of self, which in
this case is NSObject.

122
00:05:52,930 --> 00:05:55,740
So really, what we're doing when
we write super init is

123
00:05:55,740 --> 00:06:00,580
we're saying go up to the super
of place, NSObject, and

124
00:06:00,580 --> 00:06:03,760
run the init method
in NSObject.

125
00:06:03,760 --> 00:06:06,180
That's going to return an
instantiated copy of our

126
00:06:06,180 --> 00:06:09,350
model, which we then set to
self, and then we'll return

127
00:06:09,350 --> 00:06:13,360
self, which is a copy of the
object we just created.

128
00:06:13,360 --> 00:06:15,540
Now that we've seen how a
place model object is

129
00:06:15,540 --> 00:06:18,580
initialized, we can initialize
one in a view controller to

130
00:06:18,580 --> 00:06:20,700
see how the properties work.

131
00:06:20,700 --> 00:06:24,280
First we'll send the place model
an alloc init message,

132
00:06:24,280 --> 00:06:27,370
which creates a local copy of
the object stored here in

133
00:06:27,370 --> 00:06:32,070
aPlace variable, and then
we'll set the name and

134
00:06:32,070 --> 00:06:35,670
description properties
of that place.

135
00:06:35,670 --> 00:06:38,690
And then if we NSLog that name
and description, we can see

136
00:06:38,690 --> 00:06:41,010
that it logs out to the console
and our model was

137
00:06:41,010 --> 00:06:42,900
created correctly.

138
00:06:42,900 --> 00:06:45,420
So notice that there's two ways
that we can retrieve the

139
00:06:45,420 --> 00:06:47,630
data that's inside
of our object.

140
00:06:47,630 --> 00:06:50,220
The first way is by passing a
message, and the second way is

141
00:06:50,220 --> 00:06:53,340
just by accessing the property
through dot-notation.

142
00:06:53,340 --> 00:06:56,080
Dot-notation is a recent
addition to Objective C, so

143
00:06:56,080 --> 00:06:59,370
both approaches are
still valid.

144
00:06:59,370 --> 00:07:01,820
So now it's time for you to
start coding up your first

145
00:07:01,820 --> 00:07:03,220
models in the challenges.