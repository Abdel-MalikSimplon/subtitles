1
00:00:00,000 --> 00:00:00,499

2
00:00:00,499 --> 00:00:03,575
[SINGING] From the Labyrinth of
Loops to the Variable Valley,

3
00:00:03,575 --> 00:00:05,630
we'll see the Cliffs
of Value first.

4
00:00:05,630 --> 00:00:07,070
JavaScript's right
up your alley.

5
00:00:07,070 --> 00:00:10,500
Built-ins Bluff, Files
Falls, Array Archipelago,

6
00:00:10,500 --> 00:00:12,310
declarations in a
desert, where you'll

7
00:00:12,310 --> 00:00:13,435
find out how far you'll go.

8
00:00:13,435 --> 00:00:15,085
Learn the program, take a ride.

9
00:00:15,085 --> 00:00:16,872
Buy a ticket, step inside.

10
00:00:16,872 --> 00:00:18,661
All aboard, you're
at the station

11
00:00:18,661 --> 00:00:20,070
to increase your education.

12
00:00:20,070 --> 00:00:22,510
Bon Voyage and skinny
dip, as long as functions

13
00:00:22,510 --> 00:00:27,502
you don't skip on this,
the JavaScript road trip.

14
00:00:27,502 --> 00:00:30,806

15
00:00:30,806 --> 00:00:33,976
Hey guys, hope you enjoyed all
of those function expressions.

16
00:00:33,976 --> 00:00:35,850
And now we're going to
move into a little bit

17
00:00:35,850 --> 00:00:37,719
more difficult territory.

18
00:00:37,719 --> 00:00:39,260
Every so often, when
we code, we want

19
00:00:39,260 --> 00:00:40,960
to take variables
from external scopes

20
00:00:40,960 --> 00:00:45,080
and bind them deep within
inner or more local scopes

21
00:00:45,080 --> 00:00:46,580
of other functions.

22
00:00:46,580 --> 00:00:48,820
In JavaScript, the tool
that we use to do that

23
00:00:48,820 --> 00:00:51,210
is called the closure.

24
00:00:51,210 --> 00:00:55,400
Now closures are often used in
building function factories.

25
00:00:55,400 --> 00:00:58,330
And sometimes they can
be very hard to follow

26
00:00:58,330 --> 00:01:02,050
or very hard to trace, even
hard to spot sometimes.

27
00:01:02,050 --> 00:01:03,640
But after you've
built a few of them,

28
00:01:03,640 --> 00:01:05,390
you'll see that
they aren't so bad.

29
00:01:05,390 --> 00:01:08,070
So if you're ready to
plow through the snow,

30
00:01:08,070 --> 00:01:12,660
head on down to the
Cold Closures Cove.

31
00:01:12,660 --> 00:01:13,620
Hey, everybody.

32
00:01:13,620 --> 00:01:15,970
Welcome to level two
of JavaScript Road Trip

33
00:01:15,970 --> 00:01:20,870
Three, the Cold Closures Cove.

34
00:01:20,870 --> 00:01:21,370
Guess what?

35
00:01:21,370 --> 00:01:24,740
Congratulations, you've
already made a basic closure.

36
00:01:24,740 --> 00:01:26,280
A closure is a package deal.

37
00:01:26,280 --> 00:01:27,710
Let's take a look
at one that was

38
00:01:27,710 --> 00:01:31,890
in a previous example we
showed in the last level.

39
00:01:31,890 --> 00:01:35,360
So in the Build Ticket function
that we had in the last level,

40
00:01:35,360 --> 00:01:39,440
you can see in our two
returned anonymous functions,

41
00:01:39,440 --> 00:01:42,320
several variables
like Pass and Pick

42
00:01:42,320 --> 00:01:45,510
and All Rides that
were not created

43
00:01:45,510 --> 00:01:47,990
within the function
that's being returned.

44
00:01:47,990 --> 00:01:49,270
That's very important.

45
00:01:49,270 --> 00:01:52,230
The entire their
contents of any of these

46
00:01:52,230 --> 00:01:57,180
returned functions will still be
available outside the function,

47
00:01:57,180 --> 00:02:00,640
outside Build Ticket
when they get returned.

48
00:02:00,640 --> 00:02:03,410
When we return a
function from a function,

49
00:02:03,410 --> 00:02:06,700
and it is complete with
variables that showed up

50
00:02:06,700 --> 00:02:09,530
in the external function,
we have a closure.

51
00:02:09,530 --> 00:02:12,460

52
00:02:12,460 --> 00:02:14,880
So to kind of illustrate
this a little bit better,

53
00:02:14,880 --> 00:02:17,760
let's look at very small
example of a closure.

54
00:02:17,760 --> 00:02:21,560
A closure will wrap up the
entire local environment,

55
00:02:21,560 --> 00:02:24,540
complete with all of the
necessary variables that

56
00:02:24,540 --> 00:02:27,370
came from an external scope.

57
00:02:27,370 --> 00:02:29,500
Here we have a function
called testClosure.

58
00:02:29,500 --> 00:02:31,450
And in it, I've just
established a variable

59
00:02:31,450 --> 00:02:34,440
called x and assigned
the value 4 to it.

60
00:02:34,440 --> 00:02:38,050
And then I'll return x from
this function, a very simple

61
00:02:38,050 --> 00:02:39,490
function.

62
00:02:39,490 --> 00:02:41,400
Now, that x variable
is only local.

63
00:02:41,400 --> 00:02:44,640
That means it can only
be accessed inside

64
00:02:44,640 --> 00:02:46,392
of the testClosure function.

65
00:02:46,392 --> 00:02:47,600
So let's take a look at that.

66
00:02:47,600 --> 00:02:50,910
If we were to call testClosure,
we'd get a nice return of 4,

67
00:02:50,910 --> 00:02:52,940
as you might expect,
because we returned x.

68
00:02:52,940 --> 00:02:57,090
But if I tried to
access the x variable

69
00:02:57,090 --> 00:02:59,910
from outside the function,
I would get an undefined.

70
00:02:59,910 --> 00:03:03,860
That's because x disappears
just as soon as the test closure

71
00:03:03,860 --> 00:03:06,180
function is wrapped up.

72
00:03:06,180 --> 00:03:08,600
In other words, a
function's local variables

73
00:03:08,600 --> 00:03:12,040
are just not available once
the function scope has finally

74
00:03:12,040 --> 00:03:12,540
closed.

75
00:03:12,540 --> 00:03:15,300

76
00:03:15,300 --> 00:03:17,760
Now let's make it just
slightly more complex.

77
00:03:17,760 --> 00:03:21,970
So now we'll establish
that same x variable as 4.

78
00:03:21,970 --> 00:03:23,790
And then we'll
build a new function

79
00:03:23,790 --> 00:03:25,820
inside of our
testClosure function.

80
00:03:25,820 --> 00:03:28,390
And we'll call that
function closeX.

81
00:03:28,390 --> 00:03:33,840
Now, inside of there, we
will return the x variable.

82
00:03:33,840 --> 00:03:36,710
And then outside, inside of
the testClosure function,

83
00:03:36,710 --> 00:03:40,860
we'll return the
closeX function.

84
00:03:40,860 --> 00:03:42,630
Now here, the
inner function will

85
00:03:42,630 --> 00:03:45,950
be able to access the
outer function's variables.

86
00:03:45,950 --> 00:03:46,460
Why?

87
00:03:46,460 --> 00:03:50,250
Because they feel like global
variables to that innermost

88
00:03:50,250 --> 00:03:51,350
function.

89
00:03:51,350 --> 00:03:56,090
So when I say, return x
inside of the closeX function,

90
00:03:56,090 --> 00:03:58,940
closeX kind of looks around
in its own local environment

91
00:03:58,940 --> 00:04:00,430
for an x, and it
doesn't see one.

92
00:04:00,430 --> 00:04:03,570
So it looks outside there,
to the global scope-- inside

93
00:04:03,570 --> 00:04:07,440
of test closure finds
that x and assigns

94
00:04:07,440 --> 00:04:10,769
the 4 to the x inside of
the innermost function.

95
00:04:10,769 --> 00:04:12,560
It's really important
to note that x is not

96
00:04:12,560 --> 00:04:17,110
stored anywhere inside of the
innermost function-- not even

97
00:04:17,110 --> 00:04:19,810
as a parameter.

98
00:04:19,810 --> 00:04:22,260
So now let's check out
calling our external function,

99
00:04:22,260 --> 00:04:23,440
testClosure.

100
00:04:23,440 --> 00:04:26,820
And if we do that and
we assign the results

101
00:04:26,820 --> 00:04:30,290
to a new variable,
checkLocalX, we

102
00:04:30,290 --> 00:04:34,730
know that the entire function,
closeX, the innermost function,

103
00:04:34,730 --> 00:04:38,555
gets returned and
assigned to checkLocalX.

104
00:04:38,555 --> 00:04:39,930
Now, let's check
out what happens

105
00:04:39,930 --> 00:04:41,910
when we call checkLocalX.

106
00:04:41,910 --> 00:04:43,710
We get 4.

107
00:04:43,710 --> 00:04:45,860
Woah, that is crazy.

108
00:04:45,860 --> 00:04:49,000
This is interesting, because
even though test closure has

109
00:04:49,000 --> 00:04:52,270
completely finished operating,
its scope is closed.

110
00:04:52,270 --> 00:04:55,510
We can still access
the local variable

111
00:04:55,510 --> 00:04:57,900
that was declared
in that function.

112
00:04:57,900 --> 00:04:58,660
Why is that?

113
00:04:58,660 --> 00:05:03,070
Because it has been bound as
a closure inside of closeX.

114
00:05:03,070 --> 00:05:06,540

115
00:05:06,540 --> 00:05:09,080
So how can we use
closures practically?

116
00:05:09,080 --> 00:05:11,200
Well, they're very
helpful in what

117
00:05:11,200 --> 00:05:14,330
we call function
construction zones.

118
00:05:14,330 --> 00:05:18,210
They make the creation
of very similar functions

119
00:05:18,210 --> 00:05:20,390
very efficient.

120
00:05:20,390 --> 00:05:21,900
So let's see how
this works if we

121
00:05:21,900 --> 00:05:24,140
were to try to make
some transportation

122
00:05:24,140 --> 00:05:27,040
modes for the Cold
Closures Cove.

123
00:05:27,040 --> 00:05:29,400
Let's say that we
had a submarine

124
00:05:29,400 --> 00:05:33,580
to get across the cove as
well as a battleship and then

125
00:05:33,580 --> 00:05:35,850
a giant seagull--
not only that, it

126
00:05:35,850 --> 00:05:40,170
is a pirate giant
seagull with blue feet.

127
00:05:40,170 --> 00:05:42,340
Since we have these
three different modes

128
00:05:42,340 --> 00:05:44,060
of transportation
across our cove,

129
00:05:44,060 --> 00:05:47,360
we can make a
buildCoveTicketMaker

130
00:05:47,360 --> 00:05:50,340
for our different
modes of transport.

131
00:05:50,340 --> 00:05:51,670
Here's our function.

132
00:05:51,670 --> 00:05:55,090
And inside that function, we
would return another function

133
00:05:55,090 --> 00:05:59,390
that uses a name and alerts,
"Here is your transportation

134
00:05:59,390 --> 00:06:03,570
ticket via the 'transport,'"
which will get closed up from

135
00:06:03,570 --> 00:06:05,110
the external function.

136
00:06:05,110 --> 00:06:07,530
"Welcome to the
Cold Closures Cove

137
00:06:07,530 --> 00:06:12,320
name," which will be involved
on a local level as a parameter.

138
00:06:12,320 --> 00:06:15,060
Now our builtCoveTicketMaker
function

139
00:06:15,060 --> 00:06:19,140
will make a ticket maker
for every single mode

140
00:06:19,140 --> 00:06:20,260
of transportation.

141
00:06:20,260 --> 00:06:24,170
They'll be similar functions
but just slightly different.

142
00:06:24,170 --> 00:06:27,100
So if we wanted to make ticket
makers for the submarine,

143
00:06:27,100 --> 00:06:29,640
the battleship, and
the giant seagull,

144
00:06:29,640 --> 00:06:31,690
we would establish
three variables

145
00:06:31,690 --> 00:06:35,260
called getSubmarineTicket,
getBattleshipTicket,

146
00:06:35,260 --> 00:06:37,380
and getGiantSeagullTicket.

147
00:06:37,380 --> 00:06:40,270
And we would call
buildCoveTicketMaker

148
00:06:40,270 --> 00:06:42,470
for all of those variables.

149
00:06:42,470 --> 00:06:46,160

150
00:06:46,160 --> 00:06:49,650
So now that all of our variables
have ticket makers inside them,

151
00:06:49,650 --> 00:06:52,970
we can call getSubmarineTicket,
getBattleshipTicket,

152
00:06:52,970 --> 00:06:55,970
and getGiantSeagull
ticket to see

153
00:06:55,970 --> 00:06:57,900
what's inside those variables.

154
00:06:57,900 --> 00:07:00,980
Well, look at where, they
have exactly the same function

155
00:07:00,980 --> 00:07:03,010
inside each variable.

156
00:07:03,010 --> 00:07:06,420
But that's very deceptive,
because bound variables

157
00:07:06,420 --> 00:07:08,680
and their values
will not be evident

158
00:07:08,680 --> 00:07:11,160
inside of a stored function.

159
00:07:11,160 --> 00:07:14,130
In other words, examining
the function's contents

160
00:07:14,130 --> 00:07:17,040
will not show you a
closure that has occurred.

161
00:07:17,040 --> 00:07:18,830
In our getSubmarineTicket
variable,

162
00:07:18,830 --> 00:07:21,200
transport actually
holds submarine.

163
00:07:21,200 --> 00:07:22,830
And of course, in
getBattleshipTicket,

164
00:07:22,830 --> 00:07:24,400
transport is battleship.

165
00:07:24,400 --> 00:07:30,250
And in getGiantSeagullTicket,
transport is giant seagull.

166
00:07:30,250 --> 00:07:32,580
Until we've actually called
any of these variables that

167
00:07:32,580 --> 00:07:35,600
have functions in
them, the name variable

168
00:07:35,600 --> 00:07:38,810
that is inside those
functions will stay undefined.

169
00:07:38,810 --> 00:07:40,230
So let's change that.

170
00:07:40,230 --> 00:07:44,260
Let's actually call
our ticket makers.

171
00:07:44,260 --> 00:07:46,480
Now let's show how that works.

172
00:07:46,480 --> 00:07:49,620
So we'll scoot our semicolons
out of the way here.

173
00:07:49,620 --> 00:07:54,320
And we'll pass in some names,
Mario, Luigi, and Bowser,

174
00:07:54,320 --> 00:07:57,150
to our different ticket makers.

175
00:07:57,150 --> 00:07:58,360
What happens now?

176
00:07:58,360 --> 00:08:00,810
Well, Mario gets a
ticket to the submarine,

177
00:08:00,810 --> 00:08:02,990
and Luigi gets a ticket
to the battleship,

178
00:08:02,990 --> 00:08:05,500
and Browser is forced to
take the giant seagull.

179
00:08:05,500 --> 00:08:10,610

180
00:08:10,610 --> 00:08:12,610
So now that you have a
little bit of information

181
00:08:12,610 --> 00:08:14,452
to be dangerous
with some closures,

182
00:08:14,452 --> 00:08:16,410
we'll give you some
challenges and see you back

183
00:08:16,410 --> 00:08:18,420
in the next section.

184
00:08:18,420 --> 00:08:20,250