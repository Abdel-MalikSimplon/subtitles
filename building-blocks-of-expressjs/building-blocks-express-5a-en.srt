1
00:00:00,170 --> 00:00:02,460
[SINGING] So you want to
build a web app with Node,

2
00:00:02,460 --> 00:00:05,080
but you're not sure where
to put all the code?

3
00:00:05,080 --> 00:00:07,540
Express is what you need,
the framework to succeed,

4
00:00:07,540 --> 00:00:10,000
to parse those
requests at high speed.

5
00:00:10,000 --> 00:00:12,250
Route your GET, POST,
PUT, and DELETE.

6
00:00:12,250 --> 00:00:14,600
Add request and
response to complete.

7
00:00:14,600 --> 00:00:17,270
Middleware will help
finesse modules clean up

8
00:00:17,270 --> 00:00:20,450
the mess in the Building
Blocks of Express.

9
00:00:27,056 --> 00:00:29,840
So we've added all the
basic functionality

10
00:00:29,840 --> 00:00:31,530
that our app needs to work.

11
00:00:31,530 --> 00:00:35,130
But in the process, we've
let some code smells arise.

12
00:00:35,130 --> 00:00:38,810
Now, it's time we learned some
refactoring techniques, which

13
00:00:38,810 --> 00:00:41,840
can help us remove
some code duplication

14
00:00:41,840 --> 00:00:46,310
and make our code a lot
easier to work with.

15
00:00:46,310 --> 00:00:48,820
Looking at our
app.js file, notice

16
00:00:48,820 --> 00:00:51,570
that all routes seem
to be handling operations

17
00:00:51,570 --> 00:00:54,350
on URLs that look very similar.

18
00:00:54,350 --> 00:00:56,730
Some of them look
exactly the same.

19
00:00:56,730 --> 00:01:00,560
The first and third routes both
handle the /blocks path,

20
00:01:00,560 --> 00:01:04,110
but for different HTTP
verbs: GET and POST.

21
00:01:04,110 --> 00:01:07,350
And the same goes for the
second and fourth routes,

22
00:01:07,350 --> 00:01:12,700
both handling /blocks/:name,
but one for GET requests

23
00:01:12,700 --> 00:01:15,400
and the other one
for DELETE requests.

24
00:01:15,400 --> 00:01:17,280
It would be nice
if we could avoid

25
00:01:17,280 --> 00:01:19,960
having to repeat all
these route names.

26
00:01:19,960 --> 00:01:22,860
Let's see how we can do that.

27
00:01:22,860 --> 00:01:25,470
To avoid this repetition,
we'll use something

28
00:01:25,470 --> 00:01:27,530
called route instance.

29
00:01:27,530 --> 00:01:31,590
We create route instances
with an app.route function.

30
00:01:31,590 --> 00:01:34,340
This function takes the
path as the argument

31
00:01:34,340 --> 00:01:37,160
and returns a route
object that handles

32
00:01:37,160 --> 00:01:40,555
all requests to the given
path — in this case, blocks.

33
00:01:43,980 --> 00:01:47,770
On this route object, we call
our functions GET and POST.

34
00:01:47,770 --> 00:01:50,780
Only this time, no path
argument is needed.

35
00:01:50,780 --> 00:01:54,320
Because a route object was
created for a specific route,

36
00:01:54,320 --> 00:01:56,870
we avoid having to repeat
the paths like we were

37
00:01:56,870 --> 00:01:58,040
doing before.

38
00:01:58,040 --> 00:02:01,610
This used to be
app.get slash blocks.

39
00:02:01,610 --> 00:02:06,730
And this one used to be
app.post slash blocks.

40
00:02:06,730 --> 00:02:08,910
We can make this
code even shorter

41
00:02:08,910 --> 00:02:11,730
by getting rid of the
blocksRoute variable.

42
00:02:11,730 --> 00:02:14,150
BlocksRoute is only an
intermediate variable,

43
00:02:14,150 --> 00:02:18,890
and it's not being used anywhere
else in our application.

44
00:02:18,890 --> 00:02:22,730
To do this, we'll use something
called chain functions.

45
00:02:22,730 --> 00:02:24,830
You'll notice that we
removed the semicolon

46
00:02:24,830 --> 00:02:28,060
from the end of the line where
a route object was created.

47
00:02:28,060 --> 00:02:31,420
This means the statement
continues on the next line.

48
00:02:31,420 --> 00:02:34,320
Then, we started the
next line with a dot,

49
00:02:34,320 --> 00:02:36,980
which indicates a function
call on the returned value

50
00:02:36,980 --> 00:02:40,500
from the previous line,
which is a route object.

51
00:02:40,500 --> 00:02:43,590
The route GET and
POST functions all

52
00:02:43,590 --> 00:02:47,250
return a route instance, which
allows us to chain our function

53
00:02:47,250 --> 00:02:48,520
calls like this.

54
00:02:48,520 --> 00:02:52,400
Chaining function calls means
calling functions on the return

55
00:02:52,400 --> 00:02:54,730
value of previous functions.

56
00:02:54,730 --> 00:02:59,110
And this is a pattern commonly
found in Express applications.

57
00:02:59,110 --> 00:03:01,510
Moving on to our
next route, this one

58
00:03:01,510 --> 00:03:05,160
is a dynamic route, which takes
the block name as an argument.

59
00:03:05,160 --> 00:03:07,380
As you can see, the
add.route function

60
00:03:07,380 --> 00:03:10,630
accepts the same URL
argument format as before,

61
00:03:10,630 --> 00:03:14,490
and this returns a route object.

62
00:03:14,490 --> 00:03:17,010
Now, we can chain
functions, adding our routes

63
00:03:17,010 --> 00:03:21,310
for GET and DELETE, again
without having to repeat

64
00:03:21,310 --> 00:03:24,720
the path for each one.

65
00:03:24,720 --> 00:03:26,150
This is the end of this section.

66
00:03:26,150 --> 00:03:29,690
Now it's your turn to take a
stab at it in the challenges.

