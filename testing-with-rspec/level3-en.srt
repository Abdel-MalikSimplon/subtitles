1
00:00:00,000 --> 00:00:28,800
[MUSIC PLAYING]

2
00:00:28,800 --> 00:00:31,170
You're watching testing
for RSpec Level Three.

3
00:00:31,170 --> 00:00:32,710
And in this level we're
going to look at

4
00:00:32,710 --> 00:00:35,280
organizing your examples.

5
00:00:35,280 --> 00:00:37,930
And lots of shortcuts you can
take to write even more

6
00:00:37,930 --> 00:00:41,050
readable RSpec code.

7
00:00:41,050 --> 00:00:44,660
Let's take a look at a new spec
where we want our zombie

8
00:00:44,660 --> 00:00:46,780
to respond to name.

9
00:00:46,780 --> 00:00:48,850
We get an instance
of a zombie.

10
00:00:48,850 --> 00:00:51,130
And we check in our expectation
that it should

11
00:00:51,130 --> 00:00:53,390
respond to name.

12
00:00:53,390 --> 00:00:56,460
As you may remember, the
response to matcher checks to

13
00:00:56,460 --> 00:01:02,690
see if there's a name method
on that zombie instance.

14
00:01:02,690 --> 00:01:04,430
Let's try to simplify
this code.

15
00:01:04,430 --> 00:01:07,300
Another way we could write
this is simply by writing

16
00:01:07,300 --> 00:01:09,950
subject should respond
to name.

17
00:01:09,950 --> 00:01:13,020
Well, where did that subject
variable come from?

18
00:01:13,020 --> 00:01:16,760
Well, if you have a class
name in your describe--

19
00:01:16,760 --> 00:01:18,600
if we say describe zombie--

20
00:01:18,600 --> 00:01:23,040
when you refer to subject,
by default it's going to

21
00:01:23,040 --> 00:01:25,950
instantiate that zombie.

22
00:01:25,950 --> 00:01:27,810
And then it's going to
check to see if it

23
00:01:27,810 --> 00:01:29,220
should respond to name.

24
00:01:29,220 --> 00:01:33,000
So every time you run subject
inside an example, it's going

25
00:01:33,000 --> 00:01:34,670
to instantiate a zombie.

26
00:01:34,670 --> 00:01:37,270
It should be worth mentioning
here that this only is going

27
00:01:37,270 --> 00:01:43,720
to work if your describe block
has a class in it.

28
00:01:43,720 --> 00:01:45,950
Let's move this up to the top.

29
00:01:45,950 --> 00:01:49,370
And I'm going to show you one
more way we can refactor this.

30
00:01:49,370 --> 00:01:54,160
We can actually remove that
subject altogether because

31
00:01:54,160 --> 00:01:56,360
it's going to use
that by default.

32
00:01:56,360 --> 00:01:58,940
So if we just do should respond
to name, it's going to

33
00:01:58,940 --> 00:02:00,480
check and see if an
instance of zombie

34
00:02:00,480 --> 00:02:01,660
should respond to name.

35
00:02:01,660 --> 00:02:04,690
We don't even have to
mention the subject.

36
00:02:04,690 --> 00:02:07,790
Up until now, all of our
examples have been using the

37
00:02:07,790 --> 00:02:10,080
do and the end block syntax.

38
00:02:10,080 --> 00:02:12,400
But we can also use
curly braces.

39
00:02:12,400 --> 00:02:14,820
So here you see up at the top,
responds to name should

40
00:02:14,820 --> 00:02:15,990
respond to name.

41
00:02:15,990 --> 00:02:18,180
There's a little duplication
going on here.

42
00:02:18,180 --> 00:02:21,720
It seems like we're saying the
same thing twice, doesn't it?

43
00:02:21,720 --> 00:02:23,360
Well, we can simplify this.

44
00:02:23,360 --> 00:02:27,530
We can simply write it should
respond to name.

45
00:02:27,530 --> 00:02:31,310
And RSpec is smart enough so
that when we run this test,

46
00:02:31,310 --> 00:02:33,030
it's going to generate output
that is readable.

47
00:02:36,220 --> 00:02:38,810
Here's another valid test
using a shorter syntax.

48
00:02:38,810 --> 00:02:43,000
It subject name should
equal hash.

49
00:02:43,000 --> 00:02:45,750
Now if we're using the subject
like this and we're calling a

50
00:02:45,750 --> 00:02:49,320
method on the subject, we
can actually use its.

51
00:02:49,320 --> 00:02:51,380
So i-t-s.

52
00:02:51,380 --> 00:02:55,060
We can say its name, name being
a method we can call on

53
00:02:55,060 --> 00:02:58,350
that instance, should
equal Ash.

54
00:02:58,350 --> 00:03:00,680
And if we run this
test, it passes.

55
00:03:00,680 --> 00:03:03,760
And you can see it even
has a good output.

56
00:03:03,760 --> 00:03:05,840
Here's a few more examples
of using its.

57
00:03:05,840 --> 00:03:09,360
We can say its weapons should
include weapon.

58
00:03:09,360 --> 00:03:11,260
Weapon in this case
is an array.

59
00:03:11,260 --> 00:03:12,630
And we're checking
to see if weapon

60
00:03:12,630 --> 00:03:14,550
exists inside that array.

61
00:03:14,550 --> 00:03:18,080
We can also write its
brain should be nil.

62
00:03:18,080 --> 00:03:22,520
And its tweets.size
should equal 2.

63
00:03:22,520 --> 00:03:25,950
As you can see, we have
that in a string.

64
00:03:25,950 --> 00:03:28,720
And so as you can imagine, this
string is going to get

65
00:03:28,720 --> 00:03:33,980
evaluated and then the
result tested.

66
00:03:33,980 --> 00:03:35,650
Let's take a look at
another way we can

67
00:03:35,650 --> 00:03:37,280
organize our examples.

68
00:03:37,280 --> 00:03:39,180
So here's some code.

69
00:03:39,180 --> 00:03:41,820
You can notice there's some
duplication going on here.

70
00:03:41,820 --> 00:03:48,170
We have two examples that both
have a veggie preference.

71
00:03:48,170 --> 00:03:52,750
One way we could refactor this
duplication is by separating

72
00:03:52,750 --> 00:03:56,360
those examples with a veggie
preference into its own

73
00:03:56,360 --> 00:03:59,660
describe block like so.

74
00:03:59,660 --> 00:04:01,570
Now let's move this code up to
the top and see if there's

75
00:04:01,570 --> 00:04:04,470
another way we can remove
some duplication.

76
00:04:04,470 --> 00:04:06,110
You can see that each
of our examples

77
00:04:06,110 --> 00:04:08,410
ends with when hungry.

78
00:04:08,410 --> 00:04:12,390
So if we wanted to, we could
add another describe block.

79
00:04:12,390 --> 00:04:17,089
So we say describe zombie when
hungry it craves brains, and

80
00:04:17,089 --> 00:04:18,720
so on and so forth.

81
00:04:18,720 --> 00:04:20,160
Now let's move this
up to the top.

82
00:04:20,160 --> 00:04:22,400
And I'm going to give you
another way to write this.

83
00:04:22,400 --> 00:04:25,630
Instead of using describe and
nesting describe blocks, RSpec

84
00:04:25,630 --> 00:04:29,850
gives you another syntax for
describing different contexts

85
00:04:29,850 --> 00:04:33,880
for your examples using
the context keyword.

86
00:04:33,880 --> 00:04:35,140
So the same thing.

87
00:04:35,140 --> 00:04:39,670
We can write context, when
hungry do wants brains context

88
00:04:39,670 --> 00:04:41,710
with a vegetarian preference.

89
00:04:41,710 --> 00:04:44,240
And I think it's a little
more readable.

90
00:04:44,240 --> 00:04:47,020
Earlier in this level, you saw
how we could use subject and

91
00:04:47,020 --> 00:04:49,900
it would create an instance
of the class.

92
00:04:49,900 --> 00:04:53,070
Well, sometimes you're gonna
want to specify what that

93
00:04:53,070 --> 00:04:54,090
subject is.

94
00:04:54,090 --> 00:04:57,630
And we can do that in a
subject block like so.

95
00:04:57,630 --> 00:05:00,790
Since the context here is with
a veggie preference, we want

96
00:05:00,790 --> 00:05:04,000
our subject, in this case, to
be a vegetarian zombie.

97
00:05:04,000 --> 00:05:06,335
And our example tests that are
vegetarians zombie craves

98
00:05:06,335 --> 00:05:08,000
vegan brains.

99
00:05:08,000 --> 00:05:09,950
There's another way we can
write this test here.

100
00:05:09,950 --> 00:05:12,120
Remember we saw that
it syntax.

101
00:05:12,120 --> 00:05:17,830
So we can say its craving should
equal vegan brains.

102
00:05:17,830 --> 00:05:20,010
Sometimes when you're writing
your specs, you're gonna have

103
00:05:20,010 --> 00:05:23,050
examples that need different
objects.

104
00:05:23,050 --> 00:05:27,820
And you can only have one
subject per example.

105
00:05:27,820 --> 00:05:29,680
So how do you deal with
different objects?

106
00:05:29,680 --> 00:05:32,380
One way would be to use
the let keyword.

107
00:05:32,380 --> 00:05:36,170
So in our example I'm about to
show you, we have a vegetarian

108
00:05:36,170 --> 00:05:37,940
zombie and we also
have a weapon.

109
00:05:37,940 --> 00:05:39,920
And we want to test with
both of those.

110
00:05:39,920 --> 00:05:45,350
So here we're going to say let
axe be an instance of weapon

111
00:05:45,350 --> 00:05:47,210
with the following attributes.

112
00:05:47,210 --> 00:05:49,350
We can test that its weapons--

113
00:05:49,350 --> 00:05:51,130
its meaning these zombie's
weapons--

114
00:05:51,130 --> 00:05:54,180
should include axe.

115
00:05:54,180 --> 00:05:57,590
We can also test that it can
use its axe when we call

116
00:05:57,590 --> 00:06:01,660
subject.swing(axe) should
equal true.

117
00:06:01,660 --> 00:06:04,640
Only when we call that axe
variable does it go then and

118
00:06:04,640 --> 00:06:08,220
instantiate that weapon so we
can use it in our example.

119
00:06:08,220 --> 00:06:10,660
One thing you might notice from
this code is that we are

120
00:06:10,660 --> 00:06:13,230
using subject, subject,
subject.

121
00:06:13,230 --> 00:06:15,630
And we're specifying that we're
talking about a zombie.

122
00:06:15,630 --> 00:06:17,190
We know that we're talking
about a zombie.

123
00:06:17,190 --> 00:06:19,790
But that might not always be
obvious to maybe other

124
00:06:19,790 --> 00:06:21,210
developers looking
at our code.

125
00:06:21,210 --> 00:06:24,310
Or if we have a long test and
we're like 10 pages down and

126
00:06:24,310 --> 00:06:27,360
we see subject and we go, what
does subject refer to?

127
00:06:27,360 --> 00:06:29,320
Instead of declaring our zombie
instance inside the

128
00:06:29,320 --> 00:06:33,020
subject, we can declare
it inside let zombie.

129
00:06:33,020 --> 00:06:35,510
And then we can just set
the subject equal

130
00:06:35,510 --> 00:06:37,010
to that zombie instance.

131
00:06:37,010 --> 00:06:38,880
This is basically aliasing
subject to zombie.

132
00:06:38,880 --> 00:06:41,670
And then later on in our code we
don't use subject anymore.

133
00:06:41,670 --> 00:06:42,920
We can just use zombie.

134
00:06:46,590 --> 00:06:49,690
As we were recording this video,
we noticed that a newer

135
00:06:49,690 --> 00:06:52,690
version of RSpec is going to
have a slightly improved

136
00:06:52,690 --> 00:06:55,620
syntax for these three
lines of code.

137
00:06:55,620 --> 00:06:58,810
We can simplify this if we want
to simply by specifying

138
00:06:58,810 --> 00:07:02,390
subject zombie zombie,
just like that.

139
00:07:02,390 --> 00:07:04,300
And it's going to
set the subject.

140
00:07:04,300 --> 00:07:09,530
And it's also going to give
us a alias for zombie.

141
00:07:09,530 --> 00:07:11,870
Let's take a closer look at
what's going on under the hood

142
00:07:11,870 --> 00:07:14,940
of this let and subject
and its.

143
00:07:14,940 --> 00:07:18,235
So what happens is when it runs
its name should be nil.

144
00:07:18,235 --> 00:07:20,140
The example begins to run.

145
00:07:20,140 --> 00:07:22,280
It says, oh, I need to
know the subject.

146
00:07:22,280 --> 00:07:24,340
So it goes looking
for the subject.

147
00:07:24,340 --> 00:07:27,290
The subject says, oh, go
look for the zombie.

148
00:07:27,290 --> 00:07:31,310
Then we call let zombie, and
that instantiates the zombie,

149
00:07:31,310 --> 00:07:34,070
which then gets evaluated
in our example.

150
00:07:34,070 --> 00:07:36,380
This is an example of
lazy evaluation.

151
00:07:36,380 --> 00:07:39,730
It's not until we call zombie
that it actually gets

152
00:07:39,730 --> 00:07:43,460
instantiated through the subject
through the let.

153
00:07:43,460 --> 00:07:47,200
So if we had this bit of code
here, it creates a zombie,

154
00:07:47,200 --> 00:07:48,060
zombie count one.

155
00:07:48,060 --> 00:07:50,570
If we wanted to check to see
if the zombie was actually

156
00:07:50,570 --> 00:07:54,170
created in the database,
well, this wouldn't work.

157
00:07:54,170 --> 00:07:56,610
It wouldn't work because we're
not calling zombie.

158
00:07:56,610 --> 00:07:59,400
We're not creating an instance
of the zombie.

159
00:07:59,400 --> 00:08:02,110
If you did want to work around
for this, if for some reason

160
00:08:02,110 --> 00:08:04,420
you wanted to make sure the
zombie gets created every time

161
00:08:04,420 --> 00:08:07,430
that let gets called, you
could call let with an

162
00:08:07,430 --> 00:08:08,690
exclamation point.

163
00:08:08,690 --> 00:08:10,950
And that's going to instantiate
the zombie before

164
00:08:10,950 --> 00:08:13,701
every example, no matter what.

165
00:08:13,701 --> 00:08:16,150
Now before I let you go on the
challenges, we're going to

166
00:08:16,150 --> 00:08:18,470
refactor some RSpec
code together.

167
00:08:18,470 --> 00:08:19,790
So here's some bad RSpec code.

168
00:08:19,790 --> 00:08:20,420
Take a moment.

169
00:08:20,420 --> 00:08:22,950
See if you can figure out how
we might improve this.

170
00:08:28,650 --> 00:08:32,250
You'll notice first that we are
calling zombie create in

171
00:08:32,250 --> 00:08:33,549
every single example.

172
00:08:33,549 --> 00:08:37,360
So let's go ahead and refactor
that up to let zombie, zombie

173
00:08:37,360 --> 00:08:39,740
create, and subject zombie.

174
00:08:39,740 --> 00:08:41,929
The next test, it has no name.

175
00:08:41,929 --> 00:08:46,130
We can use the its syntax we saw
earlier to say its name it

176
00:08:46,130 --> 00:08:47,480
should be nil.

177
00:08:47,480 --> 00:08:49,950
For the second example,
we can say it

178
00:08:49,950 --> 00:08:52,680
should be craving brains.

179
00:08:52,680 --> 00:08:56,160
And for that last example,
instead of checking to see

180
00:08:56,160 --> 00:08:59,010
before that it's true and after
that it's false, we can

181
00:08:59,010 --> 00:09:01,720
use an expectation so that
when the zombie eats the

182
00:09:01,720 --> 00:09:05,700
brains that its hunger changes
from true to false.

183
00:09:09,170 --> 00:09:11,400
Whoa, that was a long level
and a lot of content.

184
00:09:11,400 --> 00:09:13,290
I know your brain must
be expanding.

185
00:09:13,290 --> 00:09:15,930
So it's time for you to get
into the challenges, and

186
00:09:15,930 --> 00:09:17,530
[? Olivier ?] will see
you in level four.

187
00:09:17,530 --> 00:09:19,080
[MUSIC PLAYING]