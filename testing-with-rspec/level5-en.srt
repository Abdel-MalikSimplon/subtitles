1
00:00:00,000 --> 00:00:27,600
[MUSIC]

2
00:00:27,600 --> 00:00:30,026
You're watching Testing With
RSpec, and this is level five

3
00:00:30,026 --> 00:00:32,189
where we're going to be going
over mocking and stubbing.

4
00:00:32,189 --> 00:00:35,760
And if you played it through
Rails Testing for Zombies,

5
00:00:35,760 --> 00:00:37,870
some of this code is gonna
look really familiar.

6
00:00:37,870 --> 00:00:40,430
We're going to go over the same
examples so it's really

7
00:00:40,430 --> 00:00:44,390
easy to understand how RSpec
does mocking and stubbing.

8
00:00:44,390 --> 00:00:46,510
So here we have a
zombie class.

9
00:00:46,510 --> 00:00:48,160
Zombie has 1 weapon.

10
00:00:48,160 --> 00:00:51,570
And we've got 1 method in there
called decapitate, which

11
00:00:51,570 --> 00:00:55,240
uses the weapon to slice off
the head and then sets the

12
00:00:55,240 --> 00:00:57,380
zombie status to dead again.

13
00:00:57,380 --> 00:00:59,130
We need to test this method.

14
00:00:59,130 --> 00:01:02,750
But we need to keep in mind as
we test it that we don't want

15
00:01:02,750 --> 00:01:05,980
that call to weapon that
calls the slice

16
00:01:05,980 --> 00:01:07,430
method to be executed.

17
00:01:07,430 --> 00:01:09,510
We don't want that
to be executed.

18
00:01:09,510 --> 00:01:11,380
So we need a stub or mock.

19
00:01:11,380 --> 00:01:13,440
Well, which one is which
and what do they mean?

20
00:01:13,440 --> 00:01:15,910
Well, first of all a stub is
for replacing a method with

21
00:01:15,910 --> 00:01:19,280
code that returns a
specified result.

22
00:01:19,280 --> 00:01:25,240
And a mock is just a stub with
an expectation attached to it.

23
00:01:25,240 --> 00:01:27,090
So back in this example
we need to stub

24
00:01:27,090 --> 00:01:28,940
out the slice method.

25
00:01:28,940 --> 00:01:31,110
To stub it out, all we
need to do is call

26
00:01:31,110 --> 00:01:33,750
zombie weapon stub slice.

27
00:01:33,750 --> 00:01:37,880
What this does is it goes into
the weapon instance and it

28
00:01:37,880 --> 00:01:39,090
stubs out--

29
00:01:39,090 --> 00:01:40,870
basically blanks out--

30
00:01:40,870 --> 00:01:42,070
that slice method.

31
00:01:42,070 --> 00:01:46,160
So it's just going to return
nil, as you see here.

32
00:01:46,160 --> 00:01:47,850
So that's how we
stub in RSpec.

33
00:01:47,850 --> 00:01:51,890
But let's bring that into the
context of our specification.

34
00:01:51,890 --> 00:01:54,300
So here you can see we
have describe zombie.

35
00:01:54,300 --> 00:01:57,210
We're going to let zombie equal
to a zombie create.

36
00:01:57,210 --> 00:01:58,640
We're going to set
the context of to

37
00:01:58,640 --> 00:02:00,900
method that we're testing.

38
00:02:00,900 --> 00:02:02,970
This is a pattern that you
might see when you start

39
00:02:02,970 --> 00:02:06,910
reading other people's RSpec
code, is they have a context

40
00:02:06,910 --> 00:02:10,270
for each function inside
of their class.

41
00:02:10,270 --> 00:02:12,840
So inside of our context, we're
going to make sure that

42
00:02:12,840 --> 00:02:14,300
it's set status to dead again.

43
00:02:14,300 --> 00:02:18,080
We stub out the slice method,
call decapitate, then we write

44
00:02:18,080 --> 00:02:22,220
an expectation that a status
should equal dead again.

45
00:02:22,220 --> 00:02:24,760
So we're testing that the status
gets set properly.

46
00:02:24,760 --> 00:02:28,820
But we also need to test the
slice function gets called.

47
00:02:28,820 --> 00:02:31,820
So that blank space in there
is where we're going

48
00:02:31,820 --> 00:02:33,070
to write our test.

49
00:02:33,070 --> 00:02:34,130
So we need a mock.

50
00:02:34,130 --> 00:02:37,750
And to create a mock in RSpec,
we simply write zombie weapon

51
00:02:37,750 --> 00:02:40,040
should receive slice.

52
00:02:40,040 --> 00:02:42,840
This is going to stub out
the slice method.

53
00:02:42,840 --> 00:02:46,430
Plus it's going to set an
expectation that that method

54
00:02:46,430 --> 00:02:50,010
is going to get called inside
of our example.

55
00:02:50,010 --> 00:02:51,640
Now we're going to move
our mock back into our

56
00:02:51,640 --> 00:02:53,190
expectation.

57
00:02:53,190 --> 00:02:57,370
And then we need to make sure we
call the decapitate method.

58
00:02:57,370 --> 00:02:59,740
Once we call the decapitate
method, it's going to try to

59
00:02:59,740 --> 00:03:00,830
call the slice.

60
00:03:00,830 --> 00:03:03,090
That expectation is gonna
get fulfilled.

61
00:03:03,090 --> 00:03:05,070
And our test is going to pass.

62
00:03:05,070 --> 00:03:06,450
If we didn't call
the decapitate

63
00:03:06,450 --> 00:03:07,940
method, it would fail.

64
00:03:07,940 --> 00:03:11,420
Because, well, slice isn't
getting called.

65
00:03:11,420 --> 00:03:13,810
Let's look at a couple more
complex examples.

66
00:03:13,810 --> 00:03:16,250
You can see here inside of our
zombie class we have a

67
00:03:16,250 --> 00:03:20,620
geolocate function which calls
out to our Zoogle web service

68
00:03:20,620 --> 00:03:24,280
to maybe get the lat and
long of our graveyard.

69
00:03:24,280 --> 00:03:26,270
We need to write a test to make
sure that when we call

70
00:03:26,270 --> 00:03:29,510
this method, that it calls out
to be graveyard locator.

71
00:03:29,510 --> 00:03:32,260
So here we're going to say
Zoogle should receive-- we're

72
00:03:32,260 --> 00:03:35,240
creating our mock for
graveyard locator.

73
00:03:35,240 --> 00:03:38,530
And we're also going to say
with zombie graveyard.

74
00:03:38,530 --> 00:03:40,730
This allows us to test not
only that the method gets

75
00:03:40,730 --> 00:03:43,640
called, but it gets called with
this specific parameter.

76
00:03:43,640 --> 00:03:45,860
Then we'll call the geolocate
function to fulfill the

77
00:03:45,860 --> 00:03:47,110
expectation.

78
00:03:47,110 --> 00:03:49,740

79
00:03:49,740 --> 00:03:52,090
Now that geolocate function
that you see up there, I'm

80
00:03:52,090 --> 00:03:53,360
tweaking it a little bit.

81
00:03:53,360 --> 00:03:55,960
This time I'm assuming that it's
returning a hash from our

82
00:03:55,960 --> 00:03:57,040
web service.

83
00:03:57,040 --> 00:03:59,640
And we're going to use that
hash to create a string.

84
00:03:59,640 --> 00:04:02,000
To make sure our test doesn't
error out, we need to make

85
00:04:02,000 --> 00:04:04,860
sure that our mock has
a return value.

86
00:04:04,860 --> 00:04:09,030
So to do that we do and return
and we specify the hash we

87
00:04:09,030 --> 00:04:10,000
want it to return.

88
00:04:10,000 --> 00:04:12,500
Then we call the geolocate
function.

89
00:04:12,500 --> 00:04:15,100
So we're already testing that
our geolocate function calls

90
00:04:15,100 --> 00:04:18,279
our graveyard locator, but now
that our method is two

91
00:04:18,279 --> 00:04:22,170
different lines, we also need to
test that the right string

92
00:04:22,170 --> 00:04:24,110
is constructed and returned.

93
00:04:24,110 --> 00:04:27,200
So here you can see instead of
doing a mock, we're going to

94
00:04:27,200 --> 00:04:30,220
stub out our graveyard
locator, specify the

95
00:04:30,220 --> 00:04:34,120
parameters we're sending in,
what is getting returned.

96
00:04:34,120 --> 00:04:36,610
And then we can test to make
sure that what gets returned

97
00:04:36,610 --> 00:04:40,780
from the geolocate function
is a string of 2 comma 3.

98
00:04:40,780 --> 00:04:42,550
One more time I'm going to
make that that geolocate

99
00:04:42,550 --> 00:04:44,100
function more complex.

100
00:04:44,100 --> 00:04:47,330
This time graveyard locator
is returning an object.

101
00:04:47,330 --> 00:04:50,950
The object has a latitude and
longitude, as you see here.

102
00:04:50,950 --> 00:04:53,115
So how would we test this?

103
00:04:53,115 --> 00:04:56,330
We've made it a little
bit more complex.

104
00:04:56,330 --> 00:04:58,840
In this case, we want
to create a stub.

105
00:04:58,840 --> 00:05:00,910
Some people call
these a double.

106
00:05:00,910 --> 00:05:03,520
To create the stub, we're
going to send in a hash.

107
00:05:03,520 --> 00:05:06,610
Those hash's keys are going to
become methods that we can

108
00:05:06,610 --> 00:05:08,290
call on that stub.

109
00:05:08,290 --> 00:05:11,630
So we can cal loc.latitude
and it will return 2.

110
00:05:11,630 --> 00:05:14,830
And loc.longitude and
it will return 3.

111
00:05:14,830 --> 00:05:18,060
We're then going to stub out the
graveyard locator and make

112
00:05:18,060 --> 00:05:22,590
it return that stub object
that we just created.

113
00:05:22,590 --> 00:05:24,870
And then we can check to make
sure that when we call

114
00:05:24,870 --> 00:05:29,890
geolocate with object, it
returns the string 2 comma 3.

115
00:05:29,890 --> 00:05:31,940
Now we're going to jump into
some new material, testing

116
00:05:31,940 --> 00:05:34,250
some Rails with Action Mailer.

117
00:05:34,250 --> 00:05:35,910
So here we have a
zombie mailer.

118
00:05:35,910 --> 00:05:37,480
You can see this is our
welcome email when our

119
00:05:37,480 --> 00:05:38,790
zombie signs up.

120
00:05:38,790 --> 00:05:41,920
We're going to set our from
address, our to address, and

121
00:05:41,920 --> 00:05:43,200
our subject.

122
00:05:43,200 --> 00:05:46,580
To test this, we're going to
create a zombie mailer spec

123
00:05:46,580 --> 00:05:48,960
inside of our mailers folder.

124
00:05:48,960 --> 00:05:50,760
We're going to describe
the zombie mailer.

125
00:05:50,760 --> 00:05:53,910
The context is going to be
that welcome function.

126
00:05:53,910 --> 00:05:55,970
We're going to create a zombie
for each of our examples.

127
00:05:55,970 --> 00:05:57,990
In this case, our subject,
though, is going to be a

128
00:05:57,990 --> 00:05:58,930
little different.

129
00:05:58,930 --> 00:06:01,900
What we're going to be testing
in each of our examples is

130
00:06:01,900 --> 00:06:05,440
what gets returned when we
call the welcome method.

131
00:06:05,440 --> 00:06:07,560
So that is what we're going
to call in our subject.

132
00:06:07,560 --> 00:06:09,400
Now we can check different
methods on the mailer that

133
00:06:09,400 --> 00:06:13,610
gets returned from the welcome
method to make sure that it's

134
00:06:13,610 --> 00:06:17,260
from method should include
admin@codeschool.

135
00:06:17,260 --> 00:06:20,380
It's to method should include
zombie.email.

136
00:06:20,380 --> 00:06:24,000
And its subject should
equal "Welcome Zombie."

137
00:06:24,000 --> 00:06:25,540
There's one thing that's
not very good about the

138
00:06:25,540 --> 00:06:26,810
specification.

139
00:06:26,810 --> 00:06:29,630
And that is, well, we're
creating an active record

140
00:06:29,630 --> 00:06:30,990
object every time.

141
00:06:30,990 --> 00:06:32,930
And there's really
no need for it.

142
00:06:32,930 --> 00:06:34,920
Instead of instantiating a
zombie, we want to create a

143
00:06:34,920 --> 00:06:36,420
fake object instead.

144
00:06:36,420 --> 00:06:38,610
So here we can create a stub.

145
00:06:38,610 --> 00:06:40,790
On that stub all we need
to do is be able to

146
00:06:40,790 --> 00:06:42,180
call the email method.

147
00:06:42,180 --> 00:06:45,990
So we send in like this and
get back an email address.

148
00:06:45,990 --> 00:06:48,870
Now we put that stub into our
code and it's going to run a

149
00:06:48,870 --> 00:06:51,380
little faster because we're
not creating active record

150
00:06:51,380 --> 00:06:53,290
object every time.

151
00:06:53,290 --> 00:06:55,820
Here are a few more examples
of options that you can use

152
00:06:55,820 --> 00:06:59,240
when you're mocking to determine
different behavior.

153
00:06:59,240 --> 00:07:03,530
For example, that a function
only gets called once or twice

154
00:07:03,530 --> 00:07:07,040
or exactly a certain number of
times or at least or at most a

155
00:07:07,040 --> 00:07:09,540
certain number of times or
any number of times.

156
00:07:09,540 --> 00:07:13,010
We can also specify multiple
parameters for a method or say

157
00:07:13,010 --> 00:07:16,370
that it can take anything
or any arguments or no

158
00:07:16,370 --> 00:07:18,400
arguments at all.

159
00:07:18,400 --> 00:07:20,780
Time to get mocking and stubbing
in the level five

160
00:07:20,780 --> 00:07:21,080
challenges.

161
00:07:21,080 --> 00:07:21,380
Good luck.

162
00:07:21,380 --> 00:07:23,008
[MUSIC]
