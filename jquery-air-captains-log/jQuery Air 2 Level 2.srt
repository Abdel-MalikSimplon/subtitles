1
00:00:00,410 --> 00:00:04,036
(SINGING) "While on jQuery Air
you'll arrive super quick.

2
00:00:04,036 --> 00:00:05,810
With our in-flight
service you'll

3
00:00:05,810 --> 00:00:07,290
learn code with a click.

4
00:00:07,290 --> 00:00:10,900
Yes, now all this and more
taught by Gregg Pollack.

5
00:00:10,900 --> 00:00:14,739
We hope you enjoy
your flight."

6
00:00:14,739 --> 00:00:16,488
I'm Gregg, and I'll be
your captain this

7
00:00:16,488 --> 00:00:18,320
evening on jQuery Air.

8
00:00:18,320 --> 00:00:21,180
Welcome to jQuery
Air 2, Level 2.

9
00:00:21,180 --> 00:00:23,930
In this level, we're going to
be talking all about AJAX,

10
00:00:23,930 --> 00:00:28,670
AJAX error handling, AJAX
callbacks, AJAX aborts, AJAX

11
00:00:28,670 --> 00:00:32,250
timeouts and also how to send
back and forth JSON, parse it

12
00:00:32,250 --> 00:00:34,550
out, send it, some JSONP.

13
00:00:34,550 --> 00:00:36,560
And then finally, we'll take
a look at a form and

14
00:00:36,560 --> 00:00:39,660
how to submit it.

15
00:00:39,660 --> 00:00:41,430
We're going to keep on
continuing with our example

16
00:00:41,430 --> 00:00:41,990
application--

17
00:00:41,990 --> 00:00:43,770
looks something like this--
where we click on the

18
00:00:43,770 --> 00:00:47,600
different tabs and it brings
up all the flights.

19
00:00:47,600 --> 00:00:50,440
And we skipped over the AJAX
part, so let's jump back to

20
00:00:50,440 --> 00:00:53,915
that and see with AJAX looks
like to fetch flights.

21
00:00:53,915 --> 00:00:57,130
Here you can see we're back in
the showFlights function.

22
00:00:57,130 --> 00:00:59,850
We need to write that
fetchFlights function.

23
00:00:59,850 --> 00:01:01,650
Well, really we're just going to
get rid of the fetchFlights

24
00:01:01,650 --> 00:01:03,960
function and write the
AJAX right in there.

25
00:01:03,960 --> 00:01:05,420
The path we're going to
call in the server

26
00:01:05,420 --> 00:01:07,000
is the flights path.

27
00:01:07,000 --> 00:01:09,230
We're going to send
it some data.

28
00:01:09,230 --> 00:01:11,580
This is just a little snippet
of JSON where I'm sending in

29
00:01:11,580 --> 00:01:13,790
the date and the activeDiv.

30
00:01:13,790 --> 00:01:16,560
The URL it's constructing looks
like this where we have

31
00:01:16,560 --> 00:01:18,940
flights, question mark,
and the date.

32
00:01:18,940 --> 00:01:21,630
That little escaped bit
is just the #.

33
00:01:21,630 --> 00:01:24,810
In this case, we're going to get
back HTML from our server.

34
00:01:24,810 --> 00:01:26,980
And if the AJAX request is
successful, we're going to

35
00:01:26,980 --> 00:01:30,450
take that HTML and simply
print it out into the

36
00:01:30,450 --> 00:01:33,360
activeDiv and show
the flights.

37
00:01:33,360 --> 00:01:35,490
There's one other thing we want
to do before we actually

38
00:01:35,490 --> 00:01:36,730
see this in action.

39
00:01:36,730 --> 00:01:39,890
You'll notice here that we're
showing the activeDiv before

40
00:01:39,890 --> 00:01:42,170
we do the AJAX call.

41
00:01:42,170 --> 00:01:43,130
That's not right.

42
00:01:43,130 --> 00:01:46,320
So we're going to take that
command, move it into the

43
00:01:46,320 --> 00:01:49,050
success function for
that command.

44
00:01:49,050 --> 00:01:52,020
Another way we can write this
AJAX command is by using the

45
00:01:52,020 --> 00:01:54,680
get function, as you see here.

46
00:01:54,680 --> 00:01:57,350
These two functions pretty
much do the same thing.

47
00:01:57,350 --> 00:02:00,580
On using the AJAX command
explicitly, though, gives us

48
00:02:00,580 --> 00:02:02,480
more configuration options.

49
00:02:02,480 --> 00:02:05,490
Whereas you can see here with
the get command, the third

50
00:02:05,490 --> 00:02:08,240
parameter we're sending
in is the success.

51
00:02:08,240 --> 00:02:11,220
If it's successful, it's going
to call this function.

52
00:02:11,220 --> 00:02:15,360
The last option we're going to
add is the cache option to our

53
00:02:15,360 --> 00:02:16,690
AJAX command.

54
00:02:16,690 --> 00:02:18,740
You see, there's some browsers
out there that improperly

55
00:02:18,740 --> 00:02:22,280
cache the HTML that you get back
from your AJAX request.

56
00:02:22,280 --> 00:02:26,240
So it's just a safe thing to
put cache false in there to

57
00:02:26,240 --> 00:02:29,940
ensure that the browser's not
improperly caching anything.

58
00:02:29,940 --> 00:02:32,890
Now we're AJAXified, and if
we look back inside of our

59
00:02:32,890 --> 00:02:35,620
browser we can see that,
hey, it works.

60
00:02:38,360 --> 00:02:39,050
Uh-oh.

61
00:02:39,050 --> 00:02:41,030
Something went wrong there.

62
00:02:41,030 --> 00:02:45,020
We clicked on the tab, and at
that point in the video I went

63
00:02:45,020 --> 00:02:47,350
and looked at the server, and
we hit a server error.

64
00:02:47,350 --> 00:02:48,260
Huh.

65
00:02:48,260 --> 00:02:51,250
Well, we probably should account
for that in our AJAX

66
00:02:51,250 --> 00:02:54,720
code somehow so that if the
server errors out our user

67
00:02:54,720 --> 00:02:56,980
isn't left staring
at a blank page.

68
00:02:56,980 --> 00:02:59,470
So let's see what
that looks like.

69
00:02:59,470 --> 00:03:01,230
Here in our AJAX code
we're going to

70
00:03:01,230 --> 00:03:03,580
add an error callback.

71
00:03:03,580 --> 00:03:06,240
It's going to show the
new error div which

72
00:03:06,240 --> 00:03:07,980
were about to create.

73
00:03:07,980 --> 00:03:11,800
And also we want to make it so
that before we actually send

74
00:03:11,800 --> 00:03:16,540
the AJAX request we hide that
error div, if it was shown.

75
00:03:16,540 --> 00:03:17,610
If it wasn't shown in the first

76
00:03:17,610 --> 00:03:18,350
place, it doesn't matter.

77
00:03:18,350 --> 00:03:20,140
We can still call hide on it.

78
00:03:20,140 --> 00:03:22,600
In our HTML at the div
level, we're going to

79
00:03:22,600 --> 00:03:25,170
add an error div.

80
00:03:25,170 --> 00:03:27,470
And you'll notice here on the
error div we've got that click

81
00:03:27,470 --> 00:03:30,070
here to try again link.

82
00:03:30,070 --> 00:03:32,890
So we're going to write some
JavaScript so that it goes

83
00:03:32,890 --> 00:03:35,400
ahead and tries to call
showFlights again when

84
00:03:35,400 --> 00:03:38,880
somebody clicks on that link.

85
00:03:38,880 --> 00:03:41,060
So here's what it looks like
with error handling.

86
00:03:41,060 --> 00:03:42,960
When you click on
the tabs and--

87
00:03:42,960 --> 00:03:43,330
Oh.

88
00:03:43,330 --> 00:03:44,080
We hit an error.

89
00:03:44,080 --> 00:03:46,130
And it says, whoops, unable
to pull flights.

90
00:03:46,130 --> 00:03:49,240
And we can click on
the link, and it

91
00:03:49,240 --> 00:03:50,530
brings back the flights.

92
00:03:50,530 --> 00:03:51,250
Yay.

93
00:03:51,250 --> 00:03:53,720
But what if we add some
latency here?

94
00:03:53,720 --> 00:03:57,000
What if we have some server lag
when we click on a tab?

95
00:03:57,000 --> 00:03:58,410
Oh.

96
00:03:58,410 --> 00:04:01,470
Our user is still stuck staring
at that blank screen

97
00:04:01,470 --> 00:04:03,070
until it comes back
from the server.

98
00:04:03,070 --> 00:04:06,190
So we probably want to add
some sort of loading div.

99
00:04:06,190 --> 00:04:08,380
Let's go back and do that.

100
00:04:08,380 --> 00:04:10,520
So here we have our error div.

101
00:04:10,520 --> 00:04:14,910
Below that we have a
loading div now.

102
00:04:14,910 --> 00:04:17,660
Back in our AJAX function, we're
going to add another

103
00:04:17,660 --> 00:04:22,140
command to show the loading
div on before send.

104
00:04:22,140 --> 00:04:25,670
And then, when the AJAX returns,
it's going to call

105
00:04:25,670 --> 00:04:28,060
the complete function that
always gets called when the

106
00:04:28,060 --> 00:04:30,400
AJAX function returns.

107
00:04:30,400 --> 00:04:33,480
And we're going to hide the
loading screen there.

108
00:04:33,480 --> 00:04:36,060
Just to review, that successful
callback gets

109
00:04:36,060 --> 00:04:38,750
called if it returns
successfully and error if it

110
00:04:38,750 --> 00:04:41,260
doesn't return successfully.

111
00:04:41,260 --> 00:04:43,570
So if we jump back into our
browser we can see we have

112
00:04:43,570 --> 00:04:46,490
this nice loading screen with
that little spinner there

113
00:04:46,490 --> 00:04:50,680
while we wait for the request
to return from the server.

114
00:04:50,680 --> 00:04:51,880
Nice.

115
00:04:51,880 --> 00:04:54,700
But we also introduced a bug.

116
00:04:54,700 --> 00:04:55,700
Check this out.

117
00:04:55,700 --> 00:05:01,000
If I click two different tabs,
the first one returns and the

118
00:05:01,000 --> 00:05:02,550
second one returns as well.

119
00:05:02,550 --> 00:05:02,910
Ah.

120
00:05:02,910 --> 00:05:04,610
We had two AJAX calls.

121
00:05:04,610 --> 00:05:06,720
They both got called, they both
returned, and they both

122
00:05:06,720 --> 00:05:08,270
loaded into that div.

123
00:05:08,270 --> 00:05:09,180
Ugh.

124
00:05:09,180 --> 00:05:10,100
That's not good.

125
00:05:10,100 --> 00:05:11,570
So we need to figure
out some way to

126
00:05:11,570 --> 00:05:12,600
keep that from happening.

127
00:05:12,600 --> 00:05:17,350
Maybe figure out some way to
abort the first AJAX request

128
00:05:17,350 --> 00:05:19,490
if a second one is called.

129
00:05:19,490 --> 00:05:22,490
The problem, again, is that this
showFlights function is

130
00:05:22,490 --> 00:05:27,500
getting called every time a
tab is clicked, which is

131
00:05:27,500 --> 00:05:28,900
triggering that AJAX call.

132
00:05:28,900 --> 00:05:30,380
So well, we need to fix this.

133
00:05:30,380 --> 00:05:32,390
To fix it, the first thing we're
going to do is add a

134
00:05:32,390 --> 00:05:34,650
fetchingFlights variable that's

135
00:05:34,650 --> 00:05:36,120
outside of our function.

136
00:05:36,120 --> 00:05:39,370
We can set that variable
equal to the AJAX call.

137
00:05:39,370 --> 00:05:42,720
Then when the AJAX function is
complete, we're going to unset

138
00:05:42,720 --> 00:05:44,120
that variable.

139
00:05:44,120 --> 00:05:47,830
Now if this method is called
twice, the second time it's

140
00:05:47,830 --> 00:05:50,040
called it's going to check
to see if we're

141
00:05:50,040 --> 00:05:51,740
fetching flights currently.

142
00:05:51,740 --> 00:05:54,800
Well, if we're still fetching
flights and the AJAX hasn't

143
00:05:54,800 --> 00:05:59,410
returned yet, then abort that
current AJAX request.

144
00:05:59,410 --> 00:06:01,570
Just cancel it.

145
00:06:01,570 --> 00:06:01,980
Cool.

146
00:06:01,980 --> 00:06:04,580
Let's see what that does
in the browser.

147
00:06:04,580 --> 00:06:06,430
So we click on one, click
on the second.

148
00:06:06,430 --> 00:06:07,150
Uh-oh.

149
00:06:07,150 --> 00:06:10,500
It's showing the loading
div and the error div.

150
00:06:10,500 --> 00:06:13,270
Oh, and then it shows the
flights properly.

151
00:06:13,270 --> 00:06:15,720
So it's showing the loading div
again and the error div,

152
00:06:15,720 --> 00:06:17,070
and then it shares
the flights.

153
00:06:17,070 --> 00:06:17,730
Huh.

154
00:06:17,730 --> 00:06:21,840
Well, it turns out when you call
abort on an AJAX request,

155
00:06:21,840 --> 00:06:26,150
as you might expect it calls
the error callback.

156
00:06:26,150 --> 00:06:28,190
So we need to go into the error
callback and make it so

157
00:06:28,190 --> 00:06:32,570
that it doesn't show the error
div if it's been aborted.

158
00:06:32,570 --> 00:06:35,070
So here we are back in
our error callback.

159
00:06:35,070 --> 00:06:38,670
We're going to check to see if
the status text of that error

160
00:06:38,670 --> 00:06:41,250
is not equal to abort, right?

161
00:06:41,250 --> 00:06:43,450
Because if we're aborting
we don't want to

162
00:06:43,450 --> 00:06:45,800
show the error div.

163
00:06:45,800 --> 00:06:46,980
That's all we have to do.

164
00:06:46,980 --> 00:06:49,920
So now if we go back into our
browser and click on two tabs,

165
00:06:49,920 --> 00:06:53,100
we can see that it properly
shows the loading screen and

166
00:06:53,100 --> 00:06:55,830
then pulls up the
proper flights.

167
00:06:55,830 --> 00:06:57,300
Hmm.

168
00:06:57,300 --> 00:07:03,720
But what happens if we have a
slow server, if it just loads

169
00:07:03,720 --> 00:07:06,320
and loads and loads
forever, right?

170
00:07:06,320 --> 00:07:09,570
We need some sort of timeout
to make sure that our user

171
00:07:09,570 --> 00:07:13,580
isn't waiting for like, 30
seconds for it to return.

172
00:07:13,580 --> 00:07:14,600
We need a timeout.

173
00:07:14,600 --> 00:07:17,300
So let's go back to our AJAX
call and add that.

174
00:07:17,300 --> 00:07:20,050
So all we have to do to add a
timeout is simply specify

175
00:07:20,050 --> 00:07:23,580
right here as an option
timeout 8,000.

176
00:07:23,580 --> 00:07:25,090
And that's in milliseconds.

177
00:07:25,090 --> 00:07:28,860
So we're saying after eight
seconds make it error out.

178
00:07:28,860 --> 00:07:30,590
Here's what that might look
like on the server.

179
00:07:30,590 --> 00:07:32,215
So we click on a tab.

180
00:07:32,215 --> 00:07:34,170
It's not eight seconds,
more like two seconds.

181
00:07:34,170 --> 00:07:35,800
But I want to show you
here that it's

182
00:07:35,800 --> 00:07:38,150
properly calling timeout.

183
00:07:38,150 --> 00:07:41,300
And that is triggering the error
callback and giving us

184
00:07:41,300 --> 00:07:43,610
that nice error message.

185
00:07:43,610 --> 00:07:45,260
About halfway done
with Level 2.

186
00:07:45,260 --> 00:07:46,320
Next up we're going
to talk about

187
00:07:46,320 --> 00:07:47,740
receiving and parsing JSON.

188
00:07:47,740 --> 00:07:50,420
And we need to add a little
bit to our example.

189
00:07:50,420 --> 00:07:52,860
We're going to add what
you see down here.

190
00:07:52,860 --> 00:07:55,880
Basically, once somebody clicks
on a price, we're going

191
00:07:55,880 --> 00:07:57,720
to do a callback
to the server.

192
00:07:57,720 --> 00:08:01,790
And the server's going to give
us the base price, the taxes,

193
00:08:01,790 --> 00:08:03,340
and the trip total, which
we're going to

194
00:08:03,340 --> 00:08:04,880
display down there.

195
00:08:04,880 --> 00:08:07,480
Let's jump back into our
selectFlight function,

196
00:08:07,480 --> 00:08:09,460
which we created in
the last level.

197
00:08:09,460 --> 00:08:11,670
We're going to have two
variables, one for the flight,

198
00:08:11,670 --> 00:08:13,850
one for the flight class.

199
00:08:13,850 --> 00:08:16,070
Then we're going to hide
the confirm box.

200
00:08:16,070 --> 00:08:17,960
That's what we're creating
is the confirm box.

201
00:08:17,960 --> 00:08:19,030
It might already be there.

202
00:08:19,030 --> 00:08:20,740
We're going to hide
it if it's there.

203
00:08:20,740 --> 00:08:22,900
Then we're going to create an
AJAX request where the URL

204
00:08:22,900 --> 00:08:24,940
we're calling is going to
reference the flight.

205
00:08:24,940 --> 00:08:27,960
The data is going to reference
the flight class.

206
00:08:27,960 --> 00:08:31,130
We're also going to specify the
data type option as JSON,

207
00:08:31,130 --> 00:08:35,950
because we're expecting back
JSON from the server.

208
00:08:35,950 --> 00:08:38,289
We're explicitly putting this,
but if we didn't have it would

209
00:08:38,289 --> 00:08:39,659
still work.

210
00:08:39,659 --> 00:08:41,919
JQuery would still figure out
that what is getting back from

211
00:08:41,919 --> 00:08:44,560
the server is JSON, and it
would act accordingly.

212
00:08:44,560 --> 00:08:46,970
But we're going to be just a
little more explicit and tell

213
00:08:46,970 --> 00:08:48,550
it right here in the AJAX
call that we're

214
00:08:48,550 --> 00:08:50,470
expecting JSON back.

215
00:08:50,470 --> 00:08:52,140
If it's successful, we're
going to call

216
00:08:52,140 --> 00:08:54,030
this showTotal function.

217
00:08:54,030 --> 00:08:56,790
This AJAX function we just wrote
we could also write a

218
00:08:56,790 --> 00:09:03,140
different way using the getJSON
function like so.

219
00:09:03,140 --> 00:09:05,230
Let's jump into the showTotal
function where we're getting

220
00:09:05,230 --> 00:09:07,200
the JSON back from the
server and putting it

221
00:09:07,200 --> 00:09:08,470
out onto the screen.

222
00:09:08,470 --> 00:09:10,170
Here's what part of the
HTML looks like

223
00:09:10,170 --> 00:09:11,580
that's on our screen.

224
00:09:11,580 --> 00:09:14,200
So as you can see here, we have
a table cell for price,

225
00:09:14,200 --> 00:09:15,750
fees, and total.

226
00:09:15,750 --> 00:09:18,520
To get the price out of the
JSON object, we just call

227
00:09:18,520 --> 00:09:21,080
json.price.

228
00:09:21,080 --> 00:09:25,120
Then we've got json.fees to get
the fees, json.total to

229
00:09:25,120 --> 00:09:26,160
get the total.

230
00:09:26,160 --> 00:09:28,810
And finally, let's slide down
the confirm box and show it on

231
00:09:28,810 --> 00:09:31,590
the screen.

232
00:09:31,590 --> 00:09:33,820
So here we are back
in our browser.

233
00:09:33,820 --> 00:09:36,940
We click on a number, and it
slides down, gives us the

234
00:09:36,940 --> 00:09:41,575
total, the taxes, the base
price, and our login box.

235
00:09:41,575 --> 00:09:44,370
Nice.

236
00:09:44,370 --> 00:09:46,600
Before we flush out the login
box, I want to take a moment

237
00:09:46,600 --> 00:09:49,200
to talk about JSONP.

238
00:09:49,200 --> 00:09:51,780
You see, when you're doing AJAX
back and forth on your

239
00:09:51,780 --> 00:09:53,310
server, that's fine.

240
00:09:53,310 --> 00:09:53,870
That's safe.

241
00:09:53,870 --> 00:09:56,960
As long as you're using the
same domain, you can

242
00:09:56,960 --> 00:09:58,250
call back and forth.

243
00:09:58,250 --> 00:10:01,100
But what if you want to get
AJAX data from a different

244
00:10:01,100 --> 00:10:03,900
domain, from a different
server?

245
00:10:03,900 --> 00:10:06,690
That's where you want
to use JSONP.

246
00:10:06,690 --> 00:10:10,070
It wraps the AJAX call
differently in a script tag.

247
00:10:10,070 --> 00:10:12,790
You don't need to really worry
about that, but here's what it

248
00:10:12,790 --> 00:10:14,660
looks like.

249
00:10:14,660 --> 00:10:16,130
So there's our normal
AJAX call.

250
00:10:16,130 --> 00:10:20,880
All we need to do is specify
JSONP and it's going to work.

251
00:10:20,880 --> 00:10:22,780
Here's another example
of using JSONP

252
00:10:22,780 --> 00:10:23,910
that might be useful.

253
00:10:23,910 --> 00:10:26,190
There's this service at Weather
Underground that

254
00:10:26,190 --> 00:10:29,920
allows you to get the weather
for a certain location, and it

255
00:10:29,920 --> 00:10:32,680
has a JSONP API.

256
00:10:32,680 --> 00:10:35,890
And if we called it just like
so, we'd get back an alert

257
00:10:35,890 --> 00:10:37,160
that looks something
like this.

258
00:10:40,390 --> 00:10:43,530
Next, let's work on AJAXifying
that login form.

259
00:10:43,530 --> 00:10:46,520
So here's the HTML that goes
along with that login form,

260
00:10:46,520 --> 00:10:48,250
pretty typical.

261
00:10:48,250 --> 00:10:51,660
First thing we're going to do
is grab the submit event on

262
00:10:51,660 --> 00:10:55,220
the form, have that call
the login function.

263
00:10:55,220 --> 00:10:57,790
The login function is going
to prevent default.

264
00:10:57,790 --> 00:10:59,890
Obviously we don't want
the form to submit.

265
00:10:59,890 --> 00:11:03,490
Then we're going to slide up the
title of that login box so

266
00:11:03,490 --> 00:11:05,810
that the user knows that
it's submitting.

267
00:11:05,810 --> 00:11:08,660
We'll then fetch the email and
password out of the form and

268
00:11:08,660 --> 00:11:10,340
then do an AJAX call.

269
00:11:10,340 --> 00:11:12,290
Now this isn't the best code.

270
00:11:12,290 --> 00:11:14,480
There's a better
way to do this.

271
00:11:14,480 --> 00:11:17,160
Instead of fetching all the data
out of each of the form

272
00:11:17,160 --> 00:11:19,100
elements, instead of
doing that we can

273
00:11:19,100 --> 00:11:21,820
actually call serialize.

274
00:11:21,820 --> 00:11:24,950
Serialize pulls all the fields
out of our form, and then our

275
00:11:24,950 --> 00:11:28,460
AJAX request we can
just specify form.

276
00:11:28,460 --> 00:11:30,220
Data, form.

277
00:11:30,220 --> 00:11:33,630
In this case, instead of
expecting JSON back, we're

278
00:11:33,630 --> 00:11:35,960
going to specify dataType
script.

279
00:11:35,960 --> 00:11:38,530
So we're going to expect
JavaScript back from the

280
00:11:38,530 --> 00:11:41,770
server, and we're going to
execute that JavaScript.

281
00:11:41,770 --> 00:11:44,400
You also might have noticed
we're using type here to

282
00:11:44,400 --> 00:11:49,390
specify that we're doing a post
instead of a get request.

283
00:11:49,390 --> 00:11:52,570
Because our Ajax request is
expecting back JavaScript, we

284
00:11:52,570 --> 00:11:55,670
need to write some JavaScript
on the server side.

285
00:11:55,670 --> 00:11:56,790
I'm going to show you
what that looks

286
00:11:56,790 --> 00:11:58,030
like in my Rails app.

287
00:11:58,030 --> 00:11:59,880
You don't have to
be using Rails.

288
00:11:59,880 --> 00:12:01,500
It should be readable anyway.

289
00:12:01,500 --> 00:12:05,140
So here we are inside
of our Rails app.

290
00:12:05,140 --> 00:12:09,380
Those little percentage
brackets, that's just Ruby.

291
00:12:09,380 --> 00:12:10,640
Don't worry about it.

292
00:12:10,640 --> 00:12:12,050
It's saying execute this.

293
00:12:12,050 --> 00:12:13,550
It's not jQuery.

294
00:12:13,550 --> 00:12:17,130
So we're saying if logged in,
then go ahead and render it

295
00:12:17,130 --> 00:12:20,220
out a welcome message.

296
00:12:20,220 --> 00:12:23,710
Then go ahead and slide down the
purchase button, which is

297
00:12:23,710 --> 00:12:25,160
currently hidden.

298
00:12:25,160 --> 00:12:27,690
We're going to change the
background color of the total

299
00:12:27,690 --> 00:12:29,950
price just to call it out.

300
00:12:29,950 --> 00:12:32,070
And if they didn't successfully
log in, we're

301
00:12:32,070 --> 00:12:34,550
just going to print out invalid
email and password.

302
00:12:34,550 --> 00:12:36,670
Please try again.

303
00:12:36,670 --> 00:12:39,320
So here's what it looks
like in the browser.

304
00:12:39,320 --> 00:12:42,330
We can go ahead and
click login.

305
00:12:42,330 --> 00:12:43,290
Welcome back, Craig.

306
00:12:43,290 --> 00:12:47,790
And now we can confirm purchase
and select seats.

307
00:12:47,790 --> 00:12:51,180
So now that you know all about
AJAX, it's time for you to do

308
00:12:51,180 --> 00:12:54,440
a little bit of learning by
doing in the code challenges.

309
00:12:54,440 --> 00:12:55,690
Good luck.