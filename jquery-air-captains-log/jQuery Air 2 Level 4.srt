1
00:00:00,000 --> 00:00:00,410
[SINGING]

2
00:00:00,410 --> 00:00:04,036
While on jQuery Air you'll
arrive super quick.

3
00:00:04,036 --> 00:00:06,080
With our in-flight
service you'll

4
00:00:06,080 --> 00:00:07,610
learn code with a click.

5
00:00:07,610 --> 00:00:10,900
Yes, now all this and more,
taught by Gregg Pollack.

6
00:00:10,900 --> 00:00:13,850
We hope you enjoy your flight.

7
00:00:13,850 --> 00:00:14,203
[SPEAKING]

8
00:00:14,203 --> 00:00:16,470
I'm Gregg, and I'll be
your captain this

9
00:00:16,470 --> 00:00:19,290
evening on jQuery Air.

10
00:00:19,290 --> 00:00:22,020
Level four's the last level
on our jQuery Air flight.

11
00:00:22,020 --> 00:00:25,070
We're going to be talking about
each and map utility

12
00:00:25,070 --> 00:00:27,700
methods and then how to create
your own utility method.

13
00:00:27,700 --> 00:00:30,290
We'll then talk about plug-ins
and create our own plug-ins,

14
00:00:30,290 --> 00:00:33,640
then encapsulating our code,
keeping it more organized,

15
00:00:33,640 --> 00:00:35,910
followed by talking about
custom events.

16
00:00:35,910 --> 00:00:39,280
And then finally we'll take a
look at something newer in

17
00:00:39,280 --> 00:00:42,050
jQuery, which are jQuery
Templates, allowing you to

18
00:00:42,050 --> 00:00:42,990
write some--

19
00:00:42,990 --> 00:00:45,270
you would call it, view HTML--

20
00:00:45,270 --> 00:00:47,200
that gets started on the client
side and load it up.

21
00:00:47,200 --> 00:00:51,040
It's pretty cool stuff,
so stay with us.

22
00:00:51,040 --> 00:00:53,920
Remember the AJAX we used
to load in the flights?

23
00:00:53,920 --> 00:00:55,770
Well, we're going to change
that around a bit.

24
00:00:55,770 --> 00:00:58,920
Instead of loading HTML, getting
HTML back from the

25
00:00:58,920 --> 00:01:01,670
server, for the sake of our
examples we're going to switch

26
00:01:01,670 --> 00:01:04,430
that to using JSON.

27
00:01:04,430 --> 00:01:06,790
So basically on our server,
we're going to be calling a

28
00:01:06,790 --> 00:01:07,650
different URL.

29
00:01:07,650 --> 00:01:11,280
It's just so happens that
our server wants .json.

30
00:01:11,280 --> 00:01:15,030
And it's going to come back with
this, as you see here.

31
00:01:15,030 --> 00:01:19,780
It's basically a JSON array of
objects with the values for

32
00:01:19,780 --> 00:01:21,110
our flights.

33
00:01:21,110 --> 00:01:22,890
So now we need to
load this in.

34
00:01:22,890 --> 00:01:26,280
In our success callback, we're
now going to remove all the

35
00:01:26,280 --> 00:01:28,550
rows that we currently have.

36
00:01:28,550 --> 00:01:30,360
Then we're going to create
a variable called Rows.

37
00:01:30,360 --> 00:01:35,460
We're going to go through each
flight in that flights array.

38
00:01:35,460 --> 00:01:39,330
For each flight we're
going to add a row

39
00:01:39,330 --> 00:01:41,530
onto the rows variable.

40
00:01:41,530 --> 00:01:44,660
And at the very end of that
callback, we're going to load

41
00:01:44,660 --> 00:01:47,740
that HTML into the body
of the table.

42
00:01:47,740 --> 00:01:49,800
Instead of using each function,
there's one other

43
00:01:49,800 --> 00:01:53,280
way we could have done this
using the map function.

44
00:01:53,280 --> 00:01:56,760
What the map function does is
it takes an array and it

45
00:01:56,760 --> 00:01:59,260
returns an array.

46
00:01:59,260 --> 00:02:02,690
So here you can see we're going
through all the flights.

47
00:02:02,690 --> 00:02:05,840
It's going to return each of
the rows, and it's going to

48
00:02:05,840 --> 00:02:09,570
set that array that it returns
equal to our flight rows

49
00:02:09,570 --> 00:02:12,160
variable, so that when
we'll have array.

50
00:02:12,160 --> 00:02:15,240
The to load the flight rows back
into our table, we simply

51
00:02:15,240 --> 00:02:19,070
at the bottom call
flight_rows.join.

52
00:02:19,070 --> 00:02:20,580
So it's going to join
that array together

53
00:02:20,580 --> 00:02:22,740
into one big string.

54
00:02:22,740 --> 00:02:25,790
There are two different ways you
can extend jQuery and keep

55
00:02:25,790 --> 00:02:26,790
your code DRY.

56
00:02:26,790 --> 00:02:28,520
DRY, in case you're not
familiar, means

57
00:02:28,520 --> 00:02:29,740
don't repeat yourself.

58
00:02:29,740 --> 00:02:31,620
We don't like repeating
ourselves.

59
00:02:31,620 --> 00:02:32,360
There's two ways
you can do it.

60
00:02:32,360 --> 00:02:35,860
The first way is by creating
your own utility functions.

61
00:02:35,860 --> 00:02:40,550
Just like a map and each and
AJAX are utility functions, we

62
00:02:40,550 --> 00:02:41,240
can create our own.

63
00:02:41,240 --> 00:02:42,680
And later on, we're going
to create one

64
00:02:42,680 --> 00:02:44,690
called filter flights.

65
00:02:44,690 --> 00:02:47,790
We can also extend jQuery by
creating our own plugins.

66
00:02:47,790 --> 00:02:49,740
The difference here, of course,
is that plugins can

67
00:02:49,740 --> 00:02:51,730
be called on jQuery objects.

68
00:02:51,730 --> 00:02:54,110
And we're going to be creating
one later for our tool tips.

69
00:02:56,770 --> 00:02:59,200
Here's our hello world utility
function, so you can get used

70
00:02:59,200 --> 00:03:00,560
to the syntax.

71
00:03:00,560 --> 00:03:03,700
So here we have hello,
function, alert.

72
00:03:03,700 --> 00:03:05,820
Utility functions can be
wrapped a little bit

73
00:03:05,820 --> 00:03:07,780
differently than our
normal code.

74
00:03:07,780 --> 00:03:10,880
We can use what they call
in jQuery a closure.

75
00:03:10,880 --> 00:03:13,120
It looks something like this.

76
00:03:13,120 --> 00:03:16,180
So the cool part about this is
that it's taking that dollar

77
00:03:16,180 --> 00:03:20,440
sign, we're adding a function
basically into jQuery.

78
00:03:20,440 --> 00:03:24,510
And then using the closure like
this makes it so that we

79
00:03:24,510 --> 00:03:27,950
can use that function elsewhere
in our code.

80
00:03:27,950 --> 00:03:30,050
So it's going to make sure that
that method we attach,

81
00:03:30,050 --> 00:03:32,940
the dollar sign, can get used
in code that we might have

82
00:03:32,940 --> 00:03:35,510
elsewhere in other libraries
on the same page.

83
00:03:35,510 --> 00:03:38,470
To run this function, we just
call .hello and it gets us

84
00:03:38,470 --> 00:03:42,260
back this alert you see here.

85
00:03:42,260 --> 00:03:44,370
Now, let's take a look back in
our application, see if we can

86
00:03:44,370 --> 00:03:45,920
find some place where
we might want to

87
00:03:45,920 --> 00:03:48,100
use a utility function.

88
00:03:48,100 --> 00:03:51,230
So here you can see I've added
a little box up top that

89
00:03:51,230 --> 00:03:54,040
allows us to filter by
number of stops.

90
00:03:54,040 --> 00:03:57,250
So if we're only looking for a
nonstop flight, we can just

91
00:03:57,250 --> 00:04:00,450
click this filter and only
look at nonstop flights.

92
00:04:00,450 --> 00:04:04,590
So how to implement this, here
is the HTML for this box.

93
00:04:04,590 --> 00:04:06,740
So it's just a bunch
of radio buttons.

94
00:04:06,740 --> 00:04:09,720
And we're going to want to
trigger an event when one of

95
00:04:09,720 --> 00:04:12,360
these radio buttons is
pressed and call the

96
00:04:12,360 --> 00:04:16,480
filter by flights method.

97
00:04:16,480 --> 00:04:18,899
Let's define that method.

98
00:04:18,899 --> 00:04:23,000
So inside filter by flight we're
going to grab the value,

99
00:04:23,000 --> 00:04:25,080
grab the number of stops.

100
00:04:25,080 --> 00:04:28,130
We're going to have an empty
array called filter flights.

101
00:04:28,130 --> 00:04:30,190
Then we're going to go through
each of our current flights.

102
00:04:30,190 --> 00:04:33,800
Now behind the scenes, I've
basically created a global

103
00:04:33,800 --> 00:04:36,690
variable that has the
current flights

104
00:04:36,690 --> 00:04:37,650
that are getting displayed.

105
00:04:37,650 --> 00:04:40,490
So it has the JSON array of the
current flights that are

106
00:04:40,490 --> 00:04:41,620
up on the page.

107
00:04:41,620 --> 00:04:42,990
So here, I'm referencing that.

108
00:04:42,990 --> 00:04:44,530
We're going through
each of them.

109
00:04:44,530 --> 00:04:47,330
If the user selects two or more
flights, that means we

110
00:04:47,330 --> 00:04:50,680
can push on this existing
flight no matter what.

111
00:04:50,680 --> 00:04:52,890
And then I'm not going to show
you the rest of the code, but

112
00:04:52,890 --> 00:04:55,640
it goes through all the other
conditionals to build up that

113
00:04:55,640 --> 00:04:57,000
filtered flights array.

114
00:04:57,000 --> 00:04:59,280
And then it's going to print
out the filtered flights.

115
00:04:59,280 --> 00:05:01,570
So let's take a look
at this in action.

116
00:05:01,570 --> 00:05:03,735
Here you can see we can filter
the different flights.

117
00:05:03,735 --> 00:05:06,020
It displays them
on the screen.

118
00:05:06,020 --> 00:05:09,560
But when we click over to
another tab, you'll notice it

119
00:05:09,560 --> 00:05:11,020
doesn't save our preferences.

120
00:05:11,020 --> 00:05:12,860
It doesn't stay filtered.

121
00:05:12,860 --> 00:05:15,940
So we can filter from here, but
as soon as we click onto

122
00:05:15,940 --> 00:05:18,780
another tab, it would reset.

123
00:05:18,780 --> 00:05:22,240
So how do we figure out how to
make it so that even when we

124
00:05:22,240 --> 00:05:24,790
switch tabs it stays filtered?

125
00:05:24,790 --> 00:05:26,770
Since there are multiple places
we need to filter

126
00:05:26,770 --> 00:05:30,160
results, we're going to create
a utility method for it.

127
00:05:30,160 --> 00:05:32,510
So we're going to call
it filter flights.

128
00:05:32,510 --> 00:05:35,910
We're going to send in current
flights and stops.

129
00:05:35,910 --> 00:05:38,360
Then we're going to go through
each of the current flights

130
00:05:38,360 --> 00:05:41,130
and then just return the
filtered flights.

131
00:05:41,130 --> 00:05:42,420
Pretty simple.

132
00:05:42,420 --> 00:05:44,250
Then in the code where we
display new flights, when we

133
00:05:44,250 --> 00:05:47,630
click a tab, we're going to get
the checked radio button,

134
00:05:47,630 --> 00:05:51,720
get the value of that, and then
call filter flights, send

135
00:05:51,720 --> 00:05:54,510
in the current flights
and stops.

136
00:05:54,510 --> 00:05:57,180
Let's take a look at that
in the browser.

137
00:05:57,180 --> 00:06:02,110
So we change the number of
stops, and now we click and we

138
00:06:02,110 --> 00:06:06,090
get back nonstop,
just nonstop.

139
00:06:06,090 --> 00:06:08,550
We can change it to 0-1,
and everything

140
00:06:08,550 --> 00:06:09,800
remains properly filtered.

141
00:06:12,820 --> 00:06:15,060
Next up, let's create some
jQuery plugins.

142
00:06:15,060 --> 00:06:17,260
So here's a very basic
jQuery plugin.

143
00:06:17,260 --> 00:06:20,630
Let's say I wanted to create a
callout, which is less than a

144
00:06:20,630 --> 00:06:25,470
highlight, just that maybe
opacity from 0.5 to 1.

145
00:06:25,470 --> 00:06:27,080
So there's the CSS.

146
00:06:27,080 --> 00:06:29,020
We're going to animate
it fast.

147
00:06:29,020 --> 00:06:30,650
And that's our plugin.

148
00:06:30,650 --> 00:06:34,140
You'll notice it has that .fn.

149
00:06:34,140 --> 00:06:37,880
This we also want to wrap in one
of these closures, so we

150
00:06:37,880 --> 00:06:41,080
reuse it in many different
places in our code.

151
00:06:41,080 --> 00:06:44,110
Now as I mentioned before,
plugins have to be called on

152
00:06:44,110 --> 00:06:45,710
a jQuery object.

153
00:06:45,710 --> 00:06:48,860
Here we have activeDiv.callOut.

154
00:06:48,860 --> 00:06:51,870
One other programming pattern
that you see with plugins

155
00:06:51,870 --> 00:06:53,530
deals with defaults.

156
00:06:53,530 --> 00:06:55,080
Specifying defaults,
but with the

157
00:06:55,080 --> 00:06:56,510
ability to override defaults.

158
00:06:56,510 --> 00:06:59,870
For instance here, let's say
one of my defaults is the

159
00:06:59,870 --> 00:07:01,840
duration of the callout.

160
00:07:01,840 --> 00:07:05,790
So I have a little default
object here.

161
00:07:05,790 --> 00:07:08,600
I can say extend defaults
options.

162
00:07:08,600 --> 00:07:12,100
So what this says is use the
default setting unless it's

163
00:07:12,100 --> 00:07:16,190
overridden by something that
I send in using options.

164
00:07:16,190 --> 00:07:18,770
So then I've got options
duration with the animate.

165
00:07:18,770 --> 00:07:21,500
And now down below I can call
callOut without any

166
00:07:21,500 --> 00:07:25,190
configuration options, or I
can send in a customized

167
00:07:25,190 --> 00:07:28,690
duration if I want to override
the default.

168
00:07:28,690 --> 00:07:30,590
So where in our application
might we

169
00:07:30,590 --> 00:07:32,260
want to use a plugin?

170
00:07:32,260 --> 00:07:34,820
Well, remember those
tool tips?

171
00:07:34,820 --> 00:07:36,460
Those tool tips were
pretty nice.

172
00:07:36,460 --> 00:07:38,410
We might want to use those
someplace else in our

173
00:07:38,410 --> 00:07:39,280
application.

174
00:07:39,280 --> 00:07:41,730
So let's extract those
into a plugin.

175
00:07:44,880 --> 00:07:48,980
Here's our bind command, which
you should be familiar with.

176
00:07:48,980 --> 00:07:50,585
Here's our show a number
of flights function.

177
00:07:54,020 --> 00:07:57,200
And here's our hide number
of flights function.

178
00:07:57,200 --> 00:08:00,160
So let's extract this
into a plugin.

179
00:08:00,160 --> 00:08:01,920
So our plugin in this
case is going to be

180
00:08:01,920 --> 00:08:04,030
called addToolTip.

181
00:08:04,030 --> 00:08:08,190
It's going to return a
bind on mouseenter.

182
00:08:08,190 --> 00:08:09,910
It's going to grab
the tool tip.

183
00:08:09,910 --> 00:08:13,130
I've changed the data naming
here so that all we have to do

184
00:08:13,130 --> 00:08:15,130
is have data tool tip and
that'll pick it up.

185
00:08:15,130 --> 00:08:17,460
It's a little bit
more generic.

186
00:08:17,460 --> 00:08:20,320
Then we're going to create
a span and append that.

187
00:08:20,320 --> 00:08:22,345
And on mouseleave we're going
to find that tool

188
00:08:22,345 --> 00:08:24,520
tip and remove it.

189
00:08:24,520 --> 00:08:26,990
All we need to do to add this
function is simply to get an

190
00:08:26,990 --> 00:08:30,890
element and call .addToolTip.

191
00:08:30,890 --> 00:08:33,620
Now, if we look back
in our browser, it

192
00:08:33,620 --> 00:08:34,919
shouldn't look any different.

193
00:08:34,919 --> 00:08:36,220
It's pretty much the same.

194
00:08:36,220 --> 00:08:39,380
Except now, we can take that
plugin and use it elsewhere

195
00:08:39,380 --> 00:08:42,679
in our code.

196
00:08:42,679 --> 00:08:42,980
All right.

197
00:08:42,980 --> 00:08:45,220
We're about halfway down
with level four.

198
00:08:45,220 --> 00:08:46,730
Next up, we're going to be
talking about how to

199
00:08:46,730 --> 00:08:49,830
encapsulate and organize
your JavaScript code.

200
00:08:49,830 --> 00:08:52,240
So here you can see what we've
written so far in our

201
00:08:52,240 --> 00:08:53,160
application.

202
00:08:53,160 --> 00:08:55,690
We've got a couple variables and
a bunch of functions and a

203
00:08:55,690 --> 00:08:57,570
bunch of stuff we
load and unload.

204
00:08:57,570 --> 00:08:59,650
And it's a bit messy.

205
00:08:59,650 --> 00:09:02,750
So how might we refactor
this to encapsulate it?

206
00:09:02,750 --> 00:09:05,640
Well, what we're going to do is
we're going to encapsulate

207
00:09:05,640 --> 00:09:08,770
it in two different objects.

208
00:09:08,770 --> 00:09:11,440
Up here at the top, we have
the select flights object.

209
00:09:11,440 --> 00:09:14,180
Inside there we have two
attributes, fetchingFlights

210
00:09:14,180 --> 00:09:15,390
and currentFlights.

211
00:09:15,390 --> 00:09:17,290
Then we're going to have
an init function.

212
00:09:17,290 --> 00:09:19,780
We're writing the functions a
little bit differently now.

213
00:09:19,780 --> 00:09:22,610
We're wrapping them
all like so.

214
00:09:22,610 --> 00:09:24,440
Then we have a more object
called confirm flight at the

215
00:09:24,440 --> 00:09:26,260
bottom, where we're separating
functions that

216
00:09:26,260 --> 00:09:27,630
have different concerns.

217
00:09:27,630 --> 00:09:30,160
To run the functions that we
need to run when the page

218
00:09:30,160 --> 00:09:34,390
loads, we're simply going to
run selectFlights.init.

219
00:09:34,390 --> 00:09:36,360
One other thing we need to
change in here to make it

220
00:09:36,360 --> 00:09:40,350
work, we need to reference
the methods like so.

221
00:09:40,350 --> 00:09:43,300
If we're talking about methods
inside our current object, we

222
00:09:43,300 --> 00:09:45,825
can also use the
this variable.

223
00:09:48,390 --> 00:09:50,200
Next up, we're going to talk
about custom events.

224
00:09:50,200 --> 00:09:53,190
And what we're going to try to
implement on our little flight

225
00:09:53,190 --> 00:09:56,570
selecter is the ability to use
the keys one, two, three,

226
00:09:56,570 --> 00:10:00,710
four, five to select the
five different tabs.

227
00:10:00,710 --> 00:10:02,800
So what might that
code look like?

228
00:10:02,800 --> 00:10:03,900
We're going to write
a function that

229
00:10:03,900 --> 00:10:06,330
gets called on keydown.

230
00:10:06,330 --> 00:10:09,080
And if the key code is between
these two key codes, which is

231
00:10:09,080 --> 00:10:11,700
basically one and five,
we're going to

232
00:10:11,700 --> 00:10:13,900
set the number selected.

233
00:10:13,900 --> 00:10:16,110
I should mention that if they
press the number one, it's

234
00:10:16,110 --> 00:10:18,990
actually going to set
numSelected to zero.

235
00:10:18,990 --> 00:10:21,510
So we're making it from
zero to four, really.

236
00:10:21,510 --> 00:10:24,370
Then we're going to set
tabSelected and get the tab

237
00:10:24,370 --> 00:10:26,490
that was selected using that EQ

238
00:10:26,490 --> 00:10:28,140
function that we saw earlier.

239
00:10:28,140 --> 00:10:31,440
So if it's EQ0, it's going
to select the first tab.

240
00:10:31,440 --> 00:10:34,930
Then we want to select the
proper tab, switch the

241
00:10:34,930 --> 00:10:37,860
classes, call the AJAX.

242
00:10:37,860 --> 00:10:40,740
Now, there's one other place in
our code, though, that does

243
00:10:40,740 --> 00:10:43,260
the same thing, our
old tab code.

244
00:10:43,260 --> 00:10:46,880
So when a tab is clicked, it
does the same exact thing.

245
00:10:46,880 --> 00:10:48,660
And we don't like to
repeat ourselves.

246
00:10:48,660 --> 00:10:50,960
So let's make it dry.

247
00:10:50,960 --> 00:10:54,520
So where we have this repeated
code we're going to move this

248
00:10:54,520 --> 00:10:57,490
up into a custom event.

249
00:10:57,490 --> 00:11:01,790
We're going to call the custom
event selectTab, just

250
00:11:01,790 --> 00:11:03,740
like you see here.

251
00:11:03,740 --> 00:11:06,110
Then it to trigger the
event, we simply

252
00:11:06,110 --> 00:11:07,510
call the trigger method.

253
00:11:07,510 --> 00:11:11,770
So down here we say, trigger
selectTab, and then down in

254
00:11:11,770 --> 00:11:15,350
our click event, we call
trigger selectTab.

255
00:11:15,350 --> 00:11:17,350
So selectTab's our custom
event, and we

256
00:11:17,350 --> 00:11:20,360
call it by using trigger.

257
00:11:20,360 --> 00:11:23,070
Here it is in action.

258
00:11:23,070 --> 00:11:23,790
Here we go.

259
00:11:23,790 --> 00:11:27,650
One, two, three, four,
and then five.

260
00:11:27,650 --> 00:11:32,190
So it works using both keys
and clicking on the tabs.

261
00:11:32,190 --> 00:11:34,660
Remember this code from earlier,
where we're getting

262
00:11:34,660 --> 00:11:38,320
back a JSON array and mapping
that into a new array and

263
00:11:38,320 --> 00:11:39,960
printing out to the screen,
and then having

264
00:11:39,960 --> 00:11:40,920
some HTML in there?

265
00:11:40,920 --> 00:11:44,620
Well, I was kind of hiding the
ugly stuff from you, because

266
00:11:44,620 --> 00:11:47,780
really it looks a little bit
something like this.

267
00:11:47,780 --> 00:11:50,200
We have all this HTML
in the middle of

268
00:11:50,200 --> 00:11:52,620
our beautiful jQuery.

269
00:11:52,620 --> 00:11:53,360
Not so good.

270
00:11:53,360 --> 00:11:54,780
How might we get around this?

271
00:11:54,780 --> 00:11:56,160
Well, one way we might
get around this

272
00:11:56,160 --> 00:11:57,870
is by using a template.

273
00:11:57,870 --> 00:12:02,320
Once we use jQuery Templates,
the code looks a lot cleaner.

274
00:12:02,320 --> 00:12:04,720
Looks something like this,
where we, say, take this

275
00:12:04,720 --> 00:12:09,660
template called flight template,
send in the flights

276
00:12:09,660 --> 00:12:11,890
arrays-- remember that's
a JSON array--

277
00:12:11,890 --> 00:12:14,010
and then append that
to this div.

278
00:12:14,010 --> 00:12:18,410
And that's all there is to it.

279
00:12:18,410 --> 00:12:20,650
Well, we have to specify
the template.

280
00:12:20,650 --> 00:12:22,240
Let me show you what
that looks like.

281
00:12:22,240 --> 00:12:24,190
To basically in our HTML, we
might have something that

282
00:12:24,190 --> 00:12:26,520
looks like this.

283
00:12:26,520 --> 00:12:29,600
So the ID is the name of the
template, the flight template.

284
00:12:29,600 --> 00:12:32,440
And here you can see all of
the different values that

285
00:12:32,440 --> 00:12:34,460
we're pulling out of
our JSON array.

286
00:12:34,460 --> 00:12:38,290
You might notice that there's
no each in here.

287
00:12:38,290 --> 00:12:40,580
That's because jQuery Templates
is smart enough to

288
00:12:40,580 --> 00:12:43,630
know that this is a JSON array
that it's getting.

289
00:12:43,630 --> 00:12:45,440
And it's going to iterate
through this

290
00:12:45,440 --> 00:12:48,400
template for every row.

291
00:12:48,400 --> 00:12:53,290
jQuery Templates isn't baked
into Quora jQuery library, at

292
00:12:53,290 --> 00:12:54,270
least it isn't yet.

293
00:12:54,270 --> 00:12:56,370
It may be in the future,
but it isn't yet.

294
00:12:56,370 --> 00:13:01,100
Which means you're going to need
to go and grab the source

295
00:13:01,100 --> 00:13:02,800
and include that in
your application.

296
00:13:02,800 --> 00:13:04,040
Something like this.

297
00:13:04,040 --> 00:13:05,840
I also really recommend
looking through the

298
00:13:05,840 --> 00:13:06,570
documentation.

299
00:13:06,570 --> 00:13:09,260
There's some really great
examples of how to use it.

300
00:13:09,260 --> 00:13:11,580
And you may have noticed, when
we switched over to using a

301
00:13:11,580 --> 00:13:15,860
jQuery template, we lost that
nice formatting of our routes.

302
00:13:15,860 --> 00:13:19,400
It used to say nonstop,
one stop, two stops.

303
00:13:19,400 --> 00:13:21,410
But it's not doing
that anymore.

304
00:13:21,410 --> 00:13:24,640
Well, how might we implement
that on the client side?

305
00:13:24,640 --> 00:13:26,500
Using jQuery Templates,
we can have some

306
00:13:26,500 --> 00:13:27,580
conditionals in there.

307
00:13:27,580 --> 00:13:30,520
So if routing is equal
to zero, put nonstop.

308
00:13:30,520 --> 00:13:33,520
Otherwise, if it's equal
to one, put one stop.

309
00:13:33,520 --> 00:13:35,930
Otherwise, just print
out whatever stops.

310
00:13:35,930 --> 00:13:38,440
Just like that, we can use
conditionals in our code.

311
00:13:38,440 --> 00:13:41,220
And then when we go back into
our browser, you can see that

312
00:13:41,220 --> 00:13:46,540
we have nicely printed routes.

313
00:13:46,540 --> 00:13:48,120
There's a couple other template
commands that I want

314
00:13:48,120 --> 00:13:49,110
you to know about.

315
00:13:49,110 --> 00:13:53,190
So you saw that we used dollar
sign curly brackets for

316
00:13:53,190 --> 00:13:54,160
printing data.

317
00:13:54,160 --> 00:13:58,120
But we can also say HTML and
then have the field name if we

318
00:13:58,120 --> 00:14:00,310
want to print out markup.

319
00:14:00,310 --> 00:14:04,180
We can use each if our
JSON has an array

320
00:14:04,180 --> 00:14:05,260
embedded inside of it.

321
00:14:05,260 --> 00:14:09,260
We can iterate through each of
the items from that JSON.

322
00:14:09,260 --> 00:14:12,370
We can also use the template
command, which you'll need to

323
00:14:12,370 --> 00:14:14,550
look up some examples to figure
out how to use it, but

324
00:14:14,550 --> 00:14:17,610
basically allows you to include
templates inside of

325
00:14:17,610 --> 00:14:18,860
other templates.

326
00:14:24,800 --> 00:14:27,150
Well, that's the end
of jQuery Air.

327
00:14:27,150 --> 00:14:27,630
Wait.

328
00:14:27,630 --> 00:14:28,870
That's the end of
all the videos.

329
00:14:28,870 --> 00:14:31,090
And that stuff got
pretty hairy over

330
00:14:31,090 --> 00:14:32,530
the past level here.

331
00:14:32,530 --> 00:14:35,430
So I hope you're ready to get
into the challenges and

332
00:14:35,430 --> 00:14:37,270
actually learn by doing.

333
00:14:37,270 --> 00:14:40,300
And hopefully, they'll be a
next course after this.

334
00:14:40,300 --> 00:14:44,370
Hey, if you get this far, you
might keep a look out for the

335
00:14:44,370 --> 00:14:46,980
CoffeeScript course that we
might be doing, where you'll

336
00:14:46,980 --> 00:14:50,850
be doing a lot of the same
stuff, but programming it in

337
00:14:50,850 --> 00:14:54,210
nicer code, in nicer
CoffeeScript code.

338
00:14:54,210 --> 00:14:58,050
So as they say when you leave
the flight after you're done,

339
00:14:58,050 --> 00:14:59,410
bye bye, now.

340
00:14:59,410 --> 00:15:00,450
Bye bye.

341
00:15:00,450 --> 00:15:02,250
Bye bye, now See you.