1
00:00:00,000 --> 00:00:00,280
[MUSIC PLAYING]

2
00:00:00,280 --> 00:00:02,895
Your client-side JavaScript
is starting to mold.

3
00:00:02,895 --> 00:00:06,550
It's starting to resemble
a bad spaghetti code.

4
00:00:06,550 --> 00:00:09,090
And it is time to add
structure, but it

5
00:00:09,090 --> 00:00:10,160
won't take too long.

6
00:00:10,160 --> 00:00:13,580
Gotta get your truth
out of the DOM.

7
00:00:13,580 --> 00:00:16,420
Take your data into models
and you cannot lose.

8
00:00:16,420 --> 00:00:20,465
We'll render out your models
with the help of the views.

9
00:00:20,465 --> 00:00:22,910
And if you don't want your
JavaScript to end up like a

10
00:00:22,910 --> 00:00:27,360
mess, it's time for the Anatomy
of Backbone JS.

11
00:00:27,360 --> 00:00:28,610
At Code School.

12
00:00:34,100 --> 00:00:36,730
You're watching the anatomy
of Backbone JS.

13
00:00:36,730 --> 00:00:39,550
And this is Level Five:
Collections.

14
00:00:39,550 --> 00:00:42,030
So far in our to-do app,
we've gotten a lot of

15
00:00:42,030 --> 00:00:44,130
feedback from our users.

16
00:00:44,130 --> 00:00:46,600
And they want to do more
than one thing at once.

17
00:00:46,600 --> 00:00:50,290
So they want a to-do list
instead of just one item.

18
00:00:50,290 --> 00:00:52,060
So how do we handle
this in Backbone?

19
00:00:52,060 --> 00:00:55,000
We could create a couple model
instances and then

20
00:00:55,000 --> 00:00:56,200
stick that in an array.

21
00:00:56,200 --> 00:00:58,150
And then we could loop
over that array and

22
00:00:58,150 --> 00:00:59,530
put them in the DOM.

23
00:00:59,530 --> 00:01:02,010
But there's a better way
to do it in Backbone.

24
00:01:02,010 --> 00:01:04,120
We could use collections.

25
00:01:04,120 --> 00:01:08,320
Here we're defining a TodoList
collection class just

26
00:01:08,320 --> 00:01:10,250
like we've done with
models and views.

27
00:01:10,250 --> 00:01:13,030
The only thing we have to do is
make sure we specify which

28
00:01:13,030 --> 00:01:16,170
model the collection
is managing, in

29
00:01:16,170 --> 00:01:17,530
this case, TodoItem.

30
00:01:17,530 --> 00:01:20,710
And then we can create a new
instance of the TodoList

31
00:01:20,710 --> 00:01:25,260
collection and have this
manage a set of models.

32
00:01:25,260 --> 00:01:27,170
Here are a couple things we
can do with collection

33
00:01:27,170 --> 00:01:31,340
instances, like get the number
of models inside using length.

34
00:01:31,340 --> 00:01:34,140
We can add a model instance
using add.

35
00:01:34,140 --> 00:01:38,080
We can get a model instance at
a certain index using at.

36
00:01:38,080 --> 00:01:40,200
And that will return
a model instance.

37
00:01:40,200 --> 00:01:43,610
We can get a model instance
by its ID.

38
00:01:43,610 --> 00:01:48,450
And we can remove a model
instance using remove.

39
00:01:48,450 --> 00:01:52,750
But let's say we want to
populate a collection with

40
00:01:52,750 --> 00:01:54,430
models in bulk.

41
00:01:54,430 --> 00:01:56,040
How do we do that?

42
00:01:56,040 --> 00:01:59,010
Well, collections have a reset
function where all we have to

43
00:01:59,010 --> 00:02:01,870
do is pass in an array of
objects, and each one of those

44
00:02:01,870 --> 00:02:04,410
objects will become
a todoItem.

45
00:02:04,410 --> 00:02:07,870
Now our TodoList collection
has three todoItems in it.

46
00:02:07,870 --> 00:02:10,590
But how do we populate our
TodoList collection with

47
00:02:10,590 --> 00:02:12,610
data from the server?

48
00:02:12,610 --> 00:02:15,080
First thing, let's go back to
our TodoList collection

49
00:02:15,080 --> 00:02:17,710
class and specify a URL.

50
00:02:17,710 --> 00:02:21,230
Now when we call the fetch
function from the TodoList

51
00:02:21,230 --> 00:02:24,930
collection, Backbone will go
ahead and make a get to the

52
00:02:24,930 --> 00:02:29,070
/todos URL and populate
our collection with

53
00:02:29,070 --> 00:02:30,470
data from the server.

54
00:02:30,470 --> 00:02:34,900
And now our todoList
has two items in it.

55
00:02:34,900 --> 00:02:38,370
Just like we can listen to
events on a model, we can also

56
00:02:38,370 --> 00:02:41,540
listen to events on our
collection instance.

57
00:02:41,540 --> 00:02:44,680
Here we are listening to
the event name, event.

58
00:02:44,680 --> 00:02:47,050
And whenever that event is
triggered, we're calling an

59
00:02:47,050 --> 00:02:50,720
alert, just like in our models.

60
00:02:50,720 --> 00:02:53,130
Collections in Backbone
also have special

61
00:02:53,130 --> 00:02:54,730
events just like models.

62
00:02:54,730 --> 00:02:58,210
For instance, we can listen
to the reset event on our

63
00:02:58,210 --> 00:02:59,110
collection.

64
00:02:59,110 --> 00:03:02,700
And that is triggered whenever
fetch or reset is called.

65
00:03:02,700 --> 00:03:05,600
If we don't want the event to
be triggered, we can pass in

66
00:03:05,600 --> 00:03:09,270
silent: true to fetch end reset,
and that won't trigger

67
00:03:09,270 --> 00:03:10,790
the reset event.

68
00:03:10,790 --> 00:03:15,540
We can also remove the event
listener with off.

69
00:03:15,540 --> 00:03:19,090
Just like on model instances,
we can listen to an event on

70
00:03:19,090 --> 00:03:22,870
the collection by passing in the
event name followed by the

71
00:03:22,870 --> 00:03:24,900
function that we want
to be called when

72
00:03:24,900 --> 00:03:26,580
the event is triggered.

73
00:03:26,580 --> 00:03:30,180
Some of the built-in events that
Backbone provides us is

74
00:03:30,180 --> 00:03:33,070
add, which is called whenever
a model is added to the

75
00:03:33,070 --> 00:03:34,110
collection.

76
00:03:34,110 --> 00:03:36,800
Remove, which is called when
a model is removed from the

77
00:03:36,800 --> 00:03:37,690
collection.

78
00:03:37,690 --> 00:03:41,400
And as we saw earlier, the reset
event, which is called

79
00:03:41,400 --> 00:03:44,520
whenever the collection
is reset or fetched.

80
00:03:44,520 --> 00:03:47,390
Now there's a special case
with the Add and Remove

81
00:03:47,390 --> 00:03:49,170
events, as shown here:

82
00:03:49,170 --> 00:03:53,210
When the event function is
called, it passes in the model

83
00:03:53,210 --> 00:03:56,112
that was either added
or removed.

84
00:03:56,112 --> 00:03:58,910
On collections we can also
listen to events that are

85
00:03:58,910 --> 00:04:00,360
triggered on models.

86
00:04:00,360 --> 00:04:03,620
So for instance, we can listen
to the change event on any

87
00:04:03,620 --> 00:04:06,280
model that is inside
of our collection.

88
00:04:06,280 --> 00:04:10,110
We can also listen to the change
attribute, the destroy,

89
00:04:10,110 --> 00:04:12,050
the sync, the error,
and the all.

90
00:04:12,050 --> 00:04:15,090
And those will all be triggered
on our collection

91
00:04:15,090 --> 00:04:16,890
whenever they're triggered
on the model.

92
00:04:19,529 --> 00:04:21,839
Now that we have a set of
models, we're probably going

93
00:04:21,839 --> 00:04:23,920
to want to do some iteration.

94
00:04:23,920 --> 00:04:26,970
First, let's set up our
collection using reset with a

95
00:04:26,970 --> 00:04:30,850
couple of items. Now as you can
see here, we can call forEach

96
00:04:30,850 --> 00:04:34,820
on the todoList, pass
in a function, and that

97
00:04:34,820 --> 00:04:38,980
function will be called with
each item in the collection.

98
00:04:38,980 --> 00:04:41,430
So here what we're doing is
alerting each model's

99
00:04:41,430 --> 00:04:43,530
description, which will look
something like this.

100
00:04:47,650 --> 00:04:50,810
Backbone provides collections
with many different iteration

101
00:04:50,810 --> 00:04:54,360
functions, one of them being
map, which just like forEach

102
00:04:54,360 --> 00:04:58,010
takes a function that is going
to be called with each item in

103
00:04:58,010 --> 00:04:58,850
the collection.

104
00:04:58,850 --> 00:05:02,340
But this time it's going to
build a new array based off

105
00:05:02,340 --> 00:05:05,190
the return items of
that function.

106
00:05:05,190 --> 00:05:07,810
So in this example, we're going
to have an array of two

107
00:05:07,810 --> 00:05:09,270
descriptions.

108
00:05:09,270 --> 00:05:12,820
We can also use the filter
function to create a new array

109
00:05:12,820 --> 00:05:18,480
with only the items that return
true from the function.

110
00:05:18,480 --> 00:05:21,620
There are many other iteration
functions you can use on

111
00:05:21,620 --> 00:05:22,350
collections.

112
00:05:22,350 --> 00:05:25,210
And these are provided by the
underscore library, the same

113
00:05:25,210 --> 00:05:27,115
one that gives us our
template function.

114
00:05:31,630 --> 00:05:34,420
And that's about it
for level five.

115
00:05:34,420 --> 00:05:36,200
Have some fun in the
challenge area.

116
00:05:36,200 --> 00:05:38,720
We'll see you back here for
level six when we talk about

117
00:05:38,720 --> 00:05:40,510
collections and views
together.

118
00:05:40,510 --> 00:05:40,810
[MUSIC PLAYING]