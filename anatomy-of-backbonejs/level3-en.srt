1
00:00:00,000 --> 00:00:00,145
[MUSIC PLAYING]

2
00:00:00,145 --> 00:00:02,900
-Your client-side JavaScript
is starting to mold.

3
00:00:02,900 --> 00:00:06,550
It's starting to resemble
a bad spaghetti code.

4
00:00:06,550 --> 00:00:10,170
And it is time to add structure
but it won't take too long.

5
00:00:10,170 --> 00:00:13,590
Gotta get your truth
out of the DOM.

6
00:00:13,590 --> 00:00:16,610
Take your data into models
and you cannot lose.

7
00:00:16,610 --> 00:00:20,465
We'll render out your models
with the help of the views.

8
00:00:20,465 --> 00:00:23,260
And if you don't want your
JavaScript to end up like a

9
00:00:23,260 --> 00:00:26,340
mess, it's time for
the Anatomy of

10
00:00:26,340 --> 00:00:30,580
Backbone.js at Code School.

11
00:00:30,580 --> 00:00:33,870
[END MUSIC]

12
00:00:33,870 --> 00:00:36,160
You're watching The Anatomy of
Backbone, and this is level

13
00:00:36,160 --> 00:00:39,450
three where we're going to take
a closer look at views.

14
00:00:39,450 --> 00:00:43,630
So here, let's define a 
SimpleView class, nothing in it.

15
00:00:43,630 --> 00:00:46,200
Now, let's define an instance
from that class.

16
00:00:46,200 --> 00:00:49,470
And at this point, if we print
out to the console the el

17
00:00:49,470 --> 00:00:53,290
property, we're going to see
that it's simply a blank div.

18
00:00:53,290 --> 00:00:57,620
Remember, by default, that
el is just a div.

19
00:00:57,620 --> 00:00:59,670
Every view has a top
level element.

20
00:00:59,670 --> 00:01:02,540
If we want to change that top
level element, we can specify

21
00:01:02,540 --> 00:01:04,849
the tag name when we
define the class.

22
00:01:04,849 --> 00:01:06,820
Here, we're setting the
tag name to li.

23
00:01:06,820 --> 00:01:11,580
So when we print out the
el, we get a blank li.

24
00:01:11,580 --> 00:01:15,120
That tag name can be any HTML
element that you want.

25
00:01:15,120 --> 00:01:19,380
It could be an li, it could be
an unordered list. It could be

26
00:01:19,380 --> 00:01:23,400
a section or an article
or a footer.

27
00:01:23,400 --> 00:01:25,790
Now, let's jump back to our
TodoView where we're going

28
00:01:25,790 --> 00:01:29,500
to set its tag name equal to
an article, its ID equal to

29
00:01:29,500 --> 00:01:33,010
todo-view, and its class
name equal to todo.

30
00:01:33,010 --> 00:01:35,660
If we printed out the el
property, it would look

31
00:01:35,660 --> 00:01:38,260
something like this.

32
00:01:38,260 --> 00:01:40,510
If we were using the jQuery
framework with Backbone-- and

33
00:01:40,510 --> 00:01:44,350
you don't have to, but
you most likely are--

34
00:01:44,350 --> 00:01:47,700
and we want to get the HTML from
our todoView, one way we

35
00:01:47,700 --> 00:01:50,180
could do it is by calling this
function you see here.

36
00:01:50,180 --> 00:01:52,880
However, there's a better
way to do in Backbone.

37
00:01:52,880 --> 00:01:54,990
That el is a DOM Element.

38
00:01:54,990 --> 00:01:58,400
So we can wrap that in the
jQuery function and simply

39
00:01:58,400 --> 00:02:00,970
call .html on it.

40
00:02:00,970 --> 00:02:02,870
Backbone actually gives
us a better sort of

41
00:02:02,870 --> 00:02:04,300
shortcut to do this.

42
00:02:04,300 --> 00:02:08,550
We can call simply
todoView.$el.html.

43
00:02:08,550 --> 00:02:09,440

44
00:02:09,440 --> 00:02:13,070
This is good because that el--
we don't know what the ID's

45
00:02:13,070 --> 00:02:13,610
going to be.

46
00:02:13,610 --> 00:02:16,940
What we construct out of our
view might be dynamic.

47
00:02:16,940 --> 00:02:20,990
So it's much better to
simply use this.

48
00:02:20,990 --> 00:02:23,460
Let's take a look at the view
code that you saw back in

49
00:02:23,460 --> 00:02:25,660
level one that looks something
like this.

50
00:02:25,660 --> 00:02:27,920
Hopefully, it makes a little
more sense this time

51
00:02:27,920 --> 00:02:28,840
you're seeing it.

52
00:02:28,840 --> 00:02:32,120
To construct your HTML, we
called the render function,

53
00:02:32,120 --> 00:02:35,000
then we called
console.log(todoView.el) and

54
00:02:35,000 --> 00:02:37,200
it printed out Pick up milk.

55
00:02:37,200 --> 00:02:40,220
Let's revise the class
definition a little bit, first

56
00:02:40,220 --> 00:02:43,220
adding the tag name,
ID, and class name.

57
00:02:43,220 --> 00:02:45,280
You can see we're wrapping
with the el with a jQuery

58
00:02:45,280 --> 00:02:47,770
function, and we just learned
there's a shortcut for this,

59
00:02:47,770 --> 00:02:50,160
so let's modify it
accordingly.

60
00:02:50,160 --> 00:02:53,430
To generate the HTML from our
view, we just call the render

61
00:02:53,430 --> 00:02:55,430
function and we can
print out the el

62
00:02:55,430 --> 00:02:56,680
property to the console.

63
00:02:56,680 --> 00:02:59,220

64
00:02:59,220 --> 00:03:02,590
We're generating our view HTML
by simply creating a variable

65
00:03:02,590 --> 00:03:05,930
with all of our HTML, we're
appending it all together.

66
00:03:05,930 --> 00:03:09,570
And you can imagine, if we had
a lot of HTML and a lot of

67
00:03:09,570 --> 00:03:12,420
attributes we were printing out
inside of it, it would get

68
00:03:12,420 --> 00:03:15,280
really hairy and ugly.

69
00:03:15,280 --> 00:03:18,630
We can organize that by using
some sort of client-side

70
00:03:18,630 --> 00:03:20,460
templating framework.

71
00:03:20,460 --> 00:03:22,410
Backbone comes with
the underscore

72
00:03:22,410 --> 00:03:24,110
library for doing this.

73
00:03:24,110 --> 00:03:26,230
Not that the underscore
library's just for templating,

74
00:03:26,230 --> 00:03:29,070
the underscore library actually
is a big utility

75
00:03:29,070 --> 00:03:32,600
library that gives us some great
stuff, one of which is

76
00:03:32,600 --> 00:03:34,290
the templating function.

77
00:03:34,290 --> 00:03:37,500
To use the underscore library,
we just use the underscore and

78
00:03:37,500 --> 00:03:39,740
we're going to use the template
function and send in

79
00:03:39,740 --> 00:03:42,550
the string which is
our _template.

80
00:03:42,550 --> 00:03:44,940
Then inside of our render
function, we're going to

81
00:03:44,940 --> 00:03:47,330
create the attributes variable,
setting that equal

82
00:03:47,330 --> 00:03:49,230
to the JSON from our model.

83
00:03:49,230 --> 00:03:51,420
To render the template, we
just call the template

84
00:03:51,420 --> 00:03:54,100
function and send in
those attributes.

85
00:03:54,100 --> 00:03:57,250
Then if we render out the HTML
just like we did before, we'll

86
00:03:57,250 --> 00:03:59,340
get the same result, this
time using a template.

87
00:03:59,340 --> 00:04:02,510

88
00:04:02,510 --> 00:04:05,630
Although the Underscore.js
library comes with Backbone,

89
00:04:05,630 --> 00:04:08,010
that doesn't have to be what
you use for client-side

90
00:04:08,010 --> 00:04:09,120
templating.

91
00:04:09,120 --> 00:04:11,610
We could also use Mustache.js.

92
00:04:11,610 --> 00:04:13,320
It might look something
like this.

93
00:04:13,320 --> 00:04:15,020
We could use Haml.js.

94
00:04:15,020 --> 00:04:19,370
We could also use Eco or any
other templating library.

95
00:04:19,370 --> 00:04:20,260
But here's our template.

96
00:04:20,260 --> 00:04:23,230
And we want to make it so that
when somebody clicks on that

97
00:04:23,230 --> 00:04:25,950
h3, it pops up an alert.

98
00:04:25,950 --> 00:04:28,650
If we were to do this in
jQuery, it might look

99
00:04:28,650 --> 00:04:32,070
something like this where we
set a click listener on h3,

100
00:04:32,070 --> 00:04:34,650
which will call the alert
status function.

101
00:04:34,650 --> 00:04:36,520
However, this is typically
not how we do

102
00:04:36,520 --> 00:04:38,390
DOM events in Backbone.

103
00:04:38,390 --> 00:04:41,410
You see, in Backbone, views are
responsible for responding

104
00:04:41,410 --> 00:04:43,490
to any UI interaction.

105
00:04:43,490 --> 00:04:47,540
So these events are defined
inside of our views like so.

106
00:04:47,540 --> 00:04:49,990
Instead of our view class
definition, we

107
00:04:49,990 --> 00:04:52,270
have an events object.

108
00:04:52,270 --> 00:04:56,640
We specify that when the h3
element is clicked, call the

109
00:04:56,640 --> 00:04:58,510
alert status method.

110
00:04:58,510 --> 00:05:00,530
We then define the alert
status function

111
00:05:00,530 --> 00:05:01,860
inside of the view.

112
00:05:01,860 --> 00:05:03,430
Now, you're probably wondering,
is this alert going

113
00:05:03,430 --> 00:05:06,700
to pop up whenever I click
on any h3 on my page?

114
00:05:06,700 --> 00:05:08,040
Well, no.

115
00:05:08,040 --> 00:05:09,700
Backbone's smarter than that.

116
00:05:09,700 --> 00:05:12,375
If you looked inside of a
Backbone code, you would see

117
00:05:12,375 --> 00:05:16,500
that that h3 event is
scoped to inside of

118
00:05:16,500 --> 00:05:17,895
this particular element.

119
00:05:17,895 --> 00:05:20,590
It's actually calling the
jQuery delegate method.

120
00:05:20,590 --> 00:05:25,410
So that means inside of this
element if there's any h3s

121
00:05:25,410 --> 00:05:28,400
when they're clicked, call
the alert status.

122
00:05:28,400 --> 00:05:30,560
Now, let's take a look at
a more complex event

123
00:05:30,560 --> 00:05:31,650
declaration.

124
00:05:31,650 --> 00:05:34,630
Here, we have a 
DocumentView class.

125
00:05:34,630 --> 00:05:38,300
Inside there, you can see I'm
defining multiple events.

126
00:05:38,300 --> 00:05:40,020
At the top of event,
you'll notice it

127
00:05:40,020 --> 00:05:43,140
doesn't have any selector.

128
00:05:43,140 --> 00:05:45,500
As you can imagine with the code
that we saw previously,

129
00:05:45,500 --> 00:05:48,190
what that means is if I double
click anywhere inside of this

130
00:05:48,190 --> 00:05:51,450
element, it's going to call
the open function.

131
00:05:51,450 --> 00:05:54,490
The format of events looks
something like this.

132
00:05:54,490 --> 00:05:58,100
We specify an event, we specify
a selector, and then

133
00:05:58,100 --> 00:06:00,470
the function to call.

134
00:06:00,470 --> 00:06:03,090
If you're using jQuery, here are
all the different events

135
00:06:03,090 --> 00:06:04,340
that you could listen to.

136
00:06:04,340 --> 00:06:07,910

137
00:06:07,910 --> 00:06:10,960
Remember, you can always create
custom events at the

138
00:06:10,960 --> 00:06:15,916
model level or even at the view
level. That about wraps up

139
00:06:15,916 --> 00:06:17,350
this level.

140
00:06:17,350 --> 00:06:20,840
So have some fun with the
challenges and Eric Allam will

141
00:06:20,840 --> 00:06:22,290
meet you on level four.

142
00:06:22,290 --> 00:06:25,322
