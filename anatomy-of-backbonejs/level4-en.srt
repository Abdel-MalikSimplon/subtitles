1
00:00:00,000 --> 00:00:00,280
[SONG PLAYING]

2
00:00:00,280 --> 00:00:02,895
Your client-side JavaScript
is starting to mold.

3
00:00:02,895 --> 00:00:06,550
It's starting to resemble
a bad spaghetti code.

4
00:00:06,550 --> 00:00:09,090
And it is time to add
structure, but it

5
00:00:09,090 --> 00:00:10,160
won't take too long.

6
00:00:10,160 --> 00:00:13,580
Gotta get your truth
out of the DOM.

7
00:00:13,580 --> 00:00:17,290
Take your data into models
and you cannot lose.

8
00:00:17,290 --> 00:00:20,465
We'll render out your models
with the help of the views.

9
00:00:20,465 --> 00:00:22,910
And if you don't want your
JavaScript to end up like a

10
00:00:22,910 --> 00:00:26,410
mess, it's time for the Anatomy

11
00:00:26,410 --> 00:00:31,776
Backbone.js at code school.

12
00:00:31,776 --> 00:00:35,600
[MUSIC PLAYING]

13
00:00:35,600 --> 00:00:38,290
You're watching the Anatomy
of Backbone.js.

14
00:00:38,290 --> 00:00:39,400
My name is Eric Allam.

15
00:00:39,400 --> 00:00:43,030
And in this level we're going
to be going over Level 4:

16
00:00:43,030 --> 00:00:45,990
Models and Views and how they
work together in a little bit

17
00:00:45,990 --> 00:00:47,180
more detail.

18
00:00:47,180 --> 00:00:51,110
So let's review our model view
that Greg developed for us in

19
00:00:51,110 --> 00:00:52,450
the last level.

20
00:00:52,450 --> 00:00:54,620
As you can see, we have
our template here.

21
00:00:54,620 --> 00:00:56,340
And we have our render
function.

22
00:00:56,340 --> 00:00:59,540
And we can define a new instance
of that view passing

23
00:00:59,540 --> 00:01:03,380
in the model, render it, and
then when we look at the

24
00:01:03,380 --> 00:01:06,750
output of the element, we'll
have just simple

25
00:01:06,750 --> 00:01:08,610
 with an h3

26
00:01:08,610 --> 00:01:12,700
So what if we wanted to add
a check box to this view?

27
00:01:12,700 --> 00:01:15,710
So we can change the template
and add a input of

28
00:01:15,710 --> 00:01:16,930
"type=checkbox".

29
00:01:16,930 --> 00:01:21,180
And we're also going to make
sure that if the status of our

30
00:01:21,180 --> 00:01:24,590
TodoItem is complete, we'll go
ahead and print ("checked").

31
00:01:24,590 --> 00:01:26,720
So our check box is checked.

32
00:01:26,720 --> 00:01:29,190
And then we'll finish off with
putting our description there

33
00:01:29,190 --> 00:01:30,300
like before.

34
00:01:30,300 --> 00:01:32,450
So we have our check
box in our view.

35
00:01:32,450 --> 00:01:34,900
But now we want to update
our model when

36
00:01:34,900 --> 00:01:36,590
that check box changes.

37
00:01:36,590 --> 00:01:38,270
So how do we do that?

38
00:01:38,270 --> 00:01:41,540
So if you remember this diagram
from Level 1, you can

39
00:01:41,540 --> 00:01:44,910
see that our models provide
the views with the data.

40
00:01:44,910 --> 00:01:46,650
And then it's the view's
responsibility

41
00:01:46,650 --> 00:01:48,240
to build the HTML.

42
00:01:48,240 --> 00:01:50,910
So we can also go
the other way.

43
00:01:50,910 --> 00:01:54,430
When a DOM event happens, it is
the view's responsibility

44
00:01:54,430 --> 00:01:57,340
to handle that and
update the model.

45
00:01:57,340 --> 00:01:59,290
Now that the model has
the new data, it

46
00:01:59,290 --> 00:02:00,860
can update the server.

47
00:02:00,860 --> 00:02:04,280
Now let's jump back into
our TodoView class and

48
00:02:04,280 --> 00:02:05,710
define a new event.

49
00:02:05,710 --> 00:02:09,419
Whenever an input inside of this
view changes, we want to

50
00:02:09,419 --> 00:02:12,440
call the toggleStatus function
which would look

51
00:02:12,440 --> 00:02:13,940
something like this.

52
00:02:13,940 --> 00:02:17,060
In our toggleStatus function
we have our model.

53
00:02:17,060 --> 00:02:19,540
And we want to check if
its status is already

54
00:02:19,540 --> 00:02:23,370
"incomplete." We'll set it to
"complete." And, otherwise,

55
00:02:23,370 --> 00:02:25,410
we'll set the status
to "incomplete."

56
00:02:25,410 --> 00:02:27,990
So as you can see, this isn't
the best code though.

57
00:02:27,990 --> 00:02:30,650
We have a lot of model
logic in our view.

58
00:02:30,650 --> 00:02:33,880
But we can fix that pretty
easily by a simple refactor.

59
00:02:33,880 --> 00:02:38,040
We'll update our view's
toggleStatus: function to call

60
00:02:38,040 --> 00:02:40,150
a model function of
the same name.

61
00:02:40,150 --> 00:02:45,630
So we need to go back into our
TodoItem model and define this

62
00:02:45,630 --> 00:02:46,300
toggleStatus: function.

63
00:02:46,300 --> 00:02:48,650
As you can see, it's doing
the exact same thing as

64
00:02:48,650 --> 00:02:50,220
it was in the view.

65
00:02:50,220 --> 00:02:52,840
Although now we don't have
to call this.model.

66
00:02:52,840 --> 00:02:55,430
We can just call this.get
and this.set.

67
00:02:55,430 --> 00:02:58,640
And now our code is better
because our model logic stays

68
00:02:58,640 --> 00:03:01,530
in the model and out
of the view.

69
00:03:01,530 --> 00:03:04,235
As you can imagine, we could
call the model's toggleStatus

70
00:03:04,235 --> 00:03:07,190
function from other places in
our app, and it would do the

71
00:03:07,190 --> 00:03:08,490
right thing.

72
00:03:08,490 --> 00:03:11,840
We want to sync this change to
the server whenever we call

73
00:03:11,840 --> 00:03:13,150
toggleStatus on the model.

74
00:03:13,150 --> 00:03:15,690
So there's a good place
to put our save call--

75
00:03:15,690 --> 00:03:19,780
which we'll do to PUT request
to the todos/ID,

76
00:03:19,780 --> 00:03:22,280
in this case 1.

77
00:03:22,280 --> 00:03:25,500
Let's say that whenever our
model status is complete, we

78
00:03:25,500 --> 00:03:28,110
want it to look like this with
a strike through and

79
00:03:28,110 --> 00:03:29,300
a light gray text.

80
00:03:29,300 --> 00:03:30,750
How do we do that?

81
00:03:30,750 --> 00:03:34,100
Our designer has given us some
CSS to make this happen.

82
00:03:34,100 --> 00:03:37,170
So to make this work, let's
change our template and add a

83
00:03:37,170 --> 00:03:39,360
class on to our h3

84
00:03:39,360 --> 00:03:42,830
And that class will be set to
whatever the model status is.

85
00:03:42,830 --> 00:03:46,530
Now whenever our model's status
is set to complete, our

86
00:03:46,530 --> 00:03:49,240
new styles will be applied
correctly.

87
00:03:49,240 --> 00:03:52,920
But how do we update our view
when the model changes like

88
00:03:52,920 --> 00:03:55,960
we've seen in the last
couple of slides?

89
00:03:55,960 --> 00:03:59,390
We could go back into the view's
toggleStatus function

90
00:03:59,390 --> 00:04:01,420
and just call render
after we've

91
00:04:01,420 --> 00:04:03,370
toggled the model's status.

92
00:04:03,370 --> 00:04:05,190
And that'll do what
we want, right?

93
00:04:05,190 --> 00:04:08,310
But what would happen if our
model changed somewhere else

94
00:04:08,310 --> 00:04:11,090
in our app, like in a sidebar
button that checked all

95
00:04:11,090 --> 00:04:12,340
of our items off?

96
00:04:12,340 --> 00:04:13,680
This wouldn't work.

97
00:04:13,680 --> 00:04:17,440
We need some way to notify our
view whenever the model

98
00:04:17,440 --> 00:04:19,405
changes and re-render.

99
00:04:19,405 --> 00:04:21,579
Does that sound familiar?

100
00:04:21,579 --> 00:04:25,320
We can use model events like
we saw in Level 2 to notify

101
00:04:25,320 --> 00:04:27,530
the view whenever our
model changes.

102
00:04:27,530 --> 00:04:31,410
And then, our view can re-render
and update the DOM.

103
00:04:31,410 --> 00:04:32,880
Let's see that in action.

104
00:04:32,880 --> 00:04:35,620
Back in our TodoView
class, let's add

105
00:04:35,620 --> 00:04:37,450
an initialize function.

106
00:04:37,450 --> 00:04:40,760
Now this function is going to
be called whenever a new

107
00:04:40,760 --> 00:04:43,340
instance of the TodoView
is created.

108
00:04:43,340 --> 00:04:45,700
Inside of this function
we can listen for any

109
00:04:45,700 --> 00:04:47,600
changes on the model.

110
00:04:47,600 --> 00:04:50,920
And when that change event is
triggered, we call the render

111
00:04:50,920 --> 00:04:53,030
function on the view.

112
00:04:53,030 --> 00:04:55,950
You might be wondering about
that third argument--

113
00:04:55,950 --> 00:04:59,250
the "this" we're passing
into the on function.

114
00:04:59,250 --> 00:05:01,730
Let's look at an example of
listening for the change event

115
00:05:01,730 --> 00:05:05,240
of the model without passing
in that third argument.

116
00:05:05,240 --> 00:05:07,970
And then we'll look at what
changes when we do pass in

117
00:05:07,970 --> 00:05:09,340
that third argument.

118
00:05:09,340 --> 00:05:10,920
So here's our render
function.

119
00:05:10,920 --> 00:05:15,300
As you can see, we're using the
keyword "this" inside of

120
00:05:15,300 --> 00:05:16,260
the function.

121
00:05:16,260 --> 00:05:21,720
What the "this" refers to is the
context of the function as

122
00:05:21,720 --> 00:05:23,020
it is called.

123
00:05:23,020 --> 00:05:26,570
As you can see, we're going to
want the "this" to point to

124
00:05:26,570 --> 00:05:28,610
our TodoView instance.

125
00:05:28,610 --> 00:05:30,520
And usually this isn't
a problem.

126
00:05:30,520 --> 00:05:33,320
But because of the way we listen
to the change event on

127
00:05:33,320 --> 00:05:37,440
the model, when that change
event is triggered, the

128
00:05:37,440 --> 00:05:39,820
render function is going
to be called with

129
00:05:39,820 --> 00:05:41,910
the incorrect context.

130
00:05:41,910 --> 00:05:46,130
In fact, it's going to be called
with the window context

131
00:05:46,130 --> 00:05:48,590
which is the global object.

132
00:05:48,590 --> 00:05:52,310
So now in our render function,
"this" will equal

133
00:05:52,310 --> 00:05:56,160
"window" which is obviously
not what we want.

134
00:05:56,160 --> 00:05:59,210
When we add that third argument
back in, its telling

135
00:05:59,210 --> 00:06:02,750
Backbone that when it triggers
the change event and calls the

136
00:06:02,750 --> 00:06:06,035
render function, it should set
the context of the render

137
00:06:06,035 --> 00:06:09,690
function to the todoView
instance.

138
00:06:09,690 --> 00:06:13,960
So when render is called, the
"this" will be set to the

139
00:06:13,960 --> 00:06:18,790
TodoView instance, and
thus will work.

140
00:06:18,790 --> 00:06:22,270
Just like we listened to the
model's change event and we

141
00:06:22,270 --> 00:06:26,100
re-rendered the view, we also
are going to want to listen to

142
00:06:26,100 --> 00:06:28,670
the model's destroy event
and remove the

143
00:06:28,670 --> 00:06:30,720
view from the document.

144
00:06:30,720 --> 00:06:34,150
To make this work, we have to
define the remove: function.

145
00:06:34,150 --> 00:06:38,470
And all that does is remove
the element from the view.

146
00:06:38,470 --> 00:06:40,610
Now let's watch this
in action.

147
00:06:40,610 --> 00:06:44,430
I've already rendered my
TodoView onto the page.

148
00:06:44,430 --> 00:06:47,610
And now I have my todoItem,
and I want to update it.

149
00:06:47,610 --> 00:06:51,090
And as you can see, we're
updating the description to

150
00:06:51,090 --> 00:06:54,230
"Pick up milk and cookies."
And when that

151
00:06:54,230 --> 00:06:56,780
gets submitted our

152
00:06:56,780 --> 00:06:58,470
DOM is updated.

153
00:06:58,470 --> 00:07:00,930
And now I just want to
destroy todoItem.

154
00:07:00,930 --> 00:07:04,064
And I want to see that go
away just like that.

155
00:07:04,064 --> 00:07:05,510
[MUSIC PLAYING]

156
00:07:05,510 --> 00:07:07,390
That about does it
for Level 4.

157
00:07:07,390 --> 00:07:08,720
Have fun in the challenge
area.

158
00:07:08,720 --> 00:07:10,830
And I'll see you back here
in Level 5 when we add

159
00:07:10,830 --> 00:07:11,730
collections.