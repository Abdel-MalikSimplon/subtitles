1
00:00:01,320 --> 00:00:03,670
So, we've done the simple
function, now let's try a more

2
00:00:03,670 --> 00:00:05,220
complex function.

3
00:00:05,220 --> 00:00:07,590
Let's make a function that
counts the E's in a

4
00:00:07,590 --> 00:00:09,530
user-entered phrase.

5
00:00:09,530 --> 00:00:12,740
We will combine the built-in
functions of Level 5 with our

6
00:00:12,740 --> 00:00:15,180
declared function of Level 6.

7
00:00:15,180 --> 00:00:17,040
Let's call our function
countE.

8
00:00:17,040 --> 00:00:19,750
And in this particular function,
we'll have no

9
00:00:19,750 --> 00:00:20,660
parameters.

10
00:00:20,660 --> 00:00:23,100
That often happens in
JavaScript code.

11
00:00:23,100 --> 00:00:25,010
The first thing we'll do in our
function is we'll ask the

12
00:00:25,010 --> 00:00:27,560
user for a phrase to check.

13
00:00:27,560 --> 00:00:31,220
And then if that particular
entry is invalid, the first

14
00:00:31,220 --> 00:00:34,300
thing we'll do is alert the
user, and then we would exit

15
00:00:34,300 --> 00:00:36,960
the function with a
failure report.

16
00:00:36,960 --> 00:00:39,040
As you know, we'll exit
the function by

17
00:00:39,040 --> 00:00:40,390
using the return keyword.

18
00:00:44,200 --> 00:00:47,130
Otherwise, if the entry is
valid, we'll go ahead and

19
00:00:47,130 --> 00:00:51,470
start counting the E's inside
the user's phrase.

20
00:00:51,470 --> 00:00:53,930
The first thing we'll do is
we'll make a counter variable

21
00:00:53,930 --> 00:00:56,020
for the E's.

22
00:00:56,020 --> 00:00:59,280
Then we'll have a for-loop that
goes over each character

23
00:00:59,280 --> 00:01:01,260
in the user's entry.

24
00:01:01,260 --> 00:01:04,910
If that particular character
is a capital E or an e, we

25
00:01:04,910 --> 00:01:08,480
will increment our E
counter variable.

26
00:01:08,480 --> 00:01:11,610
Finally, we'll alert the amount
of E's in the phrase

27
00:01:11,610 --> 00:01:16,350
and return a success
from the function.

28
00:01:16,350 --> 00:01:16,600
OK.

29
00:01:16,600 --> 00:01:18,512
So, let's start coding.

30
00:01:18,512 --> 00:01:21,620
We'll establish a variable
called phrase, and we'll

31
00:01:21,620 --> 00:01:24,950
assign to that the results of
a prompt function that asks,

32
00:01:24,950 --> 00:01:27,820
which phrase would you
like to examine?

33
00:01:27,820 --> 00:01:31,880
Then if that entry is valid,
we will know it because the

34
00:01:31,880 --> 00:01:34,930
phrase variable is a string.

35
00:01:34,930 --> 00:01:39,600
So we say, if the type of the
phrase is not a string, we

36
00:01:39,600 --> 00:01:43,790
will alert to the user that
that's not a valid entry and

37
00:01:43,790 --> 00:01:45,210
then return a false, which will

38
00:01:45,210 --> 00:01:46,730
instantly exit the function.

39
00:01:49,230 --> 00:01:52,060
Our "otherwise" becomes an Else,
which is where we will

40
00:01:52,060 --> 00:01:54,770
actually count the E's.

41
00:01:54,770 --> 00:01:57,160
So first of all, we'll establish
a variable called

42
00:01:57,160 --> 00:02:00,450
eCount that gets set to the
value zero because we don't know

43
00:02:00,450 --> 00:02:03,360
how many E's are
in our phrase.

44
00:02:03,360 --> 00:02:06,230
Then we'll make a For loop,
which will start at the very

45
00:02:06,230 --> 00:02:09,539
first index of the phrase,
proceed all the way through

46
00:02:09,539 --> 00:02:12,900
all the characters of the
phrase, incrementing the index

47
00:02:12,900 --> 00:02:15,760
through each loop.

48
00:02:15,760 --> 00:02:18,620
Inside the loop, we'll have
a complex conditional -

49
00:02:18,620 --> 00:02:19,780
remember those? -

50
00:02:19,780 --> 00:02:23,440
where we check to see if the
character at the current index

51
00:02:23,440 --> 00:02:28,430
we're looking at is either a
lowercase e or whether that

52
00:02:28,430 --> 00:02:32,450
character is a capital E. And
if that is true, if we get a

53
00:02:32,450 --> 00:02:35,030
truth value out of that complex
conditional, we'll go

54
00:02:35,030 --> 00:02:38,380
ahead and increase the
eCount variable.

55
00:02:38,380 --> 00:02:41,530
Once that loop is entirely
complete, we will have in our

56
00:02:41,530 --> 00:02:45,480
hands the amount of E's in that
phrase, and we can tell

57
00:02:45,480 --> 00:02:49,480
the user, with an alert method,
there are however many

58
00:02:49,480 --> 00:02:51,850
E's in that phrase.

59
00:02:51,850 --> 00:02:54,510
Then we can return
true, which will

60
00:02:54,510 --> 00:02:56,150
instantly exit the function.

61
00:03:00,480 --> 00:03:02,220
So, let's see this in action.

62
00:03:02,220 --> 00:03:05,880
So now, if we were to call our
countE function, notice with

63
00:03:05,880 --> 00:03:08,800
no parameters, we would get a
small pop-up window from our

64
00:03:08,800 --> 00:03:10,420
website that says, "Which phrase

65
00:03:10,420 --> 00:03:11,880
would you like to examine?"

66
00:03:11,880 --> 00:03:15,150
So, let's do "Excellent elephants",
which has a few E's

67
00:03:15,150 --> 00:03:16,640
in it as you can see.

68
00:03:16,640 --> 00:03:19,140
Once we've entered that phrase,
the countE function

69
00:03:19,140 --> 00:03:22,880
will proceed, and we will find
that there are five E's in

70
00:03:22,880 --> 00:03:24,130
"excellent elephants".

71
00:03:27,180 --> 00:03:29,400
Now let's take a little bit
closer look at how that works

72
00:03:29,400 --> 00:03:30,440
internally.

73
00:03:30,440 --> 00:03:33,170
So, if we want to trace our
E-counter, we know that we're

74
00:03:33,170 --> 00:03:34,930
going to start at index zero.

75
00:03:34,930 --> 00:03:37,240
The first thing that will
happen is that we check

76
00:03:37,240 --> 00:03:40,020
whether the index is less than
the length to make sure that

77
00:03:40,020 --> 00:03:42,500
we don't go over the
edge of the string.

78
00:03:42,500 --> 00:03:45,920
For index zero, of course, that's
true, and the character at

79
00:03:45,920 --> 00:03:47,890
that index is a capital E.

80
00:03:47,890 --> 00:03:51,920
So when we ask the question, is
the character at that index

81
00:03:51,920 --> 00:03:55,350
a capital E or a lowercase e, we
get a truth value from our

82
00:03:55,350 --> 00:03:58,240
complex conditional, and
so our eCount is

83
00:03:58,240 --> 00:04:00,640
instantly turned to one.

84
00:04:00,640 --> 00:04:03,940
As the loop continues, this
procedure will occur for every

85
00:04:03,940 --> 00:04:07,320
character, including spaces
and punctuation.

86
00:04:07,320 --> 00:04:10,830
And when we finally get to the
index that is just past the

87
00:04:10,830 --> 00:04:13,850
end of the string, we'll get
a false value from the loop

88
00:04:13,850 --> 00:04:16,040
condition and stop the loop.

89
00:04:16,040 --> 00:04:18,764
The function will instantly
return a eCount of 5.

90
00:04:22,089 --> 00:04:25,090
So, now that we've tackled a more
complex function, we will

91
00:04:25,090 --> 00:04:28,980
wrap up our function level with
an examination of local

92
00:04:28,980 --> 00:04:32,790
and global scope inside
JavaScript.

93
00:04:32,790 --> 00:04:35,810
Let's say we've got a program,
and the program has some

94
00:04:35,810 --> 00:04:38,560
variables, and it also has
a couple functions.

95
00:04:38,560 --> 00:04:42,200
You can see our variables are x
and y, and our functions are

96
00:04:42,200 --> 00:04:45,540
add, and lower, subtract.

97
00:04:45,540 --> 00:04:49,180
Now, here in this space, in the
main program, the scope is

98
00:04:49,180 --> 00:04:53,060
called global, which means that
variables declared there

99
00:04:53,060 --> 00:04:56,520
are potentially accessible from
any place, even within

100
00:04:56,520 --> 00:04:58,670
the functions below.

101
00:04:58,670 --> 00:05:03,060
Inside the functions, the scope
is called local, and all

102
00:05:03,060 --> 00:05:06,250
of the variables that are
declared inside the functions

103
00:05:06,250 --> 00:05:09,790
are only contained within
those functions.

104
00:05:09,790 --> 00:05:13,790
You can think of global and
local scope as being like the

105
00:05:13,790 --> 00:05:17,880
global planet Earth having many
nations, and within each

106
00:05:17,880 --> 00:05:20,660
of the nation's, they have their
own government and their

107
00:05:20,660 --> 00:05:23,890
own way of doing things.

108
00:05:23,890 --> 00:05:25,890
An important thing to know about
functions is that they

109
00:05:25,890 --> 00:05:29,900
will always create a
new local scope.

110
00:05:29,900 --> 00:05:32,540
The variables that are declared
inside of a function

111
00:05:32,540 --> 00:05:35,470
will stay in that function.

112
00:05:35,470 --> 00:05:38,060
So, let's take a look at this
tiny snippet of code here,

113
00:05:38,060 --> 00:05:41,350
where we outside the function
declare a variable and set it

114
00:05:41,350 --> 00:05:42,850
equal to six.

115
00:05:42,850 --> 00:05:48,210
But then, inside a new function
add, we rename a new

116
00:05:48,210 --> 00:05:52,690
variable x and set it equal to
the parameters a plus b.

117
00:05:52,690 --> 00:05:57,290
So, you can see that I've got a
variable keyword on that x.

118
00:05:57,290 --> 00:06:01,100
When that happens in a local
scope, an entirely new

119
00:06:01,100 --> 00:06:06,070
variable is created with the
name x that is only accessible

120
00:06:06,070 --> 00:06:09,130
to the function block for add.

121
00:06:09,130 --> 00:06:11,740
So, here you can see that if we
called the add function and

122
00:06:11,740 --> 00:06:16,950
passed in the values nine and tw,
add itself would return 11.

123
00:06:16,950 --> 00:06:20,650
But then if we logged out
the variable x, we

124
00:06:20,650 --> 00:06:22,620
would still get six.

125
00:06:22,620 --> 00:06:26,110
And that's because the internal
variable x that got

126
00:06:26,110 --> 00:06:30,420
set equal to a plus b did not
modify the variable that's on

127
00:06:30,420 --> 00:06:33,070
the outside of the function.

128
00:06:33,070 --> 00:06:37,000
In JavaScript, however, we need
to be careful because if

129
00:06:37,000 --> 00:06:41,370
we don't declare the variable x,
JavaScript thinks that you

130
00:06:41,370 --> 00:06:46,870
mean the global variable on the
outside of the function.

131
00:06:46,870 --> 00:06:49,910
So you can see in this second
snippet of code that we've

132
00:06:49,910 --> 00:06:52,640
still got our variable x
declared outside the function.

133
00:06:52,640 --> 00:06:57,020
But inside, we no longer have
declared a new variable x, and

134
00:06:57,020 --> 00:07:00,180
instead, just used the name x.

135
00:07:00,180 --> 00:07:02,600
So, you can see here that if
we actually called the add

136
00:07:02,600 --> 00:07:05,780
function this time with nine and two,
yes, the add function would

137
00:07:05,780 --> 00:07:10,740
return 11, but when we log out
the x variable, its value has

138
00:07:10,740 --> 00:07:13,460
been changed to 11.

139
00:07:13,460 --> 00:07:16,080
It's always important to
declare your variables

140
00:07:16,080 --> 00:07:18,920
carefully and know the
relationship between the local

141
00:07:18,920 --> 00:07:20,350
and global scopes
in JavaScript.

142
00:07:24,000 --> 00:07:27,630
So, coming back to our earlier
program, if our program had

143
00:07:27,630 --> 00:07:31,700
the variables x and y and the
functions add and subtract, we

144
00:07:31,700 --> 00:07:34,270
know that the add function would
create its own local

145
00:07:34,270 --> 00:07:37,330
scope with the parameters
a, which is local to the

146
00:07:37,330 --> 00:07:41,060
function, and b, which is also
local to the function.

147
00:07:41,060 --> 00:07:44,310
Then inside that add function,
we would have a variable

148
00:07:44,310 --> 00:07:48,050
called x that would be local
as well to the function.

149
00:07:48,050 --> 00:07:50,510
Now take a look at the
subtract function.

150
00:07:50,510 --> 00:07:55,190
It also has local parameters a
and b, but when it uses the

151
00:07:55,190 --> 00:08:00,620
variable y, it is the global
variable y that it modifies.

152
00:08:00,620 --> 00:08:02,270
How can we tell that
in the code?

153
00:08:02,270 --> 00:08:04,630
There is no variable
keyword next to

154
00:08:04,630 --> 00:08:06,470
the y inside of subtract.

155
00:08:09,600 --> 00:08:11,810
Now we release you to
the challenges.

156
00:08:11,810 --> 00:08:15,600
See you back for
the last level.

157
00:08:15,600 --> 00:08:19,130
JavaScript word-trippers,
you are here.

158
00:08:19,130 --> 00:08:21,080
We will wrap up our
function lebel -

159
00:08:21,080 --> 00:08:22,450
lebel.

160
00:08:22,450 --> 00:08:24,620
Oh, o's ...

161
00:08:24,620 --> 00:08:25,820
Look at that horrible [BLEEP]

162
00:08:25,820 --> 00:08:27,070
on the bottom.

