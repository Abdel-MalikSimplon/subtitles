1
00:00:00,280 --> 00:00:00,373
[SINGING]

2
00:00:00,373 --> 00:00:04,230
From the Labyrinth of Loops to
the Variable Valley, we'll see

3
00:00:04,230 --> 00:00:05,630
the Cliffs of Value first.

4
00:00:05,630 --> 00:00:07,070
JavaScript's right
up your alley.

5
00:00:07,070 --> 00:00:10,490
Built-ins Bluff, Files Falls,
Array Archipelago.

6
00:00:10,490 --> 00:00:12,680
Declarations in a desert,
where you'll find out

7
00:00:12,680 --> 00:00:13,670
how far you'll go.

8
00:00:13,670 --> 00:00:15,320
Learn to program.
Take a ride.

9
00:00:15,320 --> 00:00:16,840
Buy a ticket. Step inside.

10
00:00:16,840 --> 00:00:17,662
All aboard,

11
00:00:17,662 --> 00:00:20,070
you're at the station to
increase your education.

12
00:00:20,070 --> 00:00:20,550
Bon voyage

13
00:00:20,550 --> 00:00:23,300
and skinny dip! As long as
functions you don't skip, on

14
00:00:23,300 --> 00:00:27,700
this the JavaScript Road Trip.

15
00:00:31,660 --> 00:00:32,830
So that was Level 2.

16
00:00:32,830 --> 00:00:34,390
Conditionals are pretty
cool, huh?

17
00:00:34,390 --> 00:00:36,670
And another cool thing about
the JavaScript language is

18
00:00:36,670 --> 00:00:38,940
that it has tons of built-in
functions that you

19
00:00:38,940 --> 00:00:39,820
can use at any time.

20
00:00:39,820 --> 00:00:41,760
You can call them whenever
you want.

21
00:00:41,760 --> 00:00:44,950
And we're going to look at a few
of those in this Level 3:

22
00:00:44,950 --> 00:00:46,200
Built-ins Bluff.

23
00:00:50,180 --> 00:00:52,750
Let's take a look at some
existing JavaScript functions

24
00:00:52,750 --> 00:00:56,090
that you can use to get and send
information from the user

25
00:00:56,090 --> 00:00:57,850
of your website.

26
00:00:57,850 --> 00:01:00,980
The first on we'll take
a look at is alert.

27
00:01:00,980 --> 00:01:04,060
This will send a message to the
user of your website in a

28
00:01:04,060 --> 00:01:06,060
small pop-up window.

29
00:01:06,060 --> 00:01:08,900
You can see here that when we
call the alert function, we've

30
00:01:08,900 --> 00:01:12,850
placed a string inside of a set
of parentheses that will

31
00:01:12,850 --> 00:01:14,670
get alerted to the user.

32
00:01:14,670 --> 00:01:18,190
But you can put any expression
inside these parentheses that

33
00:01:18,190 --> 00:01:21,390
will be evaluated and then
presented to the user.

34
00:01:21,390 --> 00:01:24,780
Once the alert function is
evaluated, a small pop-up

35
00:01:24,780 --> 00:01:27,420
window is present in the browser
that the user can

36
00:01:27,420 --> 00:01:30,315
click OK on, acknowledging that
they have seen the alert.

37
00:01:33,960 --> 00:01:36,800
Another built-in in function
is the confirm function.

38
00:01:36,800 --> 00:01:40,050
It asks users for a consent
to move forward

39
00:01:40,050 --> 00:01:42,100
with a specific action.

40
00:01:42,100 --> 00:01:45,020
Here we're using the confirm
function to make sure that a

41
00:01:45,020 --> 00:01:47,303
passenger wants to
ride Train 8.

42
00:01:47,303 --> 00:01:50,320
A small window appears when
the confirmed function is

43
00:01:50,320 --> 00:01:52,710
evaluated, presenting the user
with the opportunity

44
00:01:52,710 --> 00:01:56,140
to say "OK" or "Cancel."

45
00:01:56,140 --> 00:01:59,260
If the user actually hits OK,
the confirm function is going

46
00:01:59,260 --> 00:02:01,790
to return a true
Boolean value.

47
00:02:01,790 --> 00:02:07,060
If they hit Cancel, we'll get
a false Boolean value.

48
00:02:07,060 --> 00:02:10,130
Yet another built-in function is
called the prompt function.

49
00:02:10,130 --> 00:02:12,720
This will send a message
to the user and

50
00:02:12,720 --> 00:02:14,900
also retrieve an entry.

51
00:02:14,900 --> 00:02:17,490
So, here we've got a prompt
function that says, "What soul

52
00:02:17,490 --> 00:02:20,420
hath allowed the canines
to exit?"

53
00:02:20,420 --> 00:02:23,370
And the user appropriately
responds, "Woof, woof, woof,

54
00:02:23,370 --> 00:02:27,590
woof," and then hits "OK" to say,
yes, that is acceptable.

55
00:02:30,930 --> 00:02:33,310
Prompt is a cool function,
because you can request

56
00:02:33,310 --> 00:02:36,910
information from the user and
then store it in a variable.

57
00:02:36,910 --> 00:02:39,500
Here you can see a prompt
function that requests the

58
00:02:39,500 --> 00:02:40,490
user's name,

59
00:02:40,490 --> 00:02:44,300
and that name gets stored inside
the variable userName.

60
00:02:44,300 --> 00:02:46,930
When we run this code, a small
window will pop up in the

61
00:02:46,930 --> 00:02:47,860
internet browser.

62
00:02:47,860 --> 00:02:51,140
And the user can enter their
name in the field that's

63
00:02:51,140 --> 00:02:52,580
inside the window.

64
00:02:52,580 --> 00:02:55,060
So, if code school professor Gregg
Pollack was sitting at

65
00:02:55,060 --> 00:02:58,870
our website and entered his name
into our prompt window,

66
00:02:58,870 --> 00:03:01,500
his name would get stored in
the userName variable.

67
00:03:01,500 --> 00:03:03,000
We could then call
that variable,

68
00:03:03,000 --> 00:03:04,350
and his name would
be returned.

69
00:03:07,710 --> 00:03:10,160
Now, let's see how the confirm
and the prompt methods can

70
00:03:10,160 --> 00:03:12,520
work together to ensure
we have correct

71
00:03:12,520 --> 00:03:14,600
information from the user.

72
00:03:14,600 --> 00:03:16,900
If we're prompted,
"Yo, passenger!

73
00:03:16,900 --> 00:03:17,880
What's your name?"

74
00:03:17,880 --> 00:03:21,320
And Gregg enters his name
and selects "OK."

75
00:03:21,320 --> 00:03:23,320
His name will be stored in
the userName variable.

76
00:03:23,320 --> 00:03:26,400
And then we can use the userName
variable inside of a

77
00:03:26,400 --> 00:03:29,410
confirm function to
ensure that he has

78
00:03:29,410 --> 00:03:31,940
entered his name correctly.

79
00:03:31,940 --> 00:03:34,390
A small window will pop up in
the internet browser and ask

80
00:03:34,390 --> 00:03:36,750
Gregg if he's sure that
that's his name.

81
00:03:36,750 --> 00:03:39,770
And he can say "OK" for yes
or "Cancel" for no.

82
00:03:39,770 --> 00:03:40,280
But wait a minute.

83
00:03:40,280 --> 00:03:43,550
What happens if Gregg presses
"Cancel" on either the prompt or

84
00:03:43,550 --> 00:03:44,740
the confirm?

85
00:03:44,740 --> 00:03:48,730
We need a way of verifying
whether he has actually

86
00:03:48,730 --> 00:03:51,980
inputted something for his name
and then whether his name

87
00:03:51,980 --> 00:03:55,080
is correct, or not, in
the confirm box.

88
00:03:55,080 --> 00:03:57,030
To do that, we'll need
the type of operator.

89
00:04:00,080 --> 00:04:04,260
The type of operator allows us
identify the kind, or type, of

90
00:04:04,260 --> 00:04:08,710
course, of value inside a
variable or an expression.

91
00:04:08,710 --> 00:04:13,120
Here you can see that if we
take the typeof true as an

92
00:04:13,120 --> 00:04:16,630
entry, we get Boolean as a
response, because true is a

93
00:04:16,630 --> 00:04:18,089
Boolean value.

94
00:04:18,089 --> 00:04:23,090
If we do typeof that's not a
valid entry, we get a string,

95
00:04:23,090 --> 00:04:27,000
because the expression that
follows typeof is a string.

96
00:04:27,000 --> 00:04:30,390
typeof 42 will return number.

97
00:04:30,390 --> 00:04:34,680
And typeof undefined will return
the type undefined,

98
00:04:34,680 --> 00:04:36,840
which is its own type.

99
00:04:36,840 --> 00:04:40,220
And typeof null, which is
special, and we'll need it

100
00:04:40,220 --> 00:04:43,640
soon, returns an object
as a type.

101
00:04:47,180 --> 00:04:50,070
The typeof operator is useful
in checking a variable's

102
00:04:50,070 --> 00:04:51,930
contents, very useful here.

103
00:04:51,930 --> 00:04:54,490
You can see that if we prompted,
"Yo, passenger!

104
00:04:54,490 --> 00:04:55,390
What's your name?"

105
00:04:55,390 --> 00:04:58,590
And we stored that in the
variable userName, now, if the

106
00:04:58,590 --> 00:05:01,470
user ever selects cancel,
regardless of whether they've

107
00:05:01,470 --> 00:05:04,680
input anything into the field,
prompt will return a special

108
00:05:04,680 --> 00:05:06,470
value called null.

109
00:05:06,470 --> 00:05:08,920
And null is not a string.

110
00:05:08,920 --> 00:05:12,760
So now, if we were to take the
typeof of userName, which had

111
00:05:12,760 --> 00:05:15,810
a value of null, we would
get a return from

112
00:05:15,810 --> 00:05:18,180
the typeof of object.

113
00:05:18,180 --> 00:05:21,950
That's because null is a generic
JavaScript object.

114
00:05:21,950 --> 00:05:24,610
This is really cool and useful,
because then we can

115
00:05:24,610 --> 00:05:28,550
alert the user that they have
not entered a valid entry.

116
00:05:28,550 --> 00:05:32,280
We can do that by saying, if
the typeof the userName

117
00:05:32,280 --> 00:05:36,090
variable is not a string, uh-oh,
whoops, you didn't

118
00:05:36,090 --> 00:05:37,350
enter your name.

119
00:05:37,350 --> 00:05:40,510
And then we can start that cycle
over to make sure that

120
00:05:40,510 --> 00:05:41,965
they have entered something
acceptable.

121
00:05:45,360 --> 00:05:47,605
Now that we know how to handle
a cancel from a prompt

122
00:05:47,605 --> 00:05:49,580
function, let's look at
how to handle a cancel

123
00:05:49,580 --> 00:05:51,230
from a confirm function.

124
00:05:51,230 --> 00:05:54,270
It's pretty easy, because the
confirm function returns a

125
00:05:54,270 --> 00:05:58,720
false value if we get a cancel
from the user at any time.

126
00:05:58,720 --> 00:06:02,400
Then we can just use a simple if
statement, a Boolean check,

127
00:06:02,400 --> 00:06:06,050
to make sure that the user has
confirmed their entry.

128
00:06:06,050 --> 00:06:10,410
If, in fact, we get a truth
value from confirm, then we

129
00:06:10,410 --> 00:06:11,660
can do some code.

130
00:06:14,500 --> 00:06:14,930
All right.

131
00:06:14,930 --> 00:06:18,040
So now that we're masters of
confirm, prompt, and alert and

132
00:06:18,040 --> 00:06:21,100
know how to move between the
three, let's see if we can

133
00:06:21,100 --> 00:06:25,830
make a simple name entry system
for our train service.

134
00:06:25,830 --> 00:06:27,700
We're going to write a
confirmation loop.

135
00:06:27,700 --> 00:06:30,600
And let's prepare some pseudo
code first that plans our

136
00:06:30,600 --> 00:06:33,660
solution using these
functions.

137
00:06:33,660 --> 00:06:37,180
So in our trains.js file, you
see these three dots here?

138
00:06:37,180 --> 00:06:39,060
That just means we've got a
whole bunch of extra code

139
00:06:39,060 --> 00:06:40,150
handling our trains.

140
00:06:40,150 --> 00:06:44,350
And here we will start our
confirmation loop.

141
00:06:44,350 --> 00:06:48,510
We know that we want the loop to
continue until the user has

142
00:06:48,510 --> 00:06:50,450
confirmed a name.

143
00:06:50,450 --> 00:06:52,630
And inside the loop, the first
thing that we'll do is we'll

144
00:06:52,630 --> 00:06:56,030
request the name using our
prompt function that we know.

145
00:06:56,030 --> 00:06:59,850
Following that, if the user says
OK at a confirm function,

146
00:06:59,850 --> 00:07:03,010
we will acknowledge their
accepted entry and then exit

147
00:07:03,010 --> 00:07:04,060
the loop, because we're done.

148
00:07:04,060 --> 00:07:06,820
We don't need to check
it anymore.

149
00:07:06,820 --> 00:07:10,120
Otherwise, we'll cycle back to
the top of the loop and start

150
00:07:10,120 --> 00:07:11,370
the service over.

151
00:07:14,390 --> 00:07:14,620
OK.

152
00:07:14,620 --> 00:07:17,360
Now, let's fill this in
with some real code.

153
00:07:17,360 --> 00:07:19,030
The first thing we'll
need is a variable -

154
00:07:19,030 --> 00:07:22,660
we'll call it gotName - that
will tell us whether we

155
00:07:22,660 --> 00:07:25,880
actually have the user's
name correct or not.

156
00:07:25,880 --> 00:07:28,760
And we will use that
in our loop.

157
00:07:28,760 --> 00:07:32,140
You can see here that we have a
while loop this says, while

158
00:07:32,140 --> 00:07:35,520
our gotName is false, that means
we don't have the name

159
00:07:35,520 --> 00:07:38,030
yet, we'll do the following
things.

160
00:07:38,030 --> 00:07:40,610
The first thing is that we'll
establish a userName variable,

161
00:07:40,610 --> 00:07:43,580
just like we did before, and
then prompt to the passenger.

162
00:07:43,580 --> 00:07:44,330
"Yo, passenger!

163
00:07:44,330 --> 00:07:45,630
What's your name?"

164
00:07:45,630 --> 00:07:48,940
And here's our cool if statement
that says, if we get

165
00:07:48,940 --> 00:07:52,260
a confirmation with the
statement, "Are you

166
00:07:52,260 --> 00:07:53,790
sure your name is?"

167
00:07:53,790 --> 00:07:55,350
And then the userName
variable.

168
00:07:55,350 --> 00:07:58,730
If that returns a truth value,
then we'll alert to the user,

169
00:07:58,730 --> 00:08:00,390
"Sup, username?"

170
00:08:00,390 --> 00:08:02,280
And then here's the money.

171
00:08:02,280 --> 00:08:04,630
We have to set the gotName
variable, which

172
00:08:04,630 --> 00:08:06,360
is a flag, to true.

173
00:08:06,360 --> 00:08:11,480
So now, the loop knows that
we have the user's name.

174
00:08:11,480 --> 00:08:13,020
Once that's true,
what happens?

175
00:08:13,020 --> 00:08:15,440
We go back to the top
of the while loop.

176
00:08:15,440 --> 00:08:19,120
And we see now that gotName
is no longer false,

177
00:08:19,120 --> 00:08:21,310
and we would exit the
loop, because we

178
00:08:21,310 --> 00:08:23,090
have the user's name.

179
00:08:23,090 --> 00:08:25,490
But what would happen if the
If statement didn't trigger

180
00:08:25,490 --> 00:08:27,430
because we did not get
a confirmation?

181
00:08:27,430 --> 00:08:29,810
Well, we would cycle back to
the top of the loop and

182
00:08:29,810 --> 00:08:33,260
continue the process again.

183
00:08:33,260 --> 00:08:35,690
So now, let's see this
loop in action.

184
00:08:35,690 --> 00:08:40,320
Up here we have our index.html
file, as well as our trains.js

185
00:08:40,320 --> 00:08:43,650
source file, within which is
this code down here, our very

186
00:08:43,650 --> 00:08:47,460
basic confirmation loop
that we just built.

187
00:08:47,460 --> 00:08:52,540
When we load our index.html
file, our loop in trains.js

188
00:08:52,540 --> 00:08:54,080
starts to load.

189
00:08:54,080 --> 00:08:55,920
And we get our very
first prompt.

190
00:08:55,920 --> 00:08:57,490
And it says, "Yo, passenger!

191
00:08:57,490 --> 00:08:58,420
What's your name?"

192
00:08:58,420 --> 00:09:01,520
That's this part right
here inside our loop.

193
00:09:01,520 --> 00:09:04,250
And we're going to go ahead
and type in a wrong name -

194
00:09:04,250 --> 00:09:06,510
Johnny Appleseed -

195
00:09:06,510 --> 00:09:08,940
and select OK.

196
00:09:08,940 --> 00:09:12,650
Our loop says, "Are you sure your
name is Johnny Appleseed?"

197
00:09:12,650 --> 00:09:15,140
That's this part right here -
the confirm box -

198
00:09:15,140 --> 00:09:16,870
and since that's not
me, I'm going to go

199
00:09:16,870 --> 00:09:18,070
ahead and say Cancel.

200
00:09:18,070 --> 00:09:19,470
No, that's not me.

201
00:09:19,470 --> 00:09:22,943
And then it cycles back to the
top of the loop and re-prompts

202
00:09:22,943 --> 00:09:25,720
us for my correct name.

203
00:09:25,720 --> 00:09:27,590
So I'm going to go ahead and
type in my right name -

204
00:09:27,590 --> 00:09:29,570
Jason Millhouse -

205
00:09:29,570 --> 00:09:31,830
and hit OK.

206
00:09:31,830 --> 00:09:34,120
Now, it says, "Are you sure your
name is Jason Millhouse?"

207
00:09:34,120 --> 00:09:34,910
Which it is.

208
00:09:34,910 --> 00:09:36,850
So, I'm going to go ahead
and hit the OK.

209
00:09:36,850 --> 00:09:39,330
And it says, "Sup,
Jason Millhouse?"

210
00:09:39,330 --> 00:09:41,640
And I can close that box out.

211
00:09:41,640 --> 00:09:45,080
And notice no more pop-up
boxes appear.

212
00:09:45,080 --> 00:09:49,310
That's because internally the
gotName variable is now true,

213
00:09:49,310 --> 00:09:50,760
and so the loop will exit.

214
00:09:50,760 --> 00:09:53,580
And the pop-up boxes will
cease appearing.

215
00:09:53,580 --> 00:09:56,660
This is a very common way to use
built-in pop-up windows to

216
00:09:56,660 --> 00:09:58,745
retrieve and ensure correct
information.

217
00:10:03,090 --> 00:10:04,870
I hope you've had a great time
with built-in functions,

218
00:10:04,870 --> 00:10:07,900
and now, we will release
you to the challenges.

219
00:10:10,510 --> 00:10:12,560
The-- the-- adayeedem.

220
00:10:12,560 --> 00:10:15,250
For the bloopers.

221
00:10:15,250 --> 00:10:16,540
To the user, sup?

222
00:10:19,540 --> 00:10:21,470
And then - [LAUGHTER]

223
00:10:21,470 --> 00:10:23,300
I can't get through it.

224
00:10:23,300 --> 00:10:24,900
Something valid -

225
00:10:24,900 --> 00:10:27,000
Jason Millhouse.

226
00:10:27,000 --> 00:10:28,250
Enter.

