1
00:00:00,000 --> 00:00:00,420


2
00:00:00,420 --> 00:00:02,840
You watching Ruby Bits Level
One, where we're going to be

3
00:00:02,840 --> 00:00:04,470
going over expressions.

4
00:00:04,470 --> 00:00:06,680
Now the purpose of this course
is to give you a feel for some

5
00:00:06,680 --> 00:00:09,190
of the more advanced
features in Ruby.

6
00:00:09,190 --> 00:00:11,750
But you might already know
some of this stuff.

7
00:00:11,750 --> 00:00:14,020
The first couple levels are
a little bit basic.

8
00:00:14,020 --> 00:00:17,110
So if it feels too basic, feel
free to skip ahead to the

9
00:00:17,110 --> 00:00:18,970
challenges and see if you
can get through them.

10
00:00:18,970 --> 00:00:44,230


11
00:00:44,230 --> 00:00:45,570
In this course, we're
going to be reading

12
00:00:45,570 --> 00:00:46,860
a lot of code together.

13
00:00:46,860 --> 00:00:49,076
So we put together some symbols
so you'll know the

14
00:00:49,076 --> 00:00:50,910
good code from the bad code.

15
00:00:50,910 --> 00:00:52,960
So we have the bad code
symbol followed by

16
00:00:52,960 --> 00:00:55,030
the worse code symbol.

17
00:00:55,030 --> 00:00:56,350
Then we have the good
code symbol.

18
00:00:56,350 --> 00:01:01,490
And finally, the awesome code
symbol with the free life.

19
00:01:01,490 --> 00:01:04,349
So here's our first code sample,
where we have

20
00:01:04,349 --> 00:01:05,720
if !tweets.empty?

21
00:01:05,720 --> 00:01:06,750
puts timeline.

22
00:01:06,750 --> 00:01:09,030
And then we print
out the tweets.

23
00:01:09,030 --> 00:01:12,200
Ruby has a more expressive
way of doing the if not.

24
00:01:12,200 --> 00:01:14,270
Instead, we can use unless.

25
00:01:14,270 --> 00:01:17,750
So we can say, 
unless tweets.empty?

26
00:01:17,750 --> 00:01:19,670
And it reads a little
bit better.

27
00:01:19,670 --> 00:01:22,460
However, if our example has
an else statement--

28
00:01:22,460 --> 00:01:24,690
so we have unless and else--

29
00:01:24,690 --> 00:01:27,430
things start to get a little
bit confusing.

30
00:01:27,430 --> 00:01:30,830
So here is where we might want
to switch the order around and

31
00:01:30,830 --> 00:01:33,910
say if tweets.empty?, do this,

32
00:01:33,910 --> 00:01:35,190
Otherwise, do that.

33
00:01:35,190 --> 00:01:38,580


34
00:01:38,580 --> 00:01:40,830
Here we have some more code
where we're checking to see if

35
00:01:40,830 --> 00:01:43,830
the file path is not
equal to nil.

36
00:01:43,830 --> 00:01:45,800
So we're going to see if
there is a file path.

37
00:01:45,800 --> 00:01:49,020
And if there is, then go ahead
and post the attachment.

38
00:01:49,020 --> 00:01:53,450
However, in Ruby, nil is treated
as false when it comes

39
00:01:53,450 --> 00:01:54,510
to conditionals.

40
00:01:54,510 --> 00:01:58,040
So instead we can write,
if attachment.file_path

41
00:01:58,040 --> 00:02:02,104
attachment.post without
the comparison.

42
00:02:02,104 --> 00:02:04,310
You gotta be careful when
you're doing conditional

43
00:02:04,310 --> 00:02:07,160
statements because not
everything that you assume is

44
00:02:07,160 --> 00:02:09,669
false evaluates to false.

45
00:02:09,669 --> 00:02:13,100
Here you can see an empty string
is treated as true.

46
00:02:13,100 --> 00:02:15,640
0 is also going to
evaluate as true.

47
00:02:15,640 --> 00:02:19,180
And an empty array is also going
to be treated as true.

48
00:02:19,180 --> 00:02:20,830
So here's a surprising
example.

49
00:02:20,830 --> 00:02:24,120
You can see we have here
unless name length.

50
00:02:24,120 --> 00:02:26,350
So we're checking to see if
length is equal to 0.

51
00:02:26,350 --> 00:02:28,680
If it is equal to 0, then we're
printing out a warning.

52
00:02:28,680 --> 00:02:32,250
However, what we just learned
is 0 is true.

53
00:02:32,250 --> 00:02:35,040
So no matter what gets returned
from name length--

54
00:02:35,040 --> 00:02:36,700
well, the code inside
this conditional is

55
00:02:36,700 --> 00:02:38,570
never gonna get run.

56
00:02:38,570 --> 00:02:40,210
Here we have a few more
conditionals.

57
00:02:40,210 --> 00:02:43,110
Each of them executes
one line of code.

58
00:02:43,110 --> 00:02:47,670
This might be a good chance to
use the inline if and unless.

59
00:02:47,670 --> 00:02:50,510
So we'd write instead like so.

60
00:02:50,510 --> 00:02:54,100
And this code is a little
more readable.

61
00:02:54,100 --> 00:02:56,490
Next up, let's talk about
the short circuit and.

62
00:02:56,490 --> 00:02:58,300
So here we have some code where
we're checking to see if

63
00:02:58,300 --> 00:02:59,260
the user is nil.

64
00:02:59,260 --> 00:03:01,760
And if it's not nil, we have
another conditional checking

65
00:03:01,760 --> 00:03:04,140
to see if the user
is signed in.

66
00:03:04,140 --> 00:03:08,020
However, because of the way and
works, we can simply put

67
00:03:08,020 --> 00:03:12,820
if user and user signed in, if
user is nil it's going to fail

68
00:03:12,820 --> 00:03:17,560
and not check to see if
the user is signed in.

69
00:03:17,560 --> 00:03:19,920
Now let's look over a couple
examples using the short

70
00:03:19,920 --> 00:03:21,710
circuit assignment.

71
00:03:21,710 --> 00:03:26,290
So here we have result
equals nil or 1.

72
00:03:26,290 --> 00:03:29,210
Obviously nil's going
to be falsey.

73
00:03:29,210 --> 00:03:32,090
And it's going to return 1.

74
00:03:32,090 --> 00:03:33,870
Then we have 1 or nil.

75
00:03:33,870 --> 00:03:35,830
Obviously this is going
to return 1.

76
00:03:35,830 --> 00:03:37,370
And then 1 or 2.

77
00:03:37,370 --> 00:03:39,910
Again, going to return 1.

78
00:03:39,910 --> 00:03:42,890
As you can see, if the first
part returns true that's going

79
00:03:42,890 --> 00:03:45,500
to get return and the second
part of this is never going to

80
00:03:45,500 --> 00:03:46,900
get touched.

81
00:03:46,900 --> 00:03:49,135
Let's take a look at a couple
more examples using this.

82
00:03:49,135 --> 00:03:51,350
Here we're getting some tweets
from a timeline.

83
00:03:51,350 --> 00:03:53,990
And if nothing got returned from
those tweets, let's go

84
00:03:53,990 --> 00:03:56,420
ahead and set tweets
to an empty array.

85
00:03:56,420 --> 00:03:57,600
We could write this
in a better way

86
00:03:57,600 --> 00:03:58,920
using the short circuit.

87
00:03:58,920 --> 00:04:03,250
So here we can say tweets equals
timeline.tweets or the

88
00:04:03,250 --> 00:04:04,360
empty array.

89
00:04:04,360 --> 00:04:07,370
So if timeline.tweets is
nil, it's going to set it

90
00:04:07,370 --> 00:04:10,490
equal to the empty array.

91
00:04:10,490 --> 00:04:12,800
From within a method, you can
use a shortcut like this.

92
00:04:12,800 --> 00:04:16,079
So we can check to see if
there's a current session.

93
00:04:16,079 --> 00:04:18,410
And if there's not a current
session and that returns nil

94
00:04:18,410 --> 00:04:22,720
or false, it's then going
to call sign user in.

95
00:04:22,720 --> 00:04:24,510
These both are methods.

96
00:04:24,510 --> 00:04:27,500
And one thing to keep in mind
with this, is that you can

97
00:04:27,500 --> 00:04:29,770
either use it this way
or you could use it

98
00:04:29,770 --> 00:04:31,720
with an if and else.

99
00:04:31,720 --> 00:04:33,230
You can obviously write
it that way

100
00:04:33,230 --> 00:04:35,230
if it's more readable.

101
00:04:35,230 --> 00:04:38,320
Another way we can use those
or symbols is with an equal

102
00:04:38,320 --> 00:04:40,800
sign to do some conditional
assignment.

103
00:04:40,800 --> 00:04:43,710
So here you can see we're
setting an i_was_set variable.

104
00:04:43,710 --> 00:04:44,860
We're then using the

105
00:04:44,860 --> 00:04:46,580
conditional assignment operator.

106
00:04:46,580 --> 00:04:48,320
This is going to check to
see if that variable

107
00:04:48,320 --> 00:04:49,590
has been set yet.

108
00:04:49,590 --> 00:04:52,500
And if it has been set, well,
it's not going to set it equal

109
00:04:52,500 --> 00:04:53,160
to anything.

110
00:04:53,160 --> 00:04:55,010
It's going to keep
the same value.

111
00:04:55,010 --> 00:04:56,920
And then if we put it out
to the screen, we're

112
00:04:56,920 --> 00:04:58,420
going to get 1.

113
00:04:58,420 --> 00:05:00,560
In our second example, here
we have a variable we

114
00:05:00,560 --> 00:05:01,610
haven't used yet.

115
00:05:01,610 --> 00:05:03,350
So it's currently
equal to nil.

116
00:05:03,350 --> 00:05:06,070
So in this case it's going
to get set to 2.

117
00:05:06,070 --> 00:05:08,210
This is a good way to set
defaults with your variables

118
00:05:08,210 --> 00:05:10,860
if they need them.

119
00:05:10,860 --> 00:05:13,260
Here we have some code, and see
if you can figure out how

120
00:05:13,260 --> 00:05:16,500
we're going to refactor it.

121
00:05:16,500 --> 00:05:18,890
Obviously we have an options
hash, and on each line we're

122
00:05:18,890 --> 00:05:23,540
checking to see if the options
hash value is equal to nil.

123
00:05:23,540 --> 00:05:25,340
And if it is nil, then
go ahead and

124
00:05:25,340 --> 00:05:26,730
set the default value.

125
00:05:26,730 --> 00:05:29,000
As we learned just a minute ago,
we can instead use the

126
00:05:29,000 --> 00:05:32,080
conditional assignment operator
to set some defaults

127
00:05:32,080 --> 00:05:33,490
on these options
if they're nil.

128
00:05:33,490 --> 00:05:36,930


129
00:05:36,930 --> 00:05:38,310
Next up, let's figure
out how to use

130
00:05:38,310 --> 00:05:40,090
conditional return values.

131
00:05:40,090 --> 00:05:41,930
Here we have a conditional where
we're checking to see if

132
00:05:41,930 --> 00:05:43,620
list name is nil.

133
00:05:43,620 --> 00:05:45,810
And if it's not nil, we
set the options path.

134
00:05:45,810 --> 00:05:48,260
Otherwise we set it
to something else.

135
00:05:48,260 --> 00:05:49,750
This is a good opportunity
to use a

136
00:05:49,750 --> 00:05:51,600
conditional return value.

137
00:05:51,600 --> 00:05:54,890
In Ruby, conditionals always
return a value.

138
00:05:54,890 --> 00:05:57,650
So in this case, we can move the
options path in front of

139
00:05:57,650 --> 00:05:58,760
the conditional.

140
00:05:58,760 --> 00:06:01,030
And the values that get returned
from the conditional

141
00:06:01,030 --> 00:06:02,640
will get set to it.

142
00:06:02,640 --> 00:06:05,720
Now let's put that conditional
inside a method and figure out

143
00:06:05,720 --> 00:06:07,440
how we can refactor it.

144
00:06:07,440 --> 00:06:10,810
Now as you know, every method
in Ruby returns a value.

145
00:06:10,810 --> 00:06:12,660
So we can refactor
this to become a

146
00:06:12,660 --> 00:06:14,070
little bit more readable.

147
00:06:14,070 --> 00:06:16,840
As you can see here, we can get
rid of the URL variable

148
00:06:16,840 --> 00:06:17,860
altogether.

149
00:06:17,860 --> 00:06:19,520
Because the if statement
itself is

150
00:06:19,520 --> 00:06:20,740
going to return a value.

151
00:06:20,740 --> 00:06:24,540
And that value is going to get
returned by the method.

152
00:06:24,540 --> 00:06:27,780
Just like our if else
conditional returns a value,

153
00:06:27,780 --> 00:06:30,810
even things like case statements
return a value.

154
00:06:30,810 --> 00:06:34,070
So here you can see we're
evaluating the client name.

155
00:06:34,070 --> 00:06:35,910
And whatever gets returned we're
setting equal to the

156
00:06:35,910 --> 00:06:37,310
client URL.

157
00:06:37,310 --> 00:06:40,130
Two other useful ways we can use
case statements are first

158
00:06:40,130 --> 00:06:42,930
by using it with a range,
as you see here.

159
00:06:42,930 --> 00:06:45,600


160
00:06:45,600 --> 00:06:47,790
We can also use it with a
regular expression, as you see

161
00:06:47,790 --> 00:06:50,870
here, to figure out if our tweet
is a mention, direct

162
00:06:50,870 --> 00:06:52,890
message, or if it's public.

163
00:06:52,890 --> 00:06:54,150
And there's another
way we could

164
00:06:54,150 --> 00:06:55,490
write this case statement.

165
00:06:55,490 --> 00:06:59,310
If we wanted to, we could write
it with whens and thens.

166
00:06:59,310 --> 00:07:01,125
Obviously, this is just a little
bit more readable.

167
00:07:01,125 --> 00:07:03,950


168
00:07:03,950 --> 00:07:06,840
And that pretty much wraps up
Level One with expressions.

169
00:07:06,840 --> 00:07:09,250
It's time to get your hands
dirty with the challenges, and

170
00:07:09,250 --> 00:07:10,500
we'll see you in Level Two.

171
00:07:10,500 --> 00:07:11,639
